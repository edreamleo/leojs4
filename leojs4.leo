<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20201227091441.1"><vh>Startup</vh>
<v t="ekr.20201227091533.1"><vh>@settings</vh>
<v t="ekr.20201227091533.91"><vh>@@string initial-split-orientation = v</vh></v>
<v t="ekr.20201227091533.138"><vh>Importer settings</vh>
<v t="ekr.20201227091533.139"><vh>@data import-html-tags</vh></v>
<v t="ekr.20201227091533.140"><vh>@data import-xml-tags</vh></v>
</v>
<v t="ekr.20201227091533.153"><vh>@enabled-plugins</vh>
<v t="ekr.20201227091533.154"><vh>common plugins</vh></v>
<v t="ekr.20201227091533.155"><vh>previous tests</vh></v>
<v t="ekr.20201227091533.156"><vh>not enabled</vh></v>
</v>
</v>
</v>
<v t="ekr.20201227091504.1"><vh> Recursive import script</vh></v>
<v t="ekr.20201227092108.1"><vh>@clean package.json</vh></v>
<v t="ekr.20201227092409.3"><vh>@clean dummyLeoApp.js</vh>
<v t="ekr.20201227092409.4"><vh>var test</vh></v>
</v>
<v t="ekr.20201227092409.5"><vh>@clean dummyLeoGlobals.js</vh>
<v t="ekr.20201227092409.6"><vh>export var trace</vh></v>
<v t="ekr.20201227092409.7"><vh>export var pr</vh></v>
</v>
<v t="ekr.20201227092409.8"><vh>@clean extension.js</vh>
<v t="ekr.20201227092409.9"><vh>function activate</vh></v>
</v>
<v t="ekr.20201227092409.12"><vh>@path src</vh>
<v t="ekr.20201227092409.13"><vh>@clean inspect.js</vh>
<v t="ekr.20201227092409.14"><vh>export var isclass</vh></v>
</v>
<v t="ekr.20201227092409.15"><vh>@clean itertools.js</vh>
<v t="ekr.20201227092409.16"><vh>export var count</vh></v>
<v t="ekr.20201227092409.17"><vh>export var cycle</vh></v>
<v t="ekr.20201227092409.18"><vh>export var repeat</vh></v>
<v t="ekr.20201227092409.19"><vh>export var accumulate</vh></v>
<v t="ekr.20201227092409.20"><vh>export var chain</vh></v>
<v t="ekr.20201227092409.21"><vh>chain.from_iterable</vh></v>
<v t="ekr.20201227092409.22"><vh>export var compress</vh></v>
<v t="ekr.20201227092409.23"><vh>export var dropwhile</vh></v>
<v t="ekr.20201227092409.24"><vh>export var filterfalse</vh></v>
<v t="ekr.20201227092409.25"><vh>export var groupby</vh></v>
<v t="ekr.20201227092409.27"><vh>export var islice</vh></v>
<v t="ekr.20201227092409.28"><vh>export var starmap</vh></v>
<v t="ekr.20201227092409.29"><vh>export var takewhile</vh></v>
<v t="ekr.20201227092409.30"><vh>export var tee</vh></v>
<v t="ekr.20201227092409.31"><vh>export var product</vh></v>
<v t="ekr.20201227092409.32"><vh>export var permutations</vh></v>
<v t="ekr.20201227092409.33"><vh>export var combinations</vh></v>
<v t="ekr.20201227092409.35"><vh>export var combinations_with_replacement</vh></v>
</v>
<v t="ekr.20201227092409.37"><vh>@clean leo.commands.js</vh></v>
<v t="ekr.20201227092409.38"><vh>@clean leo.core.js</vh></v>
<v t="ekr.20201227092409.39"><vh>@clean leo.core.leoFrame.js</vh>
<v t="ekr.20201227092409.40"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.41"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.42"><vh>get disable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.43"><vh>get enable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.44"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.45"><vh>get isEnabled() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.46"><vh>get put() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.47"><vh>get setFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.48"><vh>get py_update() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.49"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.50"><vh>get drawIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.51"><vh>get editLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.52"><vh>get edit_widget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.53"><vh>get redraw() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.54"><vh>get scrollTo() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.55"><vh>get initAfterLoad() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.56"><vh>get onHeadChanged() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.57"><vh>get redraw_after_contract() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.58"><vh>get redraw_after_expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.59"><vh>get redraw_after_head_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.60"><vh>get redraw_after_icons_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.61"><vh>get redraw_after_select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.62"><vh>get OnIconCtrlClick() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.63"><vh>get endEditLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.64"><vh>get getEditTextDict() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.65"><vh>get injectCallbacks() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.66"><vh>get onHeadlineKey() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.67"><vh>get select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.68"><vh>get updateHead() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.69"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.70"><vh>get appendText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.71"><vh>get clipboard_append() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.72"><vh>get clipboard_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.73"><vh>get delete() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.74"><vh>get deleteTextSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.75"><vh>get disable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.76"><vh>get enable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.77"><vh>get flashCharacter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.78"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.79"><vh>get getAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.80"><vh>get getInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.81"><vh>get getSelectedText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.82"><vh>get getSelectionRange() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.83"><vh>get getXScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.84"><vh>get getYScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.85"><vh>get hasSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.86"><vh>get insert() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.87"><vh>get see() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.88"><vh>get seeInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.89"><vh>get selectAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.90"><vh>get setAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.91"><vh>get setFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.92"><vh>get setInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.93"><vh>get setSelectionRange() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.94"><vh>get setXScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.95"><vh>get setYScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.96"><vh>get tag_configure() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.97"><vh>get toPythonIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.98"><vh>get toPythonIndexRowCol() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.99"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.100"><vh>get add() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.101"><vh>get addRow() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.102"><vh>get addRowIfNeeded() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.103"><vh>get addWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.104"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.105"><vh>get createChaptersIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.106"><vh>get deleteButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.107"><vh>get getNewFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.108"><vh>get setCommandForButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.109"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.110"><vh>get cmd() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.111"><vh>get forceFullRecolor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.112"><vh>get getColorizer() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.113"><vh>get updateSyntaxColorer() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.114"><vh>get recolor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.115"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.116"><vh>get createEditorFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.117"><vh>get createTextWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.118"><vh>get packEditorLabelWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.119"><vh>get onFocusOut() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.120"><vh>get addEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.121"><vh>get assignPositionToEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.122"><vh>get cycleEditorFocus() {return __get__(this, cmd('editor-cycle-focus')(cmd('cycle-editor-focus') ...(105)</vh></v>
<v t="ekr.20201227092409.123"><vh>get deleteEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.124"><vh>get findEditorForChapter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.125"><vh>get unselectLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.126"><vh>get selectLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.127"><vh>get selectEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.128"><vh>get selectEditorHelper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.129"><vh>get updateEditors() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.130"><vh>get computeLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.131"><vh>get createChapterIvar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.132"><vh>get ensurePositionExists() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.133"><vh>get deactivateActiveEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.134"><vh>get recolorWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.135"><vh>get switchToChapter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.136"><vh>get updateInjectedIvars() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.137"><vh>get getInsertLines() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.138"><vh>get getSelectionAreas() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.139"><vh>get getSelectionLines() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.140"><vh>get onBodyChanged() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.141"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.142"><vh>get createFirstTreeNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.143"><vh>get cmd() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.144"><vh>get OnBodyClick() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.145"><vh>get OnBodyRClick() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.146"><vh>get getTitle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.147"><vh>get setTitle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.148"><vh>get initAfterLoad() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.149"><vh>get initCompleteHint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.150"><vh>get setTabWidth() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.151"><vh>get initialRatios() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.152"><vh>get longFileName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.153"><vh>get shortFileName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.154"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.155"><vh>get promptForSave() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.156"><vh>get scanForTabWidth() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.157"><vh>get addIconButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.158"><vh>get addIconRow() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.159"><vh>get addIconWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.160"><vh>get clearIconBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.161"><vh>get createIconBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.162"><vh>get getIconBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.163"><vh>get getNewIconFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.164"><vh>get hideIconBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.165"><vh>get showIconBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.166"><vh>get createStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.167"><vh>get clearStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.168"><vh>get disableStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.169"><vh>get enableStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.170"><vh>get getStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.171"><vh>get putStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.172"><vh>get setFocusStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.173"><vh>get statusLineIsEnabled() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.174"><vh>get updateStatusLine() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.175"><vh>get copyText() {return __get__(this, cmd('copy-text') function</vh></v>
<v t="ekr.20201227092409.176"><vh>get cutText() {return __get__(this, cmd('cut-text') function</vh></v>
<v t="ekr.20201227092409.177"><vh>get pasteText() {return __get__(this, cmd('paste-text') function</vh></v>
<v t="ekr.20201227092409.178"><vh>get OnPaste() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.179"><vh>get endEditLabelCommand() {return __get__(this, cmd('end-edit-headline') function</vh></v>
<v t="ekr.20201227092409.180"><vh>get bringToFront() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.181"><vh>get cascade() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.182"><vh>get contractBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.183"><vh>get contractLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.184"><vh>get contractOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.185"><vh>get contractPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.186"><vh>get deiconify() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.187"><vh>get equalSizedPanes() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.188"><vh>get expandBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.189"><vh>get expandLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.190"><vh>get expandOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.191"><vh>get expandPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.192"><vh>get fullyExpandBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.193"><vh>get fullyExpandLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.194"><vh>get fullyExpandOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.195"><vh>get fullyExpandPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.196"><vh>get get_window_info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.197"><vh>get hideBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.198"><vh>get hideLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.199"><vh>get hideLogWindow() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.200"><vh>get hideOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.201"><vh>get hidePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.202"><vh>get leoHelp() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.203"><vh>get lift() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.204"><vh>get minimizeAll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.205"><vh>get resizePanesToRatio() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.206"><vh>get resizeToScreen() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.207"><vh>get setInitialWindowGeometry() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.208"><vh>get setTopGeometry() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.209"><vh>get toggleActivePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.210"><vh>get toggleSplitDirection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.211"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.212"><vh>get cmd() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.213"><vh>get clearTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.214"><vh>get createTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.215"><vh>get createTextWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.216"><vh>get deleteTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.217"><vh>get disable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.218"><vh>get enable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.219"><vh>get getSelectedTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.220"><vh>get hideTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.221"><vh>get lowerTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.222"><vh>get raiseTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.223"><vh>get orderedTabNames() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.224"><vh>get numberOfVisibleTabs() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.226"><vh>get put() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.227"><vh>get putnl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.228"><vh>get renameTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.229"><vh>get selectTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.230"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.231"><vh>get initAfterLoad() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.232"><vh>get redraw_after_contract() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.233"><vh>get redraw_after_expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.234"><vh>get redraw_after_head_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.235"><vh>get redraw_after_icons_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.236"><vh>get redraw_after_select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.237"><vh>get onHeadChanged() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.238"><vh>get endEditLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.239"><vh>get getEditTextDict() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.240"><vh>get onHeadlineKey() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.241"><vh>get OnIconCtrlClick() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.242"><vh>get OnIconDoubleClick() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.243"><vh>get updateHead() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.244"><vh>get drawIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.245"><vh>get redraw() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.246"><vh>get scrollTo() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.247"><vh>get editLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.248"><vh>get edit_widget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.249"><vh>get select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.250"><vh>get selectHelper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.251"><vh>get unselect_helper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.252"><vh>get select_new_node() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.253"><vh>get set_body_text_after_select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.254"><vh>get change_current_position() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.255"><vh>get scroll_cursor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.256"><vh>get set_status_line() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.257"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.258"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.259"><vh>get createControl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.260"><vh>get createTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.261"><vh>get destroyTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.262"><vh>get selectTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.263"><vh>get setTabLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.264"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.265"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.266"><vh>get createControl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.267"><vh>get addEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.268"><vh>get assignPositionToEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.269"><vh>get createEditorFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.270"><vh>get cycleEditorFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.271"><vh>get deleteEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.272"><vh>get selectEditor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.273"><vh>get selectLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.274"><vh>get setEditorColors() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.275"><vh>get unselectLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.276"><vh>get updateEditors() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.277"><vh>get forceFullRecolor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.278"><vh>get scheduleIdleTimeRoutine() {return __get__(this, function(self, function</vh></v>
<v t="ekr.20201227092409.279"><vh>get setFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.280"><vh>get colorize() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.281"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.282"><vh>get bringToFront() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.283"><vh>get cascade() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.284"><vh>get contractBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.285"><vh>get contractLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.286"><vh>get contractOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.287"><vh>get contractPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.288"><vh>get deiconify() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.289"><vh>get destroySelf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.290"><vh>get equalSizedPanes() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.291"><vh>get expandBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.292"><vh>get expandLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.293"><vh>get expandOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.294"><vh>get expandPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.295"><vh>get fullyExpandBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.296"><vh>get fullyExpandLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.297"><vh>get fullyExpandOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.298"><vh>get fullyExpandPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.299"><vh>get get_window_info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.300"><vh>get hideBodyPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.301"><vh>get hideLogPane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.302"><vh>get hideLogWindow() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.303"><vh>get hideOutlinePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.304"><vh>get hidePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.305"><vh>get leoHelp() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.306"><vh>get lift() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.307"><vh>get minimizeAll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.308"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.309"><vh>get resizePanesToRatio() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.310"><vh>get resizeToScreen() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.311"><vh>get setInitialWindowGeometry() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.312"><vh>get setTopGeometry() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.313"><vh>get setWrap() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.314"><vh>get toggleActivePane() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.315"><vh>get toggleSplitDirection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.316"><vh>get py_update() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.317"><vh>get finishCreate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.318"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.319"><vh>get addRow() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.320"><vh>get addRowIfNeeded() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.321"><vh>get addWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.322"><vh>get createChaptersIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.323"><vh>get deleteButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.324"><vh>get getNewFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.325"><vh>get hide() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.326"><vh>get show() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.327"><vh>get add() {return __get__(this, function</vh>
<v t="ekr.20201227092409.328"><vh>var commandCallback</vh></v>
<v t="ekr.20201227092409.329"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.330"><vh>get __repr__() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092409.331"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.332"><vh>get setCommandForButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.333"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.334"><vh>get finishCreate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.335"><vh>get createControl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.336"><vh>get createTextWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.337"><vh>get hasSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.338"><vh>get isLogWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.339"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.340"><vh>get put() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.341"><vh>get putnl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.342"><vh>get clearTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.343"><vh>get createCanvas() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.344"><vh>get createTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.345"><vh>get deleteTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.346"><vh>get getSelectedTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.347"><vh>get lowerTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.348"><vh>get raiseTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.349"><vh>get renameTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.350"><vh>get selectTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.351"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.352"><vh>get disable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.353"><vh>get enable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.354"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.355"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.356"><vh>get isEnabled() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.357"><vh>get put() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.358"><vh>get setFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.359"><vh>get py_update() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.360"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.361"><vh>get edit_widget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.362"><vh>get editLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.363"><vh>get printWidgets() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.364"><vh>get drawIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.365"><vh>get redraw() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.366"><vh>get redraw_after_contract() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.367"><vh>get redraw_after_expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.368"><vh>get redraw_after_head_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.369"><vh>get redraw_after_icons_changed() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.370"><vh>get redraw_after_select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.371"><vh>get scrollTo() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.372"><vh>get updateIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.373"><vh>get setHeadline() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.374"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.375"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.376"><vh>get getName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.377"><vh>get clipboard_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.378"><vh>get clipboard_append() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.379"><vh>get flashCharacter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.380"><vh>get getXScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.381"><vh>get getYScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.382"><vh>get see() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.383"><vh>get seeInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.384"><vh>get setFocus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.385"><vh>get setStyleClass() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.386"><vh>get setXScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.387"><vh>get setYScrollPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.388"><vh>get tag_configure() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.389"><vh>get appendText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.390"><vh>get delete() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.391"><vh>get deleteTextSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.392"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.393"><vh>get getAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.394"><vh>get getInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.395"><vh>get getSelectedText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.396"><vh>get getSelectionRange() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.397"><vh>get hasSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.398"><vh>get insert() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.399"><vh>get selectAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.400"><vh>get setAllText() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.401"><vh>get setInsertPoint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.402"><vh>get setSelectionRange() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.403"><vh>get toPythonIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092409.404"><vh>get toPythonIndexRowCol() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092410.1"><vh>@clean leo.core.leoGlobals.js</vh>
<v t="ekr.20201227092410.2"><vh>var callback</vh></v>
<v t="ekr.20201227092410.4"><vh>export var check_cmd_instance_dict</vh></v>
<v t="ekr.20201227092410.5"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.6"><vh>get __call__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.7"><vh>export var command_alias</vh></v>
<v t="ekr.20201227092410.8"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.9"><vh>get __call__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.11"><vh>export var ivars2instance</vh></v>
<v t="ekr.20201227092410.12"><vh>export var new_cmd_decorator</vh>
<v t="ekr.20201227092410.13"><vh>var _decorator</vh>
<v t="ekr.20201227092410.14"><vh>var new_cmd_wrapper</vh></v>
</v>
</v>
<v t="ekr.20201227092410.15"><vh>export var standard_timestamp</vh></v>
<v t="ekr.20201227092410.16"><vh>export var get_backup_path</vh></v>
<v t="ekr.20201227092410.17"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.18"><vh>get __hash__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.19"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.20"><vh>get dump() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.21"><vh>get isModeBinding() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.22"><vh>export var isBindingInfo</vh></v>
<v t="ekr.20201227092410.23"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.24"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.25"><vh>get ivars() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.26"><vh>get py_keys() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.27"><vh>get toString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.29"><vh>get __setitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.30"><vh>get __getitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.31"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.32"><vh>get __contains__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.33"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.34"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.35"><vh>get close() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.36"><vh>get flush() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.37"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.38"><vh>get readline() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.39"><vh>get write() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.40"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.41"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.42"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.43"><vh>get __eq__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.44"><vh>get __lt__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.45"><vh>get __le__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.46"><vh>get __ne__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.47"><vh>get __gt__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.48"><vh>get __ge__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.49"><vh>get __hash__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.50"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.51"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.52"><vh>get dump() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.53"><vh>get finalize_binding() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.55"><vh>get finalize_char() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.56"><vh>get strip_shift() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.57"><vh>get find() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.58"><vh>get lower() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.59"><vh>get startswith() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.60"><vh>get find_mods() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.61"><vh>get isAltCtrl() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.62"><vh>get isFKey() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.63"><vh>get isPlainKey() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.64"><vh>get isNumPadKey() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.65"><vh>get isPlainNumPad() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.66"><vh>get removeNumPadModifier() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.67"><vh>get prettyPrint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.68"><vh>get strip_mods() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.69"><vh>get toGuiChar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.70"><vh>get toInsertableChar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.71"><vh>export var isStroke</vh></v>
<v t="ekr.20201227092410.72"><vh>export var isStrokeOrNone</vh></v>
<v t="ekr.20201227092410.73"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.74"><vh>get is_regex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.75"><vh>get scan_regex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.76"><vh>get scan_string() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.77"><vh>get expand_range() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.78"><vh>get find_matching_bracket() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.79"><vh>get scan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.80"><vh>get scan_comment() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.81"><vh>get starts_comment() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.82"><vh>get scan_back() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.83"><vh>get back_scan_comment() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.84"><vh>get ends_comment() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.85"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.86"><vh>get run() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.87"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.88"><vh>get dump() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.90"><vh>get select() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.91"><vh>get removeClones() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.92"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.93"><vh>get py_next() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.94"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.95"><vh>get isRedirected() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.96"><vh>get flush() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.97"><vh>get rawPrint() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.98"><vh>get redirect() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.99"><vh>get undirect() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.100"><vh>get write() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.101"><vh>export var redirectStderr</vh></v>
<v t="ekr.20201227092410.102"><vh>export var redirectStdout</vh></v>
<v t="ekr.20201227092410.103"><vh>export var restoreStderr</vh></v>
<v t="ekr.20201227092410.104"><vh>export var restoreStdout</vh></v>
<v t="ekr.20201227092410.105"><vh>export var stdErrIsRedirected</vh></v>
<v t="ekr.20201227092410.106"><vh>export var stdOutIsRedirected</vh></v>
<v t="ekr.20201227092410.107"><vh>export var rawPrint</vh></v>
<v t="ekr.20201227092410.108"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.109"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.110"><vh>get computeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.111"><vh>get report() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.112"><vh>get stop() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.113"><vh>get tracer() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.114"><vh>get updateStats() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.115"><vh>export var startTracer</vh></v>
<v t="ekr.20201227092410.116"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.117"><vh>get __call__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.118"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.119"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.120"><vh>get __delattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.121"><vh>get __getattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.122"><vh>get __setattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.123"><vh>get __bool__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.124"><vh>get __contains__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.125"><vh>get __getitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.126"><vh>get __setitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.127"><vh>get __iter__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.128"><vh>get __len__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.129"><vh>get __next__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.130"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.131"><vh>get __call__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.132"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.133"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.134"><vh>get __delattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.135"><vh>get __getattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.136"><vh>get __setattr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.137"><vh>get __bool__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.138"><vh>get __contains__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.139"><vh>get __getitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.140"><vh>get __iter__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.141"><vh>get __len__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.142"><vh>get __next__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.143"><vh>get __setitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.144"><vh>export var null_object_print_attr</vh></v>
<v t="ekr.20201227092410.146"><vh>export var null_object_print</vh></v>
<v t="ekr.20201227092410.148"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.149"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.150"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.151"><vh>get __setitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.152"><vh>get add_to_list() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.153"><vh>get _checkKeyType() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.154"><vh>get _checkValType() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.155"><vh>get _reportTypeError() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.156"><vh>get copy() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.157"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.158"><vh>get py_items() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.159"><vh>get py_keys() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.160"><vh>get py_values() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.161"><vh>get get_setting() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.162"><vh>get get_string_setting() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.163"><vh>get py_name() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.164"><vh>get setName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.165"><vh>get py_update() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.166"><vh>export var assertUi</vh></v>
<v t="ekr.20201227092410.167"><vh>get test_comment_delims_from_extension() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.168"><vh>get test_is_sentinel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.169"><vh>export var isTextWidget</vh></v>
<v t="ekr.20201227092410.170"><vh>export var isTextWrapper</vh></v>
<v t="ekr.20201227092410.171"><vh>export var alert</vh></v>
<v t="ekr.20201227092410.172"><vh>export var assert_is</vh></v>
<v t="ekr.20201227092410.173"><vh>export var _assert</vh></v>
<v t="ekr.20201227092410.174"><vh>export var callers</vh></v>
<v t="ekr.20201227092410.176"><vh>export var _callerName</vh></v>
<v t="ekr.20201227092410.177"><vh>export var caller</vh></v>
<v t="ekr.20201227092410.178"><vh>export var dump</vh></v>
<v t="ekr.20201227092410.179"><vh>export var oldDump</vh></v>
<v t="ekr.20201227092410.180"><vh>export var dump_encoded_string</vh></v>
<v t="ekr.20201227092410.181"><vh>export var module_date</vh></v>
<v t="ekr.20201227092410.182"><vh>export var plugin_date</vh></v>
<v t="ekr.20201227092410.183"><vh>export var file_date</vh></v>
<v t="ekr.20201227092410.184"><vh>export var get_line</vh></v>
<v t="ekr.20201227092410.185"><vh>export var get_line_after</vh></v>
<v t="ekr.20201227092410.186"><vh>export var getIvarsDict</vh></v>
<v t="ekr.20201227092410.188"><vh>export var checkUnchangedIvars</vh></v>
<v t="ekr.20201227092410.189"><vh>export var pause</vh></v>
<v t="ekr.20201227092410.190"><vh>export var pdb</vh></v>
<v t="ekr.20201227092410.191"><vh>export var dictToString</vh>
<v t="ekr.20201227092410.192"><vh>var n =(2 + len(indent)) + max function</vh></v>
<v t="ekr.20201227092410.193"><vh>for(var [i, key] of enumerate(sorted(d, __kwargtrans__({key: function</vh></v>
</v>
<v t="ekr.20201227092410.194"><vh>export var listToString</vh></v>
<v t="ekr.20201227092410.195"><vh>export var objToString</vh></v>
<v t="ekr.20201227092410.196"><vh>export var run_pylint</vh></v>
<v t="ekr.20201227092410.197"><vh>export var sleep</vh></v>
<v t="ekr.20201227092410.198"><vh>export var printObj</vh></v>
<v t="ekr.20201227092410.199"><vh>export var tupleToString</vh></v>
<v t="ekr.20201227092410.200"><vh>export var clearAllIvars</vh></v>
<v t="ekr.20201227092410.201"><vh>export var collectGarbage</vh></v>
<v t="ekr.20201227092410.202"><vh>export var enable_gc_debug</vh></v>
<v t="ekr.20201227092410.203"><vh>export var getRepresentativeLiveObjects</vh></v>
<v t="ekr.20201227092410.204"><vh>export var printGc</vh></v>
<v t="ekr.20201227092410.205"><vh>export var printGcRefs</vh></v>
<v t="ekr.20201227092410.206"><vh>export var printGcAll</vh></v>
<v t="ekr.20201227092410.208"><vh>export var printGcObjects</vh></v>
<v t="ekr.20201227092410.209"><vh>export var printGcSummary</vh></v>
<v t="ekr.20201227092410.210"><vh>export var printGcVerbose</vh></v>
<v t="ekr.20201227092410.212"><vh>export var printTimes</vh></v>
<v t="ekr.20201227092410.213"><vh>export var clearStats</vh></v>
<v t="ekr.20201227092410.214"><vh>export var printStats = command('show-stats') function</vh></v>
<v t="ekr.20201227092410.216"><vh>export var stat</vh></v>
<v t="ekr.20201227092410.217"><vh>export var getTime</vh></v>
<v t="ekr.20201227092410.218"><vh>export var esDiffTime</vh></v>
<v t="ekr.20201227092410.219"><vh>export var printDiffTime</vh></v>
<v t="ekr.20201227092410.220"><vh>export var timeSince</vh></v>
<v t="ekr.20201227092410.221"><vh>export var comment_delims_from_extension</vh></v>
<v t="ekr.20201227092410.222"><vh>export var findAllValidLanguageDirectives</vh></v>
<v t="ekr.20201227092410.223"><vh>export var findTabWidthDirectives</vh></v>
<v t="ekr.20201227092410.224"><vh>export var findFirstValidAtLanguageDirective</vh></v>
<v t="ekr.20201227092410.225"><vh>export var findLanguageDirectives</vh></v>
<v t="ekr.20201227092410.227"><vh>export var findReference</vh></v>
<v t="ekr.20201227092410.228"><vh>export var get_directives_dict</vh></v>
<v t="ekr.20201227092410.229"><vh>export var get_directives_dict_list</vh></v>
<v t="ekr.20201227092410.230"><vh>export var getLanguageFromAncestorAtFileNode</vh></v>
<v t="ekr.20201227092410.232"><vh>export var getLanguageAtPosition</vh></v>
<v t="ekr.20201227092410.233"><vh>export var getOutputNewline</vh></v>
<v t="ekr.20201227092410.234"><vh>export var inAtNosearch</vh></v>
<v t="ekr.20201227092410.235"><vh>export var isDirective</vh></v>
<v t="ekr.20201227092410.236"><vh>export var isValidLanguage</vh></v>
<v t="ekr.20201227092410.237"><vh>export var scanAtCommentAndAtLanguageDirectives</vh></v>
<v t="ekr.20201227092410.238"><vh>export var scanAtEncodingDirectives</vh></v>
<v t="ekr.20201227092410.239"><vh>export var scanAtHeaderDirectives</vh></v>
<v t="ekr.20201227092410.240"><vh>export var scanAtLineendingDirectives</vh></v>
<v t="ekr.20201227092410.241"><vh>export var scanAtPagewidthDirectives</vh></v>
<v t="ekr.20201227092410.242"><vh>export var scanAtPathDirectives</vh></v>
<v t="ekr.20201227092410.243"><vh>export var scanAllAtPathDirectives</vh></v>
<v t="ekr.20201227092410.244"><vh>export var scanAtRootDirectives</vh></v>
<v t="ekr.20201227092410.245"><vh>export var scanAtRootOptions</vh></v>
<v t="ekr.20201227092410.246"><vh>export var scanAtTabwidthDirectives</vh></v>
<v t="ekr.20201227092410.247"><vh>export var scanAllAtTabWidthDirectives</vh></v>
<v t="ekr.20201227092410.248"><vh>export var scanAtWrapDirectives</vh></v>
<v t="ekr.20201227092410.249"><vh>export var scanAllAtWrapDirectives</vh></v>
<v t="ekr.20201227092410.250"><vh>export var scanDirectives</vh></v>
<v t="ekr.20201227092410.251"><vh>export var scanForAtIgnore</vh></v>
<v t="ekr.20201227092410.252"><vh>export var scanForAtLanguage</vh></v>
<v t="ekr.20201227092410.253"><vh>export var scanForAtSettings</vh></v>
<v t="ekr.20201227092410.254"><vh>export var set_delims_from_language</vh></v>
<v t="ekr.20201227092410.255"><vh>export var set_delims_from_string</vh></v>
<v t="ekr.20201227092410.256"><vh>export var set_language</vh></v>
<v t="ekr.20201227092410.257"><vh>export var setDefaultDirectory</vh></v>
<v t="ekr.20201227092410.258"><vh>export var checkOpenDirectory</vh></v>
<v t="ekr.20201227092410.259"><vh>export var stripPathCruft</vh></v>
<v t="ekr.20201227092410.260"><vh>export var update_directives_pat</vh></v>
<v t="ekr.20201227092410.262"><vh>export var chdir</vh></v>
<v t="ekr.20201227092410.263"><vh>export var computeGlobalConfigDir</vh></v>
<v t="ekr.20201227092410.264"><vh>export var computeHomeDir</vh></v>
<v t="ekr.20201227092410.265"><vh>export var computeLeoDir</vh></v>
<v t="ekr.20201227092410.266"><vh>export var computeLoadDir</vh></v>
<v t="ekr.20201227092410.267"><vh>export var computeMachineName</vh></v>
<v t="ekr.20201227092410.268"><vh>export var computeStandardDirectories</vh></v>
<v t="ekr.20201227092410.269"><vh>export var computeWindowTitle</vh></v>
<v t="ekr.20201227092410.270"><vh>export var create_temp_file</vh></v>
<v t="ekr.20201227092410.271"><vh>export var defaultLeoFileExtension</vh></v>
<v t="ekr.20201227092410.272"><vh>export var ensure_extension</vh></v>
<v t="ekr.20201227092410.273"><vh>export var fullPath</vh></v>
<v t="ekr.20201227092410.274"><vh>export var get_files_in_directory</vh></v>
<v t="ekr.20201227092410.276"><vh>export var getBaseDirectory</vh></v>
<v t="ekr.20201227092410.277"><vh>export var getEncodingAt</vh></v>
<v t="ekr.20201227092410.278"><vh>export var guessExternalEditor</vh></v>
<v t="ekr.20201227092410.279"><vh>export var init_dialog_folder</vh></v>
<v t="ekr.20201227092410.280"><vh>export var is_binary_file</vh></v>
<v t="ekr.20201227092410.281"><vh>export var is_binary_external_file</vh></v>
<v t="ekr.20201227092410.282"><vh>export var is_binary_string</vh></v>
<v t="ekr.20201227092410.283"><vh>export var is_sentinel</vh></v>
<v t="ekr.20201227092410.284"><vh>export var makeAllNonExistentDirectories</vh></v>
<v t="ekr.20201227092410.285"><vh>export var makePathRelativeTo</vh></v>
<v t="ekr.20201227092410.286"><vh>export var openWithFileName</vh></v>
<v t="ekr.20201227092410.287"><vh>export var readFileIntoEncodedString</vh></v>
<v t="ekr.20201227092410.288"><vh>export var readFileIntoString</vh></v>
<v t="ekr.20201227092410.289"><vh>export var readFileIntoUnicodeString</vh></v>
<v t="ekr.20201227092410.290"><vh>export var readlineForceUnixNewline</vh></v>
<v t="ekr.20201227092410.291"><vh>export var sanitize_filename</vh></v>
<v t="ekr.20201227092410.292"><vh>export var setGlobalOpenDir</vh></v>
<v t="ekr.20201227092410.293"><vh>export var shortFileName</vh></v>
<v t="ekr.20201227092410.294"><vh>export var splitLongFileName</vh></v>
<v t="ekr.20201227092410.295"><vh>export var utils_remove</vh></v>
<v t="ekr.20201227092410.296"><vh>export var utils_rename</vh></v>
<v t="ekr.20201227092410.297"><vh>export var utils_chmod</vh></v>
<v t="ekr.20201227092410.298"><vh>export var utils_stat</vh></v>
<v t="ekr.20201227092410.299"><vh>export var writeFile</vh></v>
<v t="ekr.20201227092410.300"><vh>export var find_word</vh></v>
<v t="ekr.20201227092410.301"><vh>export var findRootsWithPredicate</vh></v>
<v t="ekr.20201227092410.303"><vh>export var recursiveUNLSearch</vh>
<v t="ekr.20201227092410.304"><vh>var moveToP</vh>
<v t="ekr.20201227092410.305"><vh>var pos = sum function</vh></v>
</v>
</v>
<v t="ekr.20201227092410.306"><vh>export var recursiveUNLFind</vh>
<v t="ekr.20201227092410.307"><vh>var unlList</vh></v>
<v t="ekr.20201227092410.308"><vh>var heads</vh></v>
<v t="ekr.20201227092410.309"><vh>var nths</vh></v>
<v t="ekr.20201227092410.310"><vh>order += function</vh></v>
<v t="ekr.20201227092410.311"><vh>if(any function</vh></v>
</v>
<v t="ekr.20201227092410.312"><vh>export var recursiveUNLParts</vh></v>
<v t="ekr.20201227092410.314"><vh>export var scanError</vh></v>
<v t="ekr.20201227092410.315"><vh>export var scanf</vh></v>
<v t="ekr.20201227092410.316"><vh>export var see_more_lines</vh></v>
<v t="ekr.20201227092410.317"><vh>export var splitLines</vh></v>
<v t="ekr.20201227092410.318"><vh>export var joinLines</vh></v>
<v t="ekr.20201227092410.319"><vh>export var skip_block_comment</vh></v>
<v t="ekr.20201227092410.320"><vh>export var skip_braces</vh></v>
<v t="ekr.20201227092410.321"><vh>export var skip_parens</vh></v>
<v t="ekr.20201227092410.322"><vh>export var skip_pascal_begin_end</vh></v>
<v t="ekr.20201227092410.323"><vh>export var skip_pascal_block_comment</vh></v>
<v t="ekr.20201227092410.324"><vh>export var skip_pascal_string</vh></v>
<v t="ekr.20201227092410.325"><vh>export var skip_heredoc_string</vh></v>
<v t="ekr.20201227092410.326"><vh>export var skip_pp_directive</vh></v>
<v t="ekr.20201227092410.327"><vh>export var skip_pp_if</vh></v>
<v t="ekr.20201227092410.328"><vh>export var skip_pp_part</vh></v>
<v t="ekr.20201227092410.329"><vh>export var skip_python_string</vh></v>
<v t="ekr.20201227092410.330"><vh>export var skip_string</vh></v>
<v t="ekr.20201227092410.331"><vh>export var skip_to_semicolon</vh></v>
<v t="ekr.20201227092410.332"><vh>export var skip_typedef</vh></v>
<v t="ekr.20201227092410.333"><vh>export var escaped</vh></v>
<v t="ekr.20201227092410.334"><vh>export var find_line_start</vh></v>
<v t="ekr.20201227092410.335"><vh>export var find_on_line</vh></v>
<v t="ekr.20201227092410.336"><vh>export var is_c_id</vh></v>
<v t="ekr.20201227092410.337"><vh>export var is_nl</vh></v>
<v t="ekr.20201227092410.338"><vh>export var is_special</vh></v>
<v t="ekr.20201227092410.339"><vh>export var is_ws</vh></v>
<v t="ekr.20201227092410.340"><vh>export var is_ws_or_nl</vh></v>
<v t="ekr.20201227092410.341"><vh>export var match</vh></v>
<v t="ekr.20201227092410.342"><vh>export var match_c_word</vh></v>
<v t="ekr.20201227092410.343"><vh>export var match_ignoring_case</vh></v>
<v t="ekr.20201227092410.344"><vh>export var match_word</vh></v>
<v t="ekr.20201227092410.345"><vh>export var skip_blank_lines</vh></v>
<v t="ekr.20201227092410.346"><vh>export var skip_c_id</vh></v>
<v t="ekr.20201227092410.347"><vh>export var skip_id</vh></v>
<v t="ekr.20201227092410.348"><vh>export var skip_line</vh></v>
<v t="ekr.20201227092410.349"><vh>export var skip_to_end_of_line</vh></v>
<v t="ekr.20201227092410.350"><vh>export var skip_to_start_of_line</vh></v>
<v t="ekr.20201227092410.351"><vh>export var skip_long</vh></v>
<v t="ekr.20201227092410.352"><vh>export var skip_nl</vh></v>
<v t="ekr.20201227092410.353"><vh>export var skip_non_ws</vh></v>
<v t="ekr.20201227092410.354"><vh>export var skip_pascal_braces</vh></v>
<v t="ekr.20201227092410.355"><vh>export var skip_to_char</vh></v>
<v t="ekr.20201227092410.356"><vh>export var skip_ws</vh></v>
<v t="ekr.20201227092410.357"><vh>export var skip_ws_and_nl</vh></v>
<v t="ekr.20201227092410.358"><vh>export var backupGitIssues</vh></v>
<v t="ekr.20201227092410.359"><vh>export var execGitCommand</vh></v>
<v t="ekr.20201227092410.361"><vh>export var getGitIssues</vh></v>
<v t="ekr.20201227092410.362"><vh>get backup_issues() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.363"><vh>get get_all_issues() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.364"><vh>get get_issues() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.365"><vh>get get_one_issue() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.366"><vh>get get_one_page() {return __get__(this, function</vh>
<v t="ekr.20201227092410.367"><vh>var aList</vh></v>
<v t="ekr.20201227092410.368"><vh>var aList</vh></v>
</v>
<v t="ekr.20201227092410.369"><vh>get print_header() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.370"><vh>export var getGitVersion</vh>
<v t="ekr.20201227092410.371"><vh>var info</vh></v>
<v t="ekr.20201227092410.372"><vh>var find</vh></v>
</v>
<v t="ekr.20201227092410.373"><vh>export var gitBranchName</vh></v>
<v t="ekr.20201227092410.374"><vh>export var gitCommitNumber</vh></v>
<v t="ekr.20201227092410.375"><vh>export var gitInfoForFile</vh></v>
<v t="ekr.20201227092410.376"><vh>export var gitInfoForOutline</vh></v>
<v t="ekr.20201227092410.377"><vh>export var gitDescribe</vh></v>
<v t="ekr.20201227092410.378"><vh>export var gitHeadPath</vh></v>
<v t="ekr.20201227092410.379"><vh>export var gitInfo</vh></v>
<v t="ekr.20201227092410.380"><vh>export var dummy_act_on_node</vh></v>
<v t="ekr.20201227092410.381"><vh>export var doHook</vh></v>
<v t="ekr.20201227092410.382"><vh>export var loadOnePlugin</vh></v>
<v t="ekr.20201227092410.383"><vh>export var registerExclusiveHandler</vh></v>
<v t="ekr.20201227092410.384"><vh>export var registerHandler</vh></v>
<v t="ekr.20201227092410.385"><vh>export var plugin_signon</vh></v>
<v t="ekr.20201227092410.386"><vh>export var unloadOnePlugin</vh></v>
<v t="ekr.20201227092410.387"><vh>export var unregisterHandler</vh></v>
<v t="ekr.20201227092410.388"><vh>export var getHandlersForTag</vh></v>
<v t="ekr.20201227092410.389"><vh>export var getLoadedPlugins</vh></v>
<v t="ekr.20201227092410.390"><vh>export var getPluginModule</vh></v>
<v t="ekr.20201227092410.391"><vh>export var pluginIsLoaded</vh></v>
<v t="ekr.20201227092410.392"><vh>export var disableIdleTimeHook</vh></v>
<v t="ekr.20201227092410.393"><vh>export var enableIdleTimeHook</vh></v>
<v t="ekr.20201227092410.394"><vh>export var IdleTime</vh></v>
<v t="ekr.20201227092410.395"><vh>export var idleTimeHookHandler</vh></v>
<v t="ekr.20201227092410.396"><vh>export var cantImport</vh></v>
<v t="ekr.20201227092410.397"><vh>export var import_module</vh></v>
<v t="ekr.20201227092410.398"><vh>export var convertPythonIndexToRowCol</vh></v>
<v t="ekr.20201227092410.399"><vh>export var convertRowColToPythonIndex</vh></v>
<v t="ekr.20201227092410.400"><vh>export var getWord</vh></v>
<v t="ekr.20201227092410.401"><vh>export var getLine</vh></v>
<v t="ekr.20201227092410.402"><vh>export var toPythonIndex</vh></v>
<v t="ekr.20201227092410.403"><vh>export var flatten_list</vh></v>
<v t="ekr.20201227092410.404"><vh>export var join_list</vh></v>
<v t="ekr.20201227092410.405"><vh>export var list_to_string</vh></v>
<v t="ekr.20201227092410.407"><vh>export var isascii</vh></v>
<v t="ekr.20201227092410.409"><vh>export var angleBrackets</vh></v>
<v t="ekr.20201227092410.410"><vh>export var ensureLeadingNewlines</vh></v>
<v t="ekr.20201227092410.411"><vh>export var ensureTrailingNewlines</vh></v>
<v t="ekr.20201227092410.412"><vh>export var longestCommonPrefix</vh></v>
<v t="ekr.20201227092410.413"><vh>export var itemsMatchingPrefixInList</vh></v>
<v t="ekr.20201227092410.415"><vh>export var removeLeading</vh></v>
<v t="ekr.20201227092410.416"><vh>export var removeTrailing</vh></v>
<v t="ekr.20201227092410.417"><vh>export var stripBrackets</vh></v>
<v t="ekr.20201227092410.418"><vh>export var unCamel</vh></v>
<v t="ekr.20201227092410.419"><vh>export var checkUnicode</vh></v>
<v t="ekr.20201227092410.420"><vh>export var getPythonEncodingFromString</vh></v>
<v t="ekr.20201227092410.421"><vh>export var isBytes</vh></v>
<v t="ekr.20201227092410.422"><vh>export var isCallable</vh></v>
<v t="ekr.20201227092410.423"><vh>export var isInt</vh></v>
<v t="ekr.20201227092410.424"><vh>export var isList</vh></v>
<v t="ekr.20201227092410.425"><vh>export var isString</vh></v>
<v t="ekr.20201227092410.426"><vh>export var isUnicode</vh></v>
<v t="ekr.20201227092410.427"><vh>export var isValidEncoding</vh></v>
<v t="ekr.20201227092410.428"><vh>export var isWordChar</vh></v>
<v t="ekr.20201227092410.429"><vh>export var isWordChar1</vh></v>
<v t="ekr.20201227092410.430"><vh>export var stripBOM</vh></v>
<v t="ekr.20201227092410.431"><vh>export var toEncodedString</vh></v>
<v t="ekr.20201227092410.432"><vh>export var toUnicode</vh></v>
<v t="ekr.20201227092410.433"><vh>export var u</vh></v>
<v t="ekr.20201227092410.434"><vh>export var computeLeadingWhitespace</vh></v>
<v t="ekr.20201227092410.435"><vh>export var computeLeadingWhitespaceWidth</vh></v>
<v t="ekr.20201227092410.436"><vh>export var computeWidth</vh></v>
<v t="ekr.20201227092410.437"><vh>export var adjustTripleString</vh></v>
<v t="ekr.20201227092410.439"><vh>export var removeExtraLws</vh></v>
<v t="ekr.20201227092410.441"><vh>export var wrap_lines</vh></v>
<v t="ekr.20201227092410.442"><vh>export var get_leading_ws</vh></v>
<v t="ekr.20201227092410.443"><vh>export var optimizeLeadingWhitespace</vh></v>
<v t="ekr.20201227092410.444"><vh>export var regularizeTrailingNewlines</vh></v>
<v t="ekr.20201227092410.445"><vh>export var removeBlankLines</vh></v>
<v t="ekr.20201227092410.447"><vh>export var removeLeadingBlankLines</vh></v>
<v t="ekr.20201227092410.448"><vh>export var removeLeadingWhitespace</vh></v>
<v t="ekr.20201227092410.449"><vh>export var removeTrailingWs</vh></v>
<v t="ekr.20201227092410.450"><vh>export var skip_leading_ws</vh></v>
<v t="ekr.20201227092410.451"><vh>export var skip_leading_ws_with_indent</vh></v>
<v t="ekr.20201227092410.452"><vh>export var stripBlankLines</vh></v>
<v t="ekr.20201227092410.453"><vh>export var doKeywordArgs</vh></v>
<v t="ekr.20201227092410.454"><vh>export var ecnl</vh></v>
<v t="ekr.20201227092410.455"><vh>export var ecnls</vh></v>
<v t="ekr.20201227092410.456"><vh>export var enl</vh></v>
<v t="ekr.20201227092410.457"><vh>export var blue</vh></v>
<v t="ekr.20201227092410.458"><vh>export var error</vh></v>
<v t="ekr.20201227092410.459"><vh>export var note</vh></v>
<v t="ekr.20201227092410.460"><vh>export var red</vh></v>
<v t="ekr.20201227092410.461"><vh>export var warning</vh></v>
<v t="ekr.20201227092410.462"><vh>export var es</vh></v>
<v t="ekr.20201227092410.463"><vh>export var es_clickable_link</vh></v>
<v t="ekr.20201227092410.464"><vh>export var es_debug</vh></v>
<v t="ekr.20201227092410.465"><vh>export var es_dump</vh></v>
<v t="ekr.20201227092410.467"><vh>export var es_error</vh></v>
<v t="ekr.20201227092410.468"><vh>export var es_print_error</vh></v>
<v t="ekr.20201227092410.469"><vh>export var es_event_exception</vh></v>
<v t="ekr.20201227092410.470"><vh>export var es_exception</vh></v>
<v t="ekr.20201227092410.471"><vh>export var es_exception_type</vh></v>
<v t="ekr.20201227092410.472"><vh>export var es_print</vh></v>
<v t="ekr.20201227092410.473"><vh>export var es_print_exception</vh></v>
<v t="ekr.20201227092410.474"><vh>export var es_trace</vh></v>
<v t="ekr.20201227092410.475"><vh>export var getLastTracebackFileAndLineNumber</vh></v>
<v t="ekr.20201227092410.476"><vh>export var goto_last_exception</vh></v>
<v t="ekr.20201227092410.477"><vh>export var internalError</vh></v>
<v t="ekr.20201227092410.478"><vh>export var log_to_file</vh></v>
<v t="ekr.20201227092410.479"><vh>export var pr</vh></v>
<v t="ekr.20201227092410.480"><vh>export var prettyPrintType</vh></v>
<v t="ekr.20201227092410.481"><vh>export var print_bindings</vh></v>
<v t="ekr.20201227092410.482"><vh>export var printEntireTree</vh></v>
<v t="ekr.20201227092410.483"><vh>export var printGlobals</vh></v>
<v t="ekr.20201227092410.484"><vh>export var printLeoModules</vh></v>
<v t="ekr.20201227092410.485"><vh>export var printStack</vh></v>
<v t="ekr.20201227092410.486"><vh>export var trace</vh></v>
<v t="ekr.20201227092410.487"><vh>export var translateArgs</vh></v>
<v t="ekr.20201227092410.488"><vh>export var translateString</vh></v>
<v t="ekr.20201227092410.489"><vh>export var actualColor</vh></v>
<v t="ekr.20201227092410.490"><vh>export var CheckVersion</vh>
<v t="ekr.20201227092410.491"><vh>var vals1</vh></v>
<v t="ekr.20201227092410.492"><vh>var vals2</vh></v>
<v t="ekr.20201227092410.493"><vh>vals1.extend function</vh></v>
<v t="ekr.20201227092410.494"><vh>vals2.extend function</vh></v>
</v>
<v t="ekr.20201227092410.495"><vh>export var CheckVersionToInt</vh></v>
<v t="ekr.20201227092410.496"><vh>export var choose</vh></v>
<v t="ekr.20201227092410.497"><vh>export var cls = command('cls') function</vh></v>
<v t="ekr.20201227092410.498"><vh>export var createScratchCommander</vh></v>
<v t="ekr.20201227092410.499"><vh>export var funcToMethod</vh></v>
<v t="ekr.20201227092410.500"><vh>export var init_zodb</vh></v>
<v t="ekr.20201227092410.501"><vh>export var isMacOS</vh></v>
<v t="ekr.20201227092410.502"><vh>export var issueSecurityWarning</vh></v>
<v t="ekr.20201227092410.503"><vh>export var makeDict</vh></v>
<v t="ekr.20201227092410.504"><vh>export var pep8_class_name</vh></v>
<v t="ekr.20201227092410.506"><vh>export var plural</vh></v>
<v t="ekr.20201227092410.507"><vh>export var truncate</vh></v>
<v t="ekr.20201227092410.508"><vh>export var windows</vh></v>
<v t="ekr.20201227092410.509"><vh>export var glob_glob</vh></v>
<v t="ekr.20201227092410.511"><vh>export var os_path_abspath</vh></v>
<v t="ekr.20201227092410.512"><vh>export var os_path_basename</vh></v>
<v t="ekr.20201227092410.513"><vh>export var os_path_dirname</vh></v>
<v t="ekr.20201227092410.514"><vh>export var os_path_exists</vh></v>
<v t="ekr.20201227092410.515"><vh>export var os_path_expandExpression</vh></v>
<v t="ekr.20201227092410.516"><vh>export var os_path_expanduser</vh></v>
<v t="ekr.20201227092410.517"><vh>export var os_path_finalize</vh></v>
<v t="ekr.20201227092410.518"><vh>export var os_path_finalize_join</vh></v>
<v t="ekr.20201227092410.519"><vh>export var os_path_getmtime</vh></v>
<v t="ekr.20201227092410.520"><vh>export var os_path_getsize</vh></v>
<v t="ekr.20201227092410.521"><vh>export var os_path_isabs</vh></v>
<v t="ekr.20201227092410.522"><vh>export var os_path_isdir</vh></v>
<v t="ekr.20201227092410.523"><vh>export var os_path_isfile</vh></v>
<v t="ekr.20201227092410.524"><vh>export var os_path_join</vh></v>
<v t="ekr.20201227092410.526"><vh>export var os_path_normcase</vh></v>
<v t="ekr.20201227092410.527"><vh>export var os_path_normpath</vh></v>
<v t="ekr.20201227092410.528"><vh>export var os_path_normslashes</vh></v>
<v t="ekr.20201227092410.529"><vh>export var os_path_realpath</vh></v>
<v t="ekr.20201227092410.530"><vh>export var os_path_split</vh></v>
<v t="ekr.20201227092410.531"><vh>export var os_path_splitext</vh></v>
<v t="ekr.20201227092410.532"><vh>export var os_startfile</vh>
<v t="ekr.20201227092410.533"><vh>var stderr2log</vh></v>
<v t="ekr.20201227092410.534"><vh>var itPoll</vh></v>
<v t="ekr.20201227092410.535"><vh>var itoPoll = g.IdleTime function</vh></v>
</v>
<v t="ekr.20201227092410.536"><vh>export var toUnicodeFileEncoding</vh></v>
<v t="ekr.20201227092410.537"><vh>export var createTopologyList</vh></v>
<v t="ekr.20201227092410.538"><vh>export var getDocString</vh></v>
<v t="ekr.20201227092410.539"><vh>export var getDocStringForFunction</vh>
<v t="ekr.20201227092410.540"><vh>var py_name</vh></v>
<v t="ekr.20201227092410.541"><vh>var get_defaults</vh></v>
</v>
<v t="ekr.20201227092410.542"><vh>export var python_tokenize</vh></v>
<v t="ekr.20201227092410.543"><vh>export var exec_file</vh></v>
<v t="ekr.20201227092410.544"><vh>export var execute_shell_commands</vh></v>
<v t="ekr.20201227092410.546"><vh>export var execute_shell_commands_with_options</vh></v>
<v t="ekr.20201227092410.547"><vh>export var computeBaseDir</vh></v>
<v t="ekr.20201227092410.548"><vh>export var computeCommands</vh></v>
<v t="ekr.20201227092410.549"><vh>export var executeFile</vh></v>
<v t="ekr.20201227092410.551"><vh>export var findNodeInChildren</vh></v>
<v t="ekr.20201227092410.552"><vh>export var findNodeInTree</vh></v>
<v t="ekr.20201227092410.553"><vh>export var findNodeAnywhere</vh></v>
<v t="ekr.20201227092410.554"><vh>export var findTopLevelNode</vh></v>
<v t="ekr.20201227092410.555"><vh>export var getScript</vh></v>
<v t="ekr.20201227092410.556"><vh>export var composeScript</vh></v>
<v t="ekr.20201227092410.557"><vh>export var extractExecutableString</vh></v>
<v t="ekr.20201227092410.558"><vh>export var handleScriptException</vh></v>
<v t="ekr.20201227092410.559"><vh>export var insertCodingLine</vh></v>
<v t="ekr.20201227092410.560"><vh>export var findTestScript</vh></v>
<v t="ekr.20201227092410.561"><vh>export var getTestVars</vh></v>
<v t="ekr.20201227092410.562"><vh>export var run_unit_test_in_separate_process</vh></v>
<v t="ekr.20201227092410.563"><vh>export var toEncodedStringWithErrorCode</vh></v>
<v t="ekr.20201227092410.564"><vh>export var toUnicodeWithErrorCode</vh></v>
<v t="ekr.20201227092410.565"><vh>export var unquoteUrl</vh></v>
<v t="ekr.20201227092410.566"><vh>export var computeFileUrl</vh></v>
<v t="ekr.20201227092410.567"><vh>export var getUrlFromNode</vh>
<v t="ekr.20201227092410.568"><vh>var table</vh></v>
<v t="ekr.20201227092410.569"><vh>var table</vh></v>
</v>
<v t="ekr.20201227092410.570"><vh>export var handleUrl</vh></v>
<v t="ekr.20201227092410.571"><vh>export var handleUrlHelper</vh></v>
<v t="ekr.20201227092410.572"><vh>export var traceUrl</vh></v>
<v t="ekr.20201227092410.573"><vh>export var handleUnl</vh></v>
<v t="ekr.20201227092410.574"><vh>export var isValidUrl</vh></v>
<v t="ekr.20201227092410.575"><vh>export var openUrl</vh></v>
<v t="ekr.20201227092410.576"><vh>export var openUrlOnClick</vh></v>
<v t="ekr.20201227092410.577"><vh>export var openUrlHelper</vh></v>
</v>
<v t="ekr.20201227092410.578"><vh>@clean leo.core.leoGui.js</vh>
<v t="ekr.20201227092410.579"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.580"><vh>get create_key_event() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.581"><vh>get guiName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.582"><vh>get setScript() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.583"><vh>get event_generate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.584"><vh>get destroySelf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.585"><vh>get runAboutLeoDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.586"><vh>get runAskLeoIDDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.587"><vh>get runAskOkDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.588"><vh>get runAskOkCancelNumberDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.589"><vh>get runAskOkCancelStringDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.590"><vh>get runAskYesNoDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.591"><vh>get runAskYesNoCancelDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.592"><vh>get runPropertiesDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.593"><vh>get runOpenFileDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.594"><vh>get runSaveFileDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.595"><vh>get createColorPanel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092410.596"><vh>get createComparePanel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.1"><vh>get createFindTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.2"><vh>get createFontPanel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.3"><vh>get createLeoFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.4"><vh>get runMainLoop() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.5"><vh>get replaceClipboardWith() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.6"><vh>get getTextFromClipboard() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.7"><vh>get attachLeoIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.8"><vh>get center_dialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.9"><vh>get create_labeled_frame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.10"><vh>get get_window_info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.11"><vh>get get_focus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.12"><vh>get set_focus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.13"><vh>get getFontFromParams() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.14"><vh>get getFullVersion() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.15"><vh>get makeScriptButton() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.16"><vh>get dismiss_splash_screen() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.17"><vh>get ensure_commander_visible() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.18"><vh>get finishCreate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.19"><vh>get postPopupMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.20"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.21"><vh>get put_help() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.22"><vh>get widget_name() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.23"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.24"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.25"><vh>get py_get() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.26"><vh>get __getitem__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.27"><vh>get py_metatype() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.28"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.29"><vh>get runAboutLeoDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.30"><vh>get runAskLeoIDDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.31"><vh>get runAskOkDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.32"><vh>get runAskOkCancelNumberDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.33"><vh>get runAskOkCancelStringDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.34"><vh>get runCompareDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.35"><vh>get runOpenFileDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.36"><vh>get runSaveFileDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.37"><vh>get runAskYesNoDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.38"><vh>get runAskYesNoCancelDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.39"><vh>get simulateDialog() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.40"><vh>get get_focus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.41"><vh>get getTextFromClipboard() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.42"><vh>get replaceClipboardWith() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.43"><vh>get set_focus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.44"><vh>get alert() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.45"><vh>get attachLeoIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.46"><vh>get destroySelf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.47"><vh>get finishCreate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.48"><vh>get getFontFromParams() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.49"><vh>get getIconImage() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.50"><vh>get getImageImage() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.51"><vh>get getTreeImage() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.52"><vh>get get_window_info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.53"><vh>get onActivateEvent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.54"><vh>get onDeactivateEvent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.55"><vh>get set_top_geometry() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.56"><vh>get isTextWidget() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.57"><vh>get isTextWrapper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.58"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.59"><vh>get createComparePanel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.60"><vh>get createFindTab() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.61"><vh>get createLeoFrame() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.62"><vh>get runMainLoop() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.63"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.64"><vh>get createAllButtons() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.65"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.66"><vh>get checkState() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.67"><vh>get objectName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.68"><vh>get setCheckState() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.69"><vh>get toggle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.70"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.71"><vh>get runMainLoop() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.72"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.73"><vh>get py_clear() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.74"><vh>get insert() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.75"><vh>get objectName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.76"><vh>get text() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.77"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.78"><vh>get isChecked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.79"><vh>get objectName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.80"><vh>get toggle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.81"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.82"><vh>get destroySelf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.83"><vh>get createSpellTab() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092411.84"><vh>@clean leo.core.leoMenu.js</vh>
<v t="ekr.20201227092411.85"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.86"><vh>get finishCreate() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.87"><vh>get define_enable_dict() {return __get__(this, function</vh>
<v t="ekr.20201227092411.88"><vh>var __left0__ = dict({'undo': c.undoer.canUndo, 'redo': c.undoer.canRedo, 'extract-names': c.canE...(105)</vh></v>
<v t="ekr.20201227092411.89"><vh>d ['expand-to-level-{}'.format(i)]</vh></v>
</v>
<v t="ekr.20201227092411.90"><vh>get oops() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.91"><vh>get error() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.92"><vh>get capitalizeMinibufferMenuName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.93"><vh>get createMenusFromTables() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.94"><vh>get createMenusFromConfigList() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.95"><vh>get createMenuFromConfigList() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.96"><vh>get handleSpecialMenus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.97"><vh>get hasSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.98"><vh>get canonicalizeMenuName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.100"><vh>get canonicalizeTranslatedMenuName() {return __get__(this, function</vh>
<v t="ekr.20201227092411.101"><vh>return ''.join function</vh></v>
<v t="ekr.20201227092411.102"><vh>return ''.join function</vh></v>
</v>
<v t="ekr.20201227092411.103"><vh>get createMenuEntries() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.104"><vh>get createMasterMenuCallback() {return __get__(this, function</vh>
<v t="ekr.20201227092411.105"><vh>var getWidget</vh></v>
<v t="ekr.20201227092411.106"><vh>var static_menu_callback</vh></v>
<v t="ekr.20201227092411.107"><vh>var dummy_menu_callback</vh></v>
<v t="ekr.20201227092411.108"><vh>var dynamic_menu_callback</vh></v>
</v>
<v t="ekr.20201227092411.109"><vh>get getMenuEntryBindings() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.110"><vh>get getMenuEntryInfo() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.111"><vh>get traceMenuTable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.112"><vh>get createMenuItemsFromTable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.113"><vh>get createNewMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.114"><vh>get createOpenWithMenuFromTable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.115"><vh>get createOpenWithMenuItemsFromTable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.116"><vh>get defineOpenWithMenuCallback() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.118"><vh>get deleteRecentFilesMenuItems() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.119"><vh>get deleteMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.120"><vh>get deleteMenuItem() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.121"><vh>get getRealMenuName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.122"><vh>get setRealMenuName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.123"><vh>get setRealMenuNamesFromTable() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.124"><vh>get getMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.125"><vh>get setMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.126"><vh>get destroyMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.127"><vh>get add_cascade() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.128"><vh>get add_command() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.129"><vh>get add_separator() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.130"><vh>get delete() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.131"><vh>get delete_range() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.132"><vh>get destroy() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.133"><vh>get insert() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.134"><vh>get insert_cascade() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.135"><vh>get new_menu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.136"><vh>get activateMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.137"><vh>get clearAccel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.138"><vh>get createMenuBar() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.139"><vh>get createOpenWithMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.140"><vh>get disableMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.141"><vh>get enableMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.142"><vh>get getMacHelpMenu() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.143"><vh>get getMenuLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.144"><vh>get setMenuLabel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.145"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.146"><vh>get oops() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092411.147"><vh>@clean leo.core.leoNodes.js</vh>
<v t="ekr.20201227092411.148"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.149"><vh>get check_gnx() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.150"><vh>get compute_last_index() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.151"><vh>get computeNewIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.152"><vh>get getDefaultId() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.153"><vh>get setDefaultId() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.154"><vh>get getNewIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.155"><vh>get new_vnode_helper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.156"><vh>get scanGnx() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.157"><vh>get setTimestamp() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.158"><vh>get tupleToString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.159"><vh>get py_update() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.160"><vh>get updateLastIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.161"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.162"><vh>get __eq__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.163"><vh>get __ne__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.164"><vh>get __ge__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.165"><vh>get __le__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.166"><vh>get __lt__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.167"><vh>get __gt__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.168"><vh>get __bool__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.169"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.170"><vh>get archivedPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.172"><vh>get dumpLink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.173"><vh>get dump() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.174"><vh>get key() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.175"><vh>get sort_key() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.177"><vh>get convertTreeToString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.178"><vh>get moreHead() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.179"><vh>get moreBody() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.180"><vh>get children() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.181"><vh>get following_siblings() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.182"><vh>get nearest_roots() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.184"><vh>get nearest_unique_roots() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.186"><vh>get nodes() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.187"><vh>get parents() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.188"><vh>get self_and_parents() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.189"><vh>get self_and_siblings() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.190"><vh>get self_and_subtree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.191"><vh>get subtree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.192"><vh>get unique_nodes() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.193"><vh>get unique_subtree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.194"><vh>get anyAtFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.195"><vh>get atAutoNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.196"><vh>get atCleanNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.197"><vh>get atEditNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.198"><vh>get atFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.199"><vh>get atNoSentinelsFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.200"><vh>get atShadowFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.201"><vh>get atSilentFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.202"><vh>get atThinFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.203"><vh>get isAnyAtFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.204"><vh>get isAtAllNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.205"><vh>get isAtAutoNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.206"><vh>get isAtAutoRstNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.207"><vh>get isAtCleanNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.208"><vh>get isAtEditNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.209"><vh>get isAtFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.210"><vh>get isAtIgnoreNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.211"><vh>get isAtNoSentinelsFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.212"><vh>get isAtOthersNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.213"><vh>get isAtRstFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.214"><vh>get isAtSilentFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.215"><vh>get isAtShadowFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.216"><vh>get isAtThinFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.217"><vh>get matchHeadline() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.218"><vh>get bodyString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.219"><vh>get headString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.220"><vh>get cleanHeadString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.221"><vh>get isDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.222"><vh>get isMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.223"><vh>get isOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.224"><vh>get isSelected() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.225"><vh>get isTopBitSet() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.226"><vh>get isVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.227"><vh>get status() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.228"><vh>get childIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.229"><vh>get directParents() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.230"><vh>get hasChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.231"><vh>get numberOfChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.232"><vh>get getBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.233"><vh>get getFirstChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.234"><vh>get getLastChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.235"><vh>get getLastNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.236"><vh>get getNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.237"><vh>get getNodeAfterTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.238"><vh>get getNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.239"><vh>get getParent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.240"><vh>get getThreadBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.241"><vh>get getThreadNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.242"><vh>get getVisBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.243"><vh>get getVisNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.244"><vh>get get_UNL() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.245"><vh>get hasBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.246"><vh>get hasNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.247"><vh>get hasParent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.248"><vh>get hasThreadBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.249"><vh>get hasThreadNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.250"><vh>get findRootPosition() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.251"><vh>get isAncestorOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.252"><vh>get isCloned() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.253"><vh>get isRoot() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.254"><vh>get isVisible() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.256"><vh>get level() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.257"><vh>get positionAfterDeletedTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.258"><vh>get textOffset() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.259"><vh>get isOutsideAnyAtFileTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.260"><vh>get _adjustPositionBeforeUnlink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.261"><vh>get _linkAfter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.262"><vh>get _linkCopiedAfter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.263"><vh>get _linkAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.264"><vh>get _linkCopiedAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.265"><vh>get _linkAsRoot() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.266"><vh>get _parentVnode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.267"><vh>get _relinkAsCloneOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.268"><vh>get _unlink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.269"><vh>get badUnlink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.270"><vh>get moveToBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.271"><vh>get moveToFirstChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.272"><vh>get moveToLastChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.273"><vh>get moveToLastNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.274"><vh>get moveToNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.275"><vh>get moveToNodeAfterTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.276"><vh>get moveToNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.277"><vh>get moveToParent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.278"><vh>get moveToThreadBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.279"><vh>get moveToThreadNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.280"><vh>get moveToVisBack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.281"><vh>get checkVisBackLimit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.282"><vh>get moveToVisNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.283"><vh>get checkVisNextLimit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.284"><vh>get safeMoveToThreadNext() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.286"><vh>get clone() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.287"><vh>get copy() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.288"><vh>get copyTreeAfter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.289"><vh>get copyTreeFromSelfTo() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.290"><vh>get copyWithNewVnodes() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.291"><vh>get createNodeHierarchy() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.292"><vh>get deleteAllChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.293"><vh>get doDelete() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.294"><vh>get insertAfter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.295"><vh>get insertAsLastChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.296"><vh>get insertAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.297"><vh>get insertBefore() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.298"><vh>get invalidOutline() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.299"><vh>get moveAfter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.300"><vh>get moveToFirstChildOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.301"><vh>get moveToLastChildOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.302"><vh>get moveToNthChildOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.303"><vh>get moveToRoot() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.304"><vh>get promote() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.305"><vh>get validateOutlineWithParent() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.306"><vh>get __get_b() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.307"><vh>get __set_b() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.308"><vh>get __get_h() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.309"><vh>get __set_h() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.310"><vh>get __get_gnx() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.311"><vh>get __get_script() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.312"><vh>get __get_nosentinels() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.314"><vh>get __get_u() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.315"><vh>get __set_u() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.316"><vh>get contract() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.318"><vh>get expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.320"><vh>get isExpanded() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.321"><vh>get clearMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.322"><vh>get clearOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.323"><vh>get clearVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.324"><vh>get initExpandedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.325"><vh>get initMarkedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.326"><vh>get initStatus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.327"><vh>get setMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.328"><vh>get setOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.329"><vh>get setSelected() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.330"><vh>get setVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.331"><vh>get computeIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.332"><vh>get setIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.333"><vh>get setSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.334"><vh>get restoreCursorAndScroll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.335"><vh>get saveCursorAndScroll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.336"><vh>get setBodyString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.337"><vh>get initHeadString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.338"><vh>get setHeadString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.339"><vh>get clearVisitedInTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.340"><vh>get clearAllVisitedInTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.341"><vh>get clearDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.342"><vh>get inAtIgnoreRange() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.343"><vh>get setAllAncestorAtFileNodesDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.344"><vh>get setDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.345"><vh>get is_at_all() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.347"><vh>get in_at_all_tree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.348"><vh>get is_at_ignore() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.349"><vh>get in_at_ignore_tree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.350"><vh>get children() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.351"><vh>get filter_h() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.352"><vh>get filter_b() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.353"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.354"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.355"><vh>get dumpLink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.356"><vh>get dump() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.357"><vh>get findAtFileName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.358"><vh>get anyAtFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.359"><vh>get atAutoNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.360"><vh>get atAutoRstNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.361"><vh>get atCleanNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.362"><vh>get atEditNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.363"><vh>get atFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.364"><vh>get atNoSentinelsFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.365"><vh>get atRstFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.366"><vh>get atShadowFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.367"><vh>get atSilentFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.368"><vh>get atThinFileNodeName() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.369"><vh>get isAtAllNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.370"><vh>get isAnyAtFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.371"><vh>get isAtAutoNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.372"><vh>get isAtAutoRstNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.373"><vh>get isAtCleanNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.374"><vh>get isAtEditNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.375"><vh>get isAtFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.376"><vh>get isAtRstFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.377"><vh>get isAtNoSentinelsFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.378"><vh>get isAtSilentFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.379"><vh>get isAtShadowFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.380"><vh>get isAtThinFileNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.381"><vh>get isAtIgnoreNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.382"><vh>get isAtOthersNode() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.383"><vh>get matchHeadline() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.384"><vh>get copyTree() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.385"><vh>get bodyString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.386"><vh>get firstChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.387"><vh>get hasChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.388"><vh>get lastChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.389"><vh>get nthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.390"><vh>get numberOfChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.391"><vh>get directParents() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.392"><vh>get hasBody() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.393"><vh>get headString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.394"><vh>get isNthChildOf() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.395"><vh>get isCloned() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.396"><vh>get isDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.397"><vh>get isMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.398"><vh>get isOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.399"><vh>get isSelected() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.400"><vh>get isTopBitSet() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.401"><vh>get isVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.402"><vh>get isWriteBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.403"><vh>get status() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.404"><vh>get clearDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.405"><vh>get setDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.406"><vh>get clearClonedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.407"><vh>get clearMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.408"><vh>get clearWriteBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.409"><vh>get clearOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.410"><vh>get clearVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.411"><vh>get contract() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.412"><vh>get expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.413"><vh>get initExpandedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.414"><vh>get isExpanded() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.415"><vh>get initStatus() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.416"><vh>get setClonedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.417"><vh>get initClonedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.418"><vh>get setMarked() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.419"><vh>get initMarkedBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.420"><vh>get setOrphan() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.421"><vh>get setSelected() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.422"><vh>get setVisited() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.423"><vh>get setWriteBit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.424"><vh>get childrenModified() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.425"><vh>get computeIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.426"><vh>get setIcon() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.427"><vh>get contentModified() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.428"><vh>get restoreCursorAndScroll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.429"><vh>get saveCursorAndScroll() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.430"><vh>get setBodyString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.431"><vh>get setHeadString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.432"><vh>get setSelection() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.433"><vh>get setAllAncestorAtFileNodesDirty() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.435"><vh>get cloneAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.436"><vh>get insertAsFirstChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.437"><vh>get insertAsLastChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.438"><vh>get insertAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.439"><vh>get _addCopiedLink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.440"><vh>get _addLink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.441"><vh>get _addParentLinks() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.442"><vh>get _cutLink() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.443"><vh>get _cutParentLinks() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.444"><vh>get _deleteAllChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.445"><vh>get _linkAsNthChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.446"><vh>get __get_b() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.447"><vh>get __set_b() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.448"><vh>get __get_h() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.449"><vh>get __set_h() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.450"><vh>get __get_u() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.451"><vh>get __set_u() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.452"><vh>get __get_gnx() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092411.453"><vh>@clean leo_module.js</vh>
<v t="ekr.20201227092411.454"><vh>var test</vh></v>
</v>
<v t="ekr.20201227092411.455"><vh>@clean logging.js</vh>
<v t="ekr.20201227092411.456"><vh>export var getLevelName</vh></v>
<v t="ekr.20201227092411.457"><vh>export var addLevelName</vh></v>
<v t="ekr.20201227092411.458"><vh>export var currentframe</vh></v>
<v t="ekr.20201227092411.459"><vh>export var _checkLevel</vh></v>
<v t="ekr.20201227092411.460"><vh>export var _acquireLock</vh></v>
<v t="ekr.20201227092411.461"><vh>export var _releaseLock</vh></v>
<v t="ekr.20201227092411.462"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.463"><vh>get getMessage() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.464"><vh>get toDict() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.465"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.466"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.467"><vh>export var setLogRecordFactory</vh></v>
<v t="ekr.20201227092411.468"><vh>export var getLogRecordFactory</vh></v>
<v t="ekr.20201227092411.469"><vh>export var makeLogRecord</vh></v>
<v t="ekr.20201227092411.470"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.471"><vh>get usesTime() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.472"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.473"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.474"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.475"><vh>get usesTime() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.476"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.477"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.478"><vh>get formatTime() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.479"><vh>get formatException() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.480"><vh>get usesTime() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.481"><vh>get formatMessage() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.482"><vh>get formatStack() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.483"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.484"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.485"><vh>get formatHeader() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.486"><vh>get formatFooter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.487"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.488"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.489"><vh>get filter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.490"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.491"><vh>get addFilter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.492"><vh>get removeFilter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.493"><vh>get filter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.494"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.495"><vh>get write() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.496"><vh>export var _removeHandlerRef</vh></v>
<v t="ekr.20201227092411.497"><vh>export var _addHandlerRef</vh></v>
<v t="ekr.20201227092411.498"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.499"><vh>get get_name() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.500"><vh>get set_name() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.501"><vh>get createLock() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.502"><vh>get acquire() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.503"><vh>get release() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.504"><vh>get setLevel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.505"><vh>get format() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.506"><vh>get emit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.507"><vh>get handle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.508"><vh>get setFormatter() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.509"><vh>get flush() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.510"><vh>get close() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.511"><vh>get handleError() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.512"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.513"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.514"><vh>get flush() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.515"><vh>get emit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.516"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.517"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.518"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.519"><vh>get _getStream() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.520"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.521"><vh>get append() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.522"><vh>export var setLoggerClass</vh></v>
<v t="ekr.20201227092411.523"><vh>export var getLoggerClass</vh></v>
<v t="ekr.20201227092411.524"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.525"><vh>get getLogger() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.526"><vh>get setLoggerClass() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.527"><vh>get setLogRecordFactory() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.528"><vh>get _fixupParents() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.529"><vh>get _fixupChildren() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.530"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.531"><vh>get setLevel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.532"><vh>get debug() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.533"><vh>get info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.534"><vh>get warning() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.535"><vh>get warn() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.536"><vh>get error() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.537"><vh>get exception() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.538"><vh>get critical() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.539"><vh>get log() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.540"><vh>get findCaller() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.541"><vh>get makeRecord() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.542"><vh>get _log() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.543"><vh>get handle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.544"><vh>get addHandler() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.545"><vh>get removeHandler() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.546"><vh>get hasHandlers() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.547"><vh>get callHandlers() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.548"><vh>get getEffectiveLevel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.549"><vh>get isEnabledFor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.550"><vh>get getChild() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.551"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.552"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.553"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.554"><vh>get process() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.555"><vh>get debug() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.556"><vh>get info() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.557"><vh>get warning() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.558"><vh>get warn() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.559"><vh>get error() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.560"><vh>get exception() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.561"><vh>get critical() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.562"><vh>get log() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.563"><vh>get isEnabledFor() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.564"><vh>get setLevel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.565"><vh>get getEffectiveLevel() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.566"><vh>get hasHandlers() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.567"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.568"><vh>export var _resetLogging</vh></v>
<v t="ekr.20201227092411.569"><vh>export var basicConfig</vh></v>
<v t="ekr.20201227092411.570"><vh>export var getLogger</vh></v>
<v t="ekr.20201227092411.571"><vh>export var critical</vh></v>
<v t="ekr.20201227092411.572"><vh>export var error</vh></v>
<v t="ekr.20201227092411.573"><vh>export var exception</vh></v>
<v t="ekr.20201227092411.574"><vh>export var warning</vh></v>
<v t="ekr.20201227092411.575"><vh>export var warn</vh></v>
<v t="ekr.20201227092411.576"><vh>export var info</vh></v>
<v t="ekr.20201227092411.577"><vh>export var debug</vh></v>
<v t="ekr.20201227092411.578"><vh>export var log</vh></v>
<v t="ekr.20201227092411.579"><vh>export var disable</vh></v>
<v t="ekr.20201227092411.580"><vh>export var shutdown</vh></v>
<v t="ekr.20201227092411.581"><vh>get handle() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.582"><vh>get emit() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.583"><vh>get createLock() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.584"><vh>export var _showwarning</vh></v>
<v t="ekr.20201227092411.585"><vh>export var captureWarnings</vh></v>
</v>
<v t="ekr.20201227092411.586"><vh>@clean org.transcrypt.__runtime__.js</vh>
<v t="ekr.20201227092411.587"><vh>var cls</vh></v>
<v t="ekr.20201227092411.588"><vh>__PyIterator__.prototype.__next__</vh></v>
<v t="ekr.20201227092411.589"><vh>__JsIterator__.prototype.next</vh></v>
<v t="ekr.20201227092411.590"><vh>function</vh></v>
<v t="ekr.20201227092411.591"><vh>function</vh></v>
<v t="ekr.20201227092411.593"><vh>Array.prototype.__getslice__</vh></v>
<v t="ekr.20201227092411.594"><vh>Array.prototype.__setslice__</vh></v>
<v t="ekr.20201227092411.595"><vh>Array.prototype.__repr__</vh></v>
<v t="ekr.20201227092411.596"><vh>Array.prototype.append</vh></v>
<v t="ekr.20201227092411.597"><vh>Array.prototype.py_clear</vh></v>
<v t="ekr.20201227092411.598"><vh>Array.prototype.extend</vh></v>
<v t="ekr.20201227092411.599"><vh>Array.prototype.insert</vh></v>
<v t="ekr.20201227092411.600"><vh>Array.prototype.remove</vh></v>
<v t="ekr.20201227092411.601"><vh>Array.prototype.index</vh></v>
<v t="ekr.20201227092411.602"><vh>Array.prototype.py_pop</vh></v>
<v t="ekr.20201227092411.603"><vh>Array.prototype.py_sort</vh></v>
<v t="ekr.20201227092411.604"><vh>Array.prototype.__add__</vh></v>
<v t="ekr.20201227092411.605"><vh>Array.prototype.__mul__</vh></v>
<v t="ekr.20201227092411.606"><vh>Array.prototype.__bindexOf__</vh></v>
<v t="ekr.20201227092411.607"><vh>Array.prototype.add</vh></v>
<v t="ekr.20201227092411.608"><vh>Array.prototype.discard</vh></v>
<v t="ekr.20201227092411.609"><vh>Array.prototype.isdisjoint</vh></v>
<v t="ekr.20201227092411.610"><vh>Array.prototype.issuperset</vh></v>
<v t="ekr.20201227092411.611"><vh>Array.prototype.issubset</vh></v>
<v t="ekr.20201227092411.612"><vh>Array.prototype.union</vh></v>
<v t="ekr.20201227092411.613"><vh>Array.prototype.intersection</vh></v>
<v t="ekr.20201227092411.614"><vh>Array.prototype.difference</vh></v>
<v t="ekr.20201227092411.615"><vh>Array.prototype.symmetric_difference</vh></v>
<v t="ekr.20201227092411.616"><vh>Array.prototype.py_update</vh></v>
<v t="ekr.20201227092411.617"><vh>Array.prototype.__eq__</vh></v>
<v t="ekr.20201227092411.618"><vh>Array.prototype.__ne__</vh></v>
<v t="ekr.20201227092411.619"><vh>Array.prototype.__le__</vh></v>
<v t="ekr.20201227092411.620"><vh>Array.prototype.__ge__</vh></v>
<v t="ekr.20201227092411.621"><vh>Array.prototype.__lt__</vh></v>
<v t="ekr.20201227092411.622"><vh>Array.prototype.__gt__</vh></v>
<v t="ekr.20201227092411.623"><vh>Uint8Array.prototype.__add__</vh></v>
<v t="ekr.20201227092411.624"><vh>Uint8Array.prototype.__mul__</vh></v>
<v t="ekr.20201227092411.625"><vh>String.prototype.__repr__</vh></v>
<v t="ekr.20201227092411.626"><vh>String.prototype.__str__</vh></v>
<v t="ekr.20201227092411.627"><vh>String.prototype.capitalize</vh></v>
<v t="ekr.20201227092411.628"><vh>String.prototype.endswith</vh></v>
<v t="ekr.20201227092411.629"><vh>String.prototype.find</vh></v>
<v t="ekr.20201227092411.630"><vh>String.prototype.__getslice__</vh></v>
<v t="ekr.20201227092411.631"><vh>get: function</vh></v>
<v t="ekr.20201227092411.633"><vh>String.prototype.isalnum</vh></v>
<v t="ekr.20201227092411.634"><vh>String.prototype.isalpha</vh></v>
<v t="ekr.20201227092411.635"><vh>String.prototype.isdecimal</vh></v>
<v t="ekr.20201227092411.636"><vh>String.prototype.isdigit</vh></v>
<v t="ekr.20201227092411.637"><vh>String.prototype.islower</vh></v>
<v t="ekr.20201227092411.638"><vh>String.prototype.isupper</vh></v>
<v t="ekr.20201227092411.639"><vh>String.prototype.isspace</vh></v>
<v t="ekr.20201227092411.640"><vh>String.prototype.isnumeric</vh></v>
<v t="ekr.20201227092411.641"><vh>String.prototype.join</vh></v>
<v t="ekr.20201227092411.642"><vh>String.prototype.lower</vh></v>
<v t="ekr.20201227092411.643"><vh>String.prototype.py_replace</vh></v>
<v t="ekr.20201227092411.644"><vh>String.prototype.lstrip</vh></v>
<v t="ekr.20201227092411.645"><vh>String.prototype.rfind</vh></v>
<v t="ekr.20201227092411.646"><vh>String.prototype.rsplit</vh></v>
<v t="ekr.20201227092411.647"><vh>String.prototype.rstrip</vh></v>
<v t="ekr.20201227092411.648"><vh>String.prototype.py_split</vh></v>
<v t="ekr.20201227092411.649"><vh>String.prototype.startswith</vh></v>
<v t="ekr.20201227092411.650"><vh>String.prototype.strip</vh></v>
<v t="ekr.20201227092411.651"><vh>String.prototype.upper</vh></v>
<v t="ekr.20201227092411.652"><vh>String.prototype.__mul__</vh></v>
<v t="ekr.20201227092411.653"><vh>function __contains__</vh></v>
<v t="ekr.20201227092411.654"><vh>function __keys__</vh></v>
<v t="ekr.20201227092411.655"><vh>function __items__</vh></v>
<v t="ekr.20201227092411.656"><vh>function __del__</vh></v>
<v t="ekr.20201227092411.657"><vh>function __clear__</vh></v>
<v t="ekr.20201227092411.658"><vh>function __getdefault__</vh></v>
<v t="ekr.20201227092411.659"><vh>function __setdefault__</vh></v>
<v t="ekr.20201227092411.660"><vh>function __pop__</vh></v>
<v t="ekr.20201227092411.661"><vh>function __popitem__</vh></v>
<v t="ekr.20201227092411.662"><vh>function __update__</vh></v>
<v t="ekr.20201227092411.663"><vh>function __values__</vh></v>
<v t="ekr.20201227092411.664"><vh>function __dgetitem__</vh></v>
<v t="ekr.20201227092411.665"><vh>function __dsetitem__</vh></v>
<v t="ekr.20201227092411.666"><vh>function __setdoc__</vh></v>
<v t="ekr.20201227092411.667"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.668"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.669"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.670"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.671"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.672"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.673"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.674"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.675"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.676"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.677"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.678"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092411.679"><vh>export var __sort__</vh></v>
<v t="ekr.20201227092412.2"><vh>export var sorted</vh></v>
<v t="ekr.20201227092412.3"><vh>export var map</vh></v>
<v t="ekr.20201227092412.5"><vh>export var filter</vh></v>
<v t="ekr.20201227092412.7"><vh>export var divmod</vh></v>
<v t="ekr.20201227092412.8"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.9"><vh>get print() {return __get__(this, function</vh>
<v t="ekr.20201227092412.10"><vh>self.buffer = '{}{}{}'.format(self.buffer, sep.join function</vh></v>
<v t="ekr.20201227092412.11"><vh>console.log(sep.join function</vh></v>
</v>
<v t="ekr.20201227092412.12"><vh>get input() {return __get__(this, function</vh></v>
</v>
<v t="ekr.20201227092412.13"><vh>@clean re.js</vh>
<v t="ekr.20201227092412.14"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.15"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.16"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.17"><vh>get _getPos() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.18"><vh>get _setPos() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.19"><vh>get _getEndPos() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.20"><vh>get _setEndPos() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.21"><vh>get _getRe() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.22"><vh>get _setRe() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.23"><vh>get _getString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.24"><vh>get _setString() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.25"><vh>get _getLastGroup() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.26"><vh>get _setLastGroup() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.27"><vh>get _getLastIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.28"><vh>get _setLastIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.29"><vh>get _lastMatchGroup() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.30"><vh>get expand() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.31"><vh>get group() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.32"><vh>get groups() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.34"><vh>get groupdict() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.35"><vh>get start() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.36"><vh>get end() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.37"><vh>get span() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.38"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.39"><vh>get _getPattern() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.40"><vh>get _setPattern() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.41"><vh>get _getFlags() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.42"><vh>get _setFlags() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.43"><vh>get _getGroups() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.44"><vh>get _setGroups() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.45"><vh>get _getGroupIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.46"><vh>get _setGroupIndex() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.47"><vh>get _compileWrapper() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.48"><vh>get _convertFlags() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.50"><vh>get _getTargetStr() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.51"><vh>get _patternHasCaptures() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.52"><vh>get search() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.53"><vh>get match() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.54"><vh>get fullmatch() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.55"><vh>get py_split() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.56"><vh>get _findAllMatches() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.57"><vh>get findall() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.59"><vh>get finditer() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.61"><vh>get sub() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.62"><vh>get subn() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.63"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.64"><vh>export var compile</vh></v>
<v t="ekr.20201227092412.65"><vh>export var search</vh></v>
<v t="ekr.20201227092412.66"><vh>export var match</vh></v>
<v t="ekr.20201227092412.67"><vh>export var fullmatch</vh></v>
<v t="ekr.20201227092412.68"><vh>export var py_split</vh></v>
<v t="ekr.20201227092412.69"><vh>export var findall</vh></v>
<v t="ekr.20201227092412.70"><vh>export var finditer</vh></v>
<v t="ekr.20201227092412.71"><vh>export var sub</vh></v>
<v t="ekr.20201227092412.72"><vh>export var subn</vh></v>
<v t="ekr.20201227092412.73"><vh>export var escape</vh></v>
<v t="ekr.20201227092412.75"><vh>export var purge</vh></v>
</v>
<v t="ekr.20201227092412.76"><vh>@clean re.translate.js</vh>
<v t="ekr.20201227092412.77"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.78"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.79"><vh>export var generateGroupSpans</vh></v>
<v t="ekr.20201227092412.80"><vh>export var countCaptureGroups</vh></v>
<v t="ekr.20201227092412.81"><vh>export var getCaptureGroup</vh></v>
<v t="ekr.20201227092412.82"><vh>export var splitIfElse</vh></v>
<v t="ekr.20201227092412.83"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.84"><vh>get __repr__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.85"><vh>get resolve() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.86"><vh>export var shift</vh></v>
<v t="ekr.20201227092412.87"><vh>export var shiftReduce</vh></v>
<v t="ekr.20201227092412.88"><vh>export var translate</vh></v>
</v>
<v t="ekr.20201227092412.89"><vh>@clean sys.js</vh></v>
<v t="ekr.20201227092412.90"><vh>@clean time.js</vh>
<v t="ekr.20201227092412.91"><vh>export var __debugGetLanguage</vh></v>
<v t="ekr.20201227092412.92"><vh>export var __adapt__</vh></v>
<v t="ekr.20201227092412.93"><vh>export var _lsplit</vh></v>
<v t="ekr.20201227092412.94"><vh>export var _local_time_tuple</vh></v>
<v t="ekr.20201227092412.95"><vh>export var _utc_time_tuple</vh></v>
<v t="ekr.20201227092412.96"><vh>export var _day_of_year</vh></v>
<v t="ekr.20201227092412.97"><vh>export var _is_leap</vh></v>
<v t="ekr.20201227092412.98"><vh>export var __jan_jun_tz</vh></v>
<v t="ekr.20201227092412.99"><vh>export var _daylight</vh></v>
<v t="ekr.20201227092412.100"><vh>export var _daylight_in_effect</vh></v>
<v t="ekr.20201227092412.101"><vh>export var _timezone</vh></v>
<v t="ekr.20201227092412.102"><vh>export var __tzn</vh></v>
<v t="ekr.20201227092412.103"><vh>export var _tzname</vh></v>
<v t="ekr.20201227092412.104"><vh>export var time</vh></v>
<v t="ekr.20201227092412.105"><vh>export var asctime</vh></v>
<v t="ekr.20201227092412.106"><vh>export var mktime</vh></v>
<v t="ekr.20201227092412.107"><vh>export var ctime</vh></v>
<v t="ekr.20201227092412.108"><vh>export var localtime</vh></v>
<v t="ekr.20201227092412.109"><vh>export var gmtime</vh></v>
<v t="ekr.20201227092412.110"><vh>export var strptime</vh>
<v t="ekr.20201227092412.111"><vh>var get_next</vh>
<v t="ekr.20201227092412.112"><vh>var get_sep</vh></v>
</v>
</v>
<v t="ekr.20201227092412.113"><vh>export var strftime</vh></v>
</v>
<v t="ekr.20201227092412.115"><vh>@clean warnings.js</vh>
<v t="ekr.20201227092412.116"><vh>export var ActionSet = set function</vh></v>
<v t="ekr.20201227092412.117"><vh>export var _filters_mutated</vh></v>
<v t="ekr.20201227092412.118"><vh>export var showwarning</vh></v>
<v t="ekr.20201227092412.119"><vh>export var formatwarning</vh></v>
<v t="ekr.20201227092412.120"><vh>export var _showwarnmsg_impl</vh></v>
<v t="ekr.20201227092412.121"><vh>export var _formatwarnmsg_impl</vh></v>
<v t="ekr.20201227092412.122"><vh>export var setShowWarning</vh></v>
<v t="ekr.20201227092412.123"><vh>export var _showwarnmsg</vh></v>
<v t="ekr.20201227092412.124"><vh>export var _formatwarnmsg</vh></v>
<v t="ekr.20201227092412.125"><vh>export var addWarningCategory</vh></v>
<v t="ekr.20201227092412.126"><vh>export var filterwarnings</vh></v>
<v t="ekr.20201227092412.127"><vh>export var simplefilter</vh></v>
<v t="ekr.20201227092412.128"><vh>export var _add_filter</vh></v>
<v t="ekr.20201227092412.129"><vh>export var resetwarnings</vh></v>
<v t="ekr.20201227092412.130"><vh>export var _checkCatMatch</vh></v>
<v t="ekr.20201227092412.131"><vh>export var warn_explicit</vh></v>
<v t="ekr.20201227092412.132"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.133"><vh>get __str__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.134"><vh>get __init__() {return __get__(this, function</vh></v>
<v t="ekr.20201227092412.135"><vh>export var setWarningOptions</vh></v>
<v t="ekr.20201227092412.136"><vh>export var _processoptions</vh></v>
<v t="ekr.20201227092412.137"><vh>export var _setoption</vh></v>
<v t="ekr.20201227092412.139"><vh>export var _getaction</vh></v>
<v t="ekr.20201227092412.140"><vh>export var _getcategory</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20201227091441.1"></t>
<t tx="ekr.20201227091504.1">'''Recursively import all python files in a directory and clean the result.'''
@tabwidth -4 # For a better match.

dir_ = r'c:\vs-code-devel\leojs4'
g.cls()
c.recursiveImport(
    add_context=False,  # Override setting only if True/False
    add_file_context=False,  # Override setting only if True/False
    dir_=dir_,
    kind = '@clean', # '@auto', '@clean', '@nosent','@file',
    add_path = True,
    recursive = True,
    safe_at_file = False,
    theTypes = ['.js']
)
# c.expandAllSubheads()
# c.redraw()

</t>
<t tx="ekr.20201227091533.1" __bookmarks="7d7100580700000069735f6475706571014930300a732e">@language rest
@wrap

The @settings tree contains all active settings. 

Settings outside this tree have no effect.</t>
<t tx="ekr.20201227091533.138">Added on-popover to import-html-tags (for leovue)</t>
<t tx="ekr.20201227091533.139"># lowercase html tags, one per line.
# *** Add ons-popover tag for LeoVue.

a
abbr
acronym
address
applet
area
b
base
basefont
bdo
big
blockquote
body
br
button
caption
center
cite
code
col
colgroup
dd
del
dfn
dir
div
dl
dt
em
fieldset
font
form
frame
frameset
head
h1
h2
h3
h4
h5
h6
hr
html
i
iframe
img
input
ins
kbd
label
legend
li
link
map
menu
meta
noframes
noscript
object
ol
ons-popover
optgroup
option
p
param
pre
q
s
samp
script
select
small
span
strike
strong
style
sub
sup
table
tbody
td
textarea
tfoot
th
thead
title
tr
tt
u
ul
var</t>
<t tx="ekr.20201227091533.140"># lowercase xml tags, one per line.

html
body
head
div
table
</t>
<t tx="ekr.20201227091533.153"># Essential...
contextmenu.py
plugins_menu.py
mod_scripting.py

# Testing..

# My favorites...
line_numbering.py
nav_qt.py           # Forward and back buttons.
nodetags.py
quicksearch.py      # Nav pane. Binds Ctrl-Shift-F.
todo.py
viewrendered.py     # For jinja rendering.</t>
<t tx="ekr.20201227091533.154">backlink.py
bigdash.py
attrib_edit.py</t>
<t tx="ekr.20201227091533.155">free_layout.py      # Now loaded automatically. Disabled for testing bug 882824.

bookmarks.py
demo.py             # Essential to define key bindings.
livecode.py         # #1622.
mod_http.py
python_terminal.py
screen_capture.py
settings_finder.py  # #1669
valuespace.py
viewrendered2.py
viewrendered3.py
vim.py
xemacs.py
wikiview.py
</t>
<t tx="ekr.20201227091533.156"># Recommended plugins...

# backlink.py # Required by graphcanvas.
# bigdash.py
# bzr_qcommands.py
# graphcanvas.py # Requires backlink.py
# jinjarender.py
# leo_to_html.py
# projectwizard.py
# stickynotes.py

# Optional...

# leoremote.py
# mod_http.py
# quickMove.py # Creates warnings about inverses.
# systray.py
# valuespace.py

# Others...

# codewisecompleter.py
# ctagscompleter.py
# mod_autosave.py
# nodeActions.py
# spydershell.py
# vim.py
# xemacs.py
# xml_edit.py
</t>
<t tx="ekr.20201227091533.91"></t>
<t tx="ekr.20201227092108.1">@language json
{
    "type": "module",
    "name": "leojs",
    "description": "leojs, based on minimal hello world example",
    "version": "0.0.1",
    "publisher": "edreamleo",
    "repository": "",
    "engines": {
        "vscode": "^1.32.0"
    },
    "activationEvents": [
        "onCommand:extension.leojs"
    ],
    "main": "./extension.js",
    "contributes": {
        "commands": [
            {
                "command": "extension.leojs",
                "title": "leojs"
            }
        ]
    },
    "scripts": {},
    "devDependencies": {
        "@types/vscode": "^1.32.0"
    }
}
</t>
<t tx="ekr.20201227092409.100">get add () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    // pass;
});},
</t>
<t tx="ekr.20201227092409.101">get addRow () {return __get__ (this, function (self, height) {
    if (typeof height == 'undefined' || (height != null &amp;&amp; height.hasOwnProperty ("__kwargtrans__"))) {;
        var height = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.102">get addRowIfNeeded () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.103">get addWidget () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.104">get py_clear () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.105">get createChaptersIcon () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.106">get deleteButton () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.107">get getNewFrame () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.108">    get setCommandForButton () {return __get__ (this, function (self, button, command, command_p, controller, gnx, script) {
        // pass;
    });}
});
export var LeoBody =  __class__ ('LeoBody', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.109">get __init__ () {return __get__ (this, function (self, frame, parentFrame) {
    var c = frame.c;
    frame.body = self;
    self.c = c;
    self.editorWrappers = dict ({});
    self.frame = frame;
    self.parentFrame = parentFrame;
    self.totalNumberOfEditors = 0;
    self.widget = null;
    self.wrapper = null;
    self.numberOfEditors = 1;
    self.pb = null;
    self.colorizer = null;
    self.use_chapters = false;
});},
</t>
<t tx="ekr.20201227092409.110">get cmd () {return __get__ (this, function (py_name) {
    return g.new_cmd_decorator (py_name, ['c', 'frame', 'body']);
});},
</t>
<t tx="ekr.20201227092409.111">get forceFullRecolor () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.112">get getColorizer () {return __get__ (this, function (self) {
    return self.colorizer;
});},
</t>
<t tx="ekr.20201227092409.113">get updateSyntaxColorer () {return __get__ (this, function (self, p) {
    return self.colorizer.updateSyntaxColorer (p.copy ());
});},
</t>
<t tx="ekr.20201227092409.114">get recolor () {return __get__ (this, function (self, p) {
    if (__in__ ('incremental', kwargs)) {
        print ('c.recolor: incremental keyword is deprecated', g.callers (1));
    }
    self.c.recolor ();
});},
recolor_now: recolor,
</t>
<t tx="ekr.20201227092409.115">get oops () {return __get__ (this, function (self) {
    g.trace ('(LeoBody) %s should be overridden in a subclass', g.callers ());
});},
</t>
<t tx="ekr.20201227092409.116">get createEditorFrame () {return __get__ (this, function (self, w) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.117">get createTextWidget () {return __get__ (this, function (self, parentFrame, p, py_name) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.118">get packEditorLabelWidget () {return __get__ (this, function (self, w) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.119">get onFocusOut () {return __get__ (this, function (self, obj) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.12"></t>
<t tx="ekr.20201227092409.120">get addEditor () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    var __left0__ = tuple ([self.c, self.c.p]);
    var c = __left0__ [0];
    var p = __left0__ [1];
    self.totalNumberOfEditors++;
    self.numberOfEditors++;
    if (self.numberOfEditors == 2) {
        var d = self.editorWrappers;
        var py_keys = list (d.py_keys ());
        if (len (py_keys) == 1) {
            var w_old = d.py_get (py_keys [0]);
            self.updateInjectedIvars (w_old, p);
            self.selectLabel (w_old);
        }
        else {
            g.trace ('can not happen: unexpected editorWrappers', d);
        }
    }
    var py_name = '{}'.format (self.totalNumberOfEditors);
    var pane = self.pb.add (py_name);
    var panes = self.pb.panes ();
    var minSize = float (1.0 / float (len (panes)));
    var f = self.createEditorFrame (pane);
    var wrapper = self.createTextWidget (f, __kwargtrans__ ({py_name: py_name, p: p}));
    wrapper.delete (0, 'end');
    wrapper.insert ('end', p.b);
    wrapper.see (0);
    c.k.completeAllBindingsForWidget (wrapper);
    self.recolorWidget (p, wrapper);
    self.editorWrappers [py_name] = wrapper;
    for (var pane of panes) {
        self.pb.configurepane (pane, __kwargtrans__ ({size: minSize}));
    }
    self.pb.updatelayout ();
    c.frame.body.wrapper = wrapper;
    self.updateInjectedIvars (wrapper, p);
    self.selectLabel (wrapper);
    self.selectEditor (wrapper);
    self.updateEditors ();
    c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.121">get assignPositionToEditor () {return __get__ (this, function (self, p) {
    var c = self.c;
    var w = c.frame.body.widget;
    self.updateInjectedIvars (w, p);
    self.selectLabel (w);
});},
</t>
<t tx="ekr.20201227092409.122">get cycleEditorFocus () {return __get__ (this, cmd ('editor-cycle-focus') (cmd ('cycle-editor-focus') (function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    var c = self.c;
    var d = self.editorWrappers;
    var w = c.frame.body.wrapper;
    var py_values = list (d.py_values ());
    if (len (py_values) &gt; 1) {
        var i = py_values.index (w) + 1;
        if (i == len (py_values)) {
            var i = 0;
        }
        var w2 = py_values [i];
        self.selectEditor (w2);
        c.frame.body.wrapper = w2;
    }
})));},
</t>
<t tx="ekr.20201227092409.123">get deleteEditor () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    var c = self.c;
    var w = c.frame.body.wapper;
    var d = self.editorWrappers;
    if (len (list (d.py_keys ())) == 1) {
        return ;
    }
    var py_name = w.leo_name;
    delete d [py_name];
    self.pb.delete (py_name);
    var panes = self.pb.panes ();
    var minSize = float (1.0 / float (len (panes)));
    for (var pane of panes) {
        self.pb.configurepane (pane, __kwargtrans__ ({size: minSize}));
    }
    var w = list (d.py_values ()) [0];
    self.numberOfEditors--;
    self.selectEditor (w);
});},
</t>
<t tx="ekr.20201227092409.124">get findEditorForChapter () {return __get__ (this, function (self, chapter, p) {
    var c = self.c;
    var d = self.editorWrappers;
    var py_values = list (d.py_values ());
    if (p) {
        for (var w of py_values) {
            if (hasattr (w, 'leo_chapter') &amp;&amp; w.leo_chapter == chapter &amp;&amp; hasattr (w, 'leo_p') &amp;&amp; w.leo_p &amp;&amp; w.leo_p == p) {
                return w;
            }
        }
    }
    for (var w of py_values) {
        if (hasattr (w, 'leo_chapter') &amp;&amp; w.leo_chapter == chapter) {
            return w;
        }
    }
    return c.frame.body.wrapper;
});},
</t>
<t tx="ekr.20201227092409.125">get unselectLabel () {return __get__ (this, function (self, w) {
    self.createChapterIvar (w);
    self.packEditorLabelWidget (w);
    var s = self.computeLabel (w);
    if (hasattr (w, 'leo_label') &amp;&amp; w.leo_label) {
        w.leo_label.configure (__kwargtrans__ ({text: s, bg: 'LightSteelBlue1'}));
    }
});},
</t>
<t tx="ekr.20201227092409.126">get selectLabel () {return __get__ (this, function (self, w) {
    if (self.numberOfEditors &gt; 1) {
        self.createChapterIvar (w);
        self.packEditorLabelWidget (w);
        var s = self.computeLabel (w);
        if (hasattr (w, 'leo_label') &amp;&amp; w.leo_label) {
            w.leo_label.configure (__kwargtrans__ ({text: s, bg: 'white'}));
        }
    }
    else if (hasattr (w, 'leo_label') &amp;&amp; w.leo_label) {
        w.leo_label.pack_forget ();
        w.leo_label = null;
    }
});},
selectEditorLockout: false,
</t>
<t tx="ekr.20201227092409.127">get selectEditor () {return __get__ (this, function (self, w) {
    var c = self.c;
    if (self.selectEditorLockout) {
        return null;
    }
    if (w &amp;&amp; w == self.c.frame.body.widget) {
        if (w.leo_p &amp;&amp; w.leo_p != c.p) {
            c.selectPosition (w.leo_p);
            c.bodyWantsFocus ();
        }
        return null;
    }
    try {
        var val = null;
        self.selectEditorLockout = true;
        var val = self.selectEditorHelper (w);
    }
    finally {
        self.selectEditorLockout = false;
    }
    return val;
});},
</t>
<t tx="ekr.20201227092409.128">get selectEditorHelper () {return __get__ (this, function (self, wrapper) {
    var c = self.c;
    if (!(hasattr (wrapper, 'leo_p') &amp;&amp; wrapper.leo_p)) {
        g.trace ('no wrapper.leo_p');
        return ;
    }
    self.deactivateActiveEditor (wrapper);
    c.frame.body.wrapper = wrapper;
    wrapper.leo_active = true;
    self.switchToChapter (wrapper);
    self.selectLabel (wrapper);
    if (!(self.ensurePositionExists (wrapper))) {
        g.trace ('***** no position editor!');
        return ;
    }
    var p = wrapper.leo_p;
    c.redraw (p);
    c.recolor ();
    c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.129">get updateEditors () {return __get__ (this, function (self) {
    var c = self.c;
    var p = c.p;
    var d = self.editorWrappers;
    if (len (list (d.py_keys ())) &lt; 2) {
        return ;
    }
    for (var key of d) {
        var wrapper = d.py_get (key);
        var v = wrapper.leo_v;
        if (v &amp;&amp; v == p.v &amp;&amp; wrapper != c.frame.body.wrapper) {
            wrapper.delete (0, 'end');
            wrapper.insert ('end', p.b);
            self.recolorWidget (p, wrapper);
        }
    }
    c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.13">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:11
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'inspect';
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.130">get computeLabel () {return __get__ (this, function (self, w) {
    var s = w.leo_label_s;
    if (hasattr (w, 'leo_chapter') &amp;&amp; w.leo_chapter) {
        var s = '{}: {}'.format (w.leo_chapter.py_name, s);
    }
    return s;
});},
</t>
<t tx="ekr.20201227092409.131">get createChapterIvar () {return __get__ (this, function (self, w) {
    var c = self.c;
    var cc = c.chapterController;
    if (!(hasattr (w, 'leo_chapter')) || !(w.leo_chapter)) {
        if (cc &amp;&amp; self.use_chapters) {
            w.leo_chapter = cc.getSelectedChapter ();
        }
        else {
            w.leo_chapter = null;
        }
    }
});},
</t>
<t tx="ekr.20201227092409.132">get ensurePositionExists () {return __get__ (this, function (self, w) {
    var c = self.c;
    if (c.positionExists (w.leo_p)) {
        return true;
    }
    g.trace ('***** does not exist', w.leo_name);
    for (var p2 of c.all_unique_positions ()) {
        if (p2.v &amp;&amp; p2.v == w.leo_v) {
            w.leo_p = p2.copy ();
            return true;
        }
    }
    w.leo_p = c.p;
    return false;
});},
</t>
<t tx="ekr.20201227092409.133">get deactivateActiveEditor () {return __get__ (this, function (self, w) {
    var d = self.editorWrappers;
    for (var key of d) {
        var w2 = d.py_get (key);
        if (w2 != w &amp;&amp; w2.leo_active) {
            w2.leo_active = false;
            self.unselectLabel (w2);
            return ;
        }
    }
});},
</t>
<t tx="ekr.20201227092409.134">get recolorWidget () {return __get__ (this, function (self, p, w) {
    var c = self.c;
    var colorizer = c.frame.body.colorizer;
    if (p &amp;&amp; colorizer &amp;&amp; hasattr (colorizer, 'colorize')) {
        var old_wrapper = c.frame.body.wrapper;
        c.frame.body.wrapper = w;
        try {
            c.frame.body.colorizer.colorize (p);
        }
        finally {
            c.frame.body.wrapper = old_wrapper;
        }
    }
});},
</t>
<t tx="ekr.20201227092409.135">get switchToChapter () {return __get__ (this, function (self, w) {
    var c = self.c;
    var cc = c.chapterController;
    if (hasattr (w, 'leo_chapter') &amp;&amp; w.leo_chapter) {
        var chapter = w.leo_chapter;
        var py_name = chapter &amp;&amp; chapter.py_name;
        var oldChapter = cc.getSelectedChapter ();
        if (chapter != oldChapter) {
            cc.selectChapterByName (py_name);
            c.bodyWantsFocus ();
        }
    }
});},
</t>
<t tx="ekr.20201227092409.136">get updateInjectedIvars () {return __get__ (this, function (self, w, p) {
    if (!(w)) {
        return ;
    }
    var c = self.c;
    var cc = c.chapterController;
    var use_chapters = c.config.getBool ('use-chapters');
    if (cc &amp;&amp; use_chapters) {
        w.leo_chapter = cc.getSelectedChapter ();
    }
    else {
        w.leo_chapter = null;
    }
    w.leo_p = p.copy ();
    w.leo_v = w.leo_p.v;
    w.leo_label_s = p.h;
});},
</t>
<t tx="ekr.20201227092409.137">get getInsertLines () {return __get__ (this, function (self) {
    var body = self;
    var w = body.wrapper;
    var s = w.getAllText ();
    var insert = w.getInsertPoint ();
    var __left0__ = g.getLine (s, insert);
    var i = __left0__ [0];
    var j = __left0__ [1];
    var before = s.__getslice__ (0, i, 1);
    var ins = s.__getslice__ (i, j, 1);
    var after = s.__getslice__ (j, null, 1);
    var before = g.checkUnicode (before);
    var ins = g.checkUnicode (ins);
    var after = g.checkUnicode (after);
    return tuple ([before, ins, after]);
});},
</t>
<t tx="ekr.20201227092409.138">get getSelectionAreas () {return __get__ (this, function (self) {
    var body = self;
    var w = body.wrapper;
    var s = w.getAllText ();
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    if (i == j) {
        var j = i + 1;
    }
    var before = s.__getslice__ (0, i, 1);
    var sel = s.__getslice__ (i, j, 1);
    var after = s.__getslice__ (j, null, 1);
    var before = g.checkUnicode (before);
    var sel = g.checkUnicode (sel);
    var after = g.checkUnicode (after);
    return tuple ([before, sel, after]);
});},
</t>
<t tx="ekr.20201227092409.139">get getSelectionLines () {return __get__ (this, function (self) {
    if (g.app.batchMode) {
        return tuple (['', '', '']);
    }
    var body = self;
    var w = body.wrapper;
    var s = w.getAllText ();
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    if (i == j) {
        var __left0__ = g.getLine (s, i);
        var i = __left0__ [0];
        var j = __left0__ [1];
    }
    else {
        if (j &gt; i &amp;&amp; j &gt; 0 &amp;&amp; s [j - 1] == '\n') {
            j--;
        }
        var __left0__ = g.getLine (s, i);
        var i = __left0__ [0];
        var junk = __left0__ [1];
        var __left0__ = g.getLine (s, j);
        var junk = __left0__ [0];
        var j = __left0__ [1];
    }
    var before = g.checkUnicode (s.__getslice__ (0, i, 1));
    var sel = g.checkUnicode (s.__getslice__ (i, j, 1));
    var after = g.checkUnicode (s.__getslice__ (j, len (s), 1));
    return tuple ([before, sel, after]);
});},
</t>
<t tx="ekr.20201227092409.14">export var isclass = function (object) {
    return hasattr (object, '__metaclass__') &amp;&amp; !(hasattr (object, '__class__'));
};

//# sourceMappingURL=inspect.map
</t>
<t tx="ekr.20201227092409.140">    get onBodyChanged () {return __get__ (this, function (self, undoType, oldSel) {
        if (typeof oldSel == 'undefined' || (oldSel != null &amp;&amp; oldSel.hasOwnProperty ("__kwargtrans__"))) {;
            var oldSel = null;
        };
        var __left0__ = tuple ([self.c.p, self.c.undoer, self.wrapper]);
        var p = __left0__ [0];
        var u = __left0__ [1];
        var w = __left0__ [2];
        var newText = w.getAllText ();
        if (p.b == newText) {
            return ;
        }
        var newSel = w.getSelectionRange ();
        var newInsert = w.getInsertPoint ();
        if (oldSel &amp;&amp; newSel &amp;&amp; oldSel != newSel) {
            var __left0__ = oldSel;
            var i = __left0__ [0];
            var j = __left0__ [1];
            w.setSelectionRange (i, j, __kwargtrans__ ({insert: j}));
        }
        var bunch = u.beforeChangeBody (p);
        if (oldSel &amp;&amp; newSel &amp;&amp; oldSel != newSel) {
            var __left0__ = newSel;
            var i = __left0__ [0];
            var j = __left0__ [1];
            w.setSelectionRange (i, j, __kwargtrans__ ({insert: newInsert}));
        }
        p.v.b = newText;
        u.afterChangeBody (p, undoType, bunch);
    });}
});
export var LeoFrame =  __class__ ('LeoFrame', [object], {
    __module__: __name__,
    instances: 0,
</t>
<t tx="ekr.20201227092409.141">get __init__ () {return __get__ (this, function (self, c, gui) {
    self.c = c;
    self.gui = gui;
    self.iconBarClass = NullIconBarClass;
    self.statusLineClass = NullStatusLineClass;
    self.title = null;
    self.body = null;
    self.colorPanel = null;
    self.comparePanel = null;
    self.findPanel = null;
    self.fontPanel = null;
    self.iconBar = null;
    self.isNullFrame = false;
    self.py_keys = null;
    self.log = null;
    self.menu = null;
    self.miniBufferWidget = null;
    self.outerFrame = null;
    self.prefsPanel = null;
    self.statusLine = g.NullObject ();
    self.tree = null;
    self.useMiniBufferWidget = false;
    self.cursorStay = true;
    self.componentsDict = dict ({});
    self.es_newlines = 0;
    self.openDirectory = '';
    self.saved = false;
    self.splitVerticalFlag = true;
    self.startupWindow = false;
    self.stylesheet = null;
    self.tab_width = 0;
});},
</t>
<t tx="ekr.20201227092409.142">get createFirstTreeNode () {return __get__ (this, function (self) {
    var c = self.c;
    var v = leoNodes.VNode (__kwargtrans__ ({context: c}));
    var p = leoNodes.Position (v);
    v.initHeadString ('NewHeadline');
    c.hiddenRootNode.children = [];
    p._linkAsRoot ();
});},
</t>
<t tx="ekr.20201227092409.143">get cmd () {return __get__ (this, function (py_name) {
    return g.new_cmd_decorator (py_name, ['c', 'frame']);
});},
</t>
<t tx="ekr.20201227092409.144">get OnBodyClick () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.145">get OnBodyRClick () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.146">get getTitle () {return __get__ (this, function (self) {
    return self.title;
});},
</t>
<t tx="ekr.20201227092409.147">get setTitle () {return __get__ (this, function (self, title) {
    self.title = title;
});},
</t>
<t tx="ekr.20201227092409.148">get initAfterLoad () {return __get__ (this, function (self) {
    var frame = self;
    frame.body.initAfterLoad ();
    frame.log.initAfterLoad ();
    frame.menu.initAfterLoad ();
    frame.tree.initAfterLoad ();
});},
</t>
<t tx="ekr.20201227092409.149">get initCompleteHint () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.15">@path c:/vs-code-devel/leojs4/src/
import {list, tuple, len, __kwargtrans__, set} from './org.transcrypt.__runtime__.js';

var __name__ = 'itertools';

@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.150">get setTabWidth () {return __get__ (this, function (self, w) {
    self.tab_width = w;
});},
</t>
<t tx="ekr.20201227092409.151">get initialRatios () {return __get__ (this, function (self) {
    var c = self.c;
    var s = c.config.py_get ('initial_split_orientation', 'string');
    var verticalFlag = s === null || s != 'h' &amp;&amp; s != 'horizontal';
    if (verticalFlag) {
        var r = c.config.getRatio ('initial-vertical-ratio');
        if (r === null || r &lt; 0.0 || r &gt; 1.0) {
            var r = 0.5;
        }
        var r2 = c.config.getRatio ('initial-vertical-secondary-ratio');
        if (r2 === null || r2 &lt; 0.0 || r2 &gt; 1.0) {
            var r2 = 0.8;
        }
    }
    else {
        var r = c.config.getRatio ('initial-horizontal-ratio');
        if (r === null || r &lt; 0.0 || r &gt; 1.0) {
            var r = 0.3;
        }
        var r2 = c.config.getRatio ('initial-horizontal-secondary-ratio');
        if (r2 === null || r2 &lt; 0.0 || r2 &gt; 1.0) {
            var r2 = 0.8;
        }
    }
    return tuple ([verticalFlag, r, r2]);
});},
</t>
<t tx="ekr.20201227092409.152">get longFileName () {return __get__ (this, function (self) {
    return self.c.mFileName;
});},
</t>
<t tx="ekr.20201227092409.153">get shortFileName () {return __get__ (this, function (self) {
    return g.shortFileName (self.c.mFileName);
});},
</t>
<t tx="ekr.20201227092409.154">get oops () {return __get__ (this, function (self) {
    g.pr ('LeoFrame oops:', g.callers (4), 'should be overridden in subclass');
});},
</t>
<t tx="ekr.20201227092409.155">get promptForSave () {return __get__ (this, function (self) {
    var c = self.c;
    var theType = (g.app.quitting ? 'quitting?' : 'closing?');
    var root = c.rootPosition ();
    var quick_save = !(c.mFileName) &amp;&amp; !(root.py_next ()) &amp;&amp; root.isAtEditNode ();
    if (quick_save) {
        var py_name = g.shortFileName (root.atEditNodeName ());
    }
    else {
        var py_name = (c.mFileName ? c.mFileName : self.title);
    }
    var answer = g.app.gui.runAskYesNoCancelDialog (c, __kwargtrans__ ({title: 'Confirm', message: 'Save changes to {} before {}'.format (g.splitLongFileName (py_name), theType)}));
    if (answer == 'cancel') {
        return true;
    }
    if (answer == 'no') {
        return false;
    }
    if (!(c.mFileName)) {
        var root = c.rootPosition ();
        if (!(root.py_next ()) &amp;&amp; root.isAtEditNode ()) {
            if (root.isDirty ()) {
                c.atFileCommands.writeOneAtEditNode (root);
            }
            return false;
        }
        c.mFileName = g.app.gui.runSaveFileDialog (c, __kwargtrans__ ({initialfile: '', title: 'Save', filetypes: [tuple (['Leo files', '*.leo'])], defaultextension: '.leo'}));
        c.bringToFront ();
    }
    if (c.mFileName) {
        if (g.app.gui.guiName () == 'curses') {
            g.pr ('Saving: {}'.format (c.mFileName));
        }
        var ok = c.fileCommands.save (c.mFileName);
        return !(ok);
    }
    return true;
});},
</t>
<t tx="ekr.20201227092409.156">get scanForTabWidth () {return __get__ (this, function (self, p) {
    var c = self.c;
    var tab_width = c.getTabWidth (p);
    c.frame.setTabWidth (tab_width);
});},
</t>
<t tx="ekr.20201227092409.157">get addIconButton () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    if (self.iconBar) {
        return self.iconBar.add (...args, __kwargtrans__ (py_keys));
    }
    return null;
});},
</t>
<t tx="ekr.20201227092409.158">get addIconRow () {return __get__ (this, function (self) {
    if (self.iconBar) {
        return self.iconBar.addRow ();
    }
    return null;
});},
</t>
<t tx="ekr.20201227092409.159">get addIconWidget () {return __get__ (this, function (self, w) {
    if (self.iconBar) {
        return self.iconBar.addWidget (w);
    }
    return null;
});},
</t>
<t tx="ekr.20201227092409.16">export var count = function* (start, step) {
    if (start == undefined) {
        start = 0;
    }
    if (step == undefined) {
        step = 1;
    }
    while (true) {
        yield start;
        start += step;
    }
}
</t>
<t tx="ekr.20201227092409.160">get clearIconBar () {return __get__ (this, function (self) {
    if (self.iconBar) {
        return self.iconBar.py_clear ();
    }
    return null;
});},
</t>
<t tx="ekr.20201227092409.161">get createIconBar () {return __get__ (this, function (self) {
    var c = self.c;
    if (!(self.iconBar)) {
        self.iconBar = self.iconBarClass (c, self.outerFrame);
    }
    return self.iconBar;
});},
</t>
<t tx="ekr.20201227092409.162">get getIconBar () {return __get__ (this, function (self) {
    if (!(self.iconBar)) {
        self.iconBar = self.iconBarClass (self.c, self.outerFrame);
    }
    return self.iconBar;
});},
getIconBarObject: getIconBar,
</t>
<t tx="ekr.20201227092409.163">get getNewIconFrame () {return __get__ (this, function (self) {
    if (!(self.iconBar)) {
        self.iconBar = self.iconBarClass (self.c, self.outerFrame);
    }
    return self.iconBar.getNewFrame ();
});},
</t>
<t tx="ekr.20201227092409.164">get hideIconBar () {return __get__ (this, function (self) {
    if (self.iconBar) {
        self.iconBar.hide ();
    }
});},
</t>
<t tx="ekr.20201227092409.165">get showIconBar () {return __get__ (this, function (self) {
    if (self.iconBar) {
        self.iconBar.show ();
    }
});},
</t>
<t tx="ekr.20201227092409.166">get createStatusLine () {return __get__ (this, function (self) {
    if (!(self.statusLine)) {
        self.statusLine = self.statusLineClass (self.c, self.outerFrame);
    }
    return self.statusLine;
});},
</t>
<t tx="ekr.20201227092409.167">get clearStatusLine () {return __get__ (this, function (self) {
    if (self.statusLine) {
        self.statusLine.py_clear ();
    }
});},
</t>
<t tx="ekr.20201227092409.168">get disableStatusLine () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = null;
    };
    if (self.statusLine) {
        self.statusLine.disable (background);
    }
});},
</t>
<t tx="ekr.20201227092409.169">get enableStatusLine () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = 'white';
    };
    if (self.statusLine) {
        self.statusLine.enable (background);
    }
});},
</t>
<t tx="ekr.20201227092409.17">export var cycle = function* (iterable) {                      
    let buffer = Array.from (iterable); // Can't reset, Chrome can't obtain iter from gener
    while (true) {
        for (let item of buffer) {
            yield item;
        }
    }
}
</t>
<t tx="ekr.20201227092409.170">get getStatusLine () {return __get__ (this, function (self) {
    return self.statusLine;
});},
getStatusObject: getStatusLine,
</t>
<t tx="ekr.20201227092409.171">get putStatusLine () {return __get__ (this, function (self, s, bg, fg) {
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = null;
    };
    if (typeof fg == 'undefined' || (fg != null &amp;&amp; fg.hasOwnProperty ("__kwargtrans__"))) {;
        var fg = null;
    };
    if (self.statusLine) {
        self.statusLine.put (s, bg, fg);
    }
});},
</t>
<t tx="ekr.20201227092409.172">get setFocusStatusLine () {return __get__ (this, function (self) {
    if (self.statusLine) {
        self.statusLine.setFocus ();
    }
});},
</t>
<t tx="ekr.20201227092409.173">get statusLineIsEnabled () {return __get__ (this, function (self) {
    if (self.statusLine) {
        return self.statusLine.isEnabled ();
    }
    return false;
});},
</t>
<t tx="ekr.20201227092409.174">get updateStatusLine () {return __get__ (this, function (self) {
    if (self.statusLine) {
        self.statusLine.py_update ();
    }
});},
</t>
<t tx="ekr.20201227092409.175">get copyText () {return __get__ (this, cmd ('copy-text') (function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    var w = event &amp;&amp; event.widget;
    if (!(w) || !(g.isTextWrapper (w))) {
        return ;
    }
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    if (i == j) {
        var ins = w.getInsertPoint ();
        var __left0__ = g.getLine (w.getAllText (), ins);
        var i = __left0__ [0];
        var j = __left0__ [1];
    }
    var s = w.py_get (i, j);
    if (s) {
        g.app.gui.replaceClipboardWith (s);
    }
}));},
OnCopyFromMenu: copyText,
</t>
<t tx="ekr.20201227092409.176">get cutText () {return __get__ (this, cmd ('cut-text') (function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    var f = self;
    var c = f.c;
    var w = event &amp;&amp; event.widget;
    if (!(w) || !(g.isTextWrapper (w))) {
        return ;
    }
    var py_name = c.widget_name (w);
    var oldSel = w.getSelectionRange ();
    var oldText = w.getAllText ();
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    var s = w.py_get (i, j);
    if (i != j) {
        w.delete (i, j);
        w.see (i);
        g.app.gui.replaceClipboardWith (s);
    }
    else {
        var ins = w.getInsertPoint ();
        var __left0__ = g.getLine (oldText, ins);
        var i = __left0__ [0];
        var j = __left0__ [1];
        var s = w.py_get (i, j);
        w.delete (i, j);
        w.see (i);
        g.app.gui.replaceClipboardWith (s);
    }
    if (py_name.startswith ('body')) {
        c.frame.body.onBodyChanged ('Cut', __kwargtrans__ ({oldSel: oldSel}));
    }
    else if (py_name.startswith ('head')) {
        var s = w.getAllText ();
    }
    else {
        // pass;
    }
}));},
OnCutFromMenu: cutText,
</t>
<t tx="ekr.20201227092409.177">get pasteText () {return __get__ (this, cmd ('paste-text') (function (self, event, middleButton) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (typeof middleButton == 'undefined' || (middleButton != null &amp;&amp; middleButton.hasOwnProperty ("__kwargtrans__"))) {;
        var middleButton = false;
    };
    var c = self.c;
    var w = event &amp;&amp; event.widget;
    var wname = c.widget_name (w);
    if (!(w) || !(g.isTextWrapper (w))) {
        return ;
    }
    if (self.cursorStay &amp;&amp; wname.startswith ('body')) {
        var tCurPosition = w.getInsertPoint ();
    }
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    var oldSel = __left0__;
    if (middleButton &amp;&amp; c.k.previousSelection !== null) {
        var __left0__ = c.k.previousSelection;
        var start = __left0__ [0];
        var end = __left0__ [1];
        var s = w.getAllText ();
        var s = s.__getslice__ (start, end, 1);
        c.k.previousSelection = null;
    }
    else {
        var s = g.app.gui.getTextFromClipboard ();
    }
    var s = g.checkUnicode (s);
    var singleLine = wname.startswith ('head') || wname.startswith ('minibuffer');
    if (singleLine) {
        while (s &amp;&amp; __in__ (s [-(1)], tuple (['\n', '\r']))) {
            var s = s.__getslice__ (0, -(1), 1);
        }
    }
    if (hasattr (w, 'getXScrollPosition')) {
        var x_pos = w.getXScrollPosition ();
    }
    if (i != j) {
        w.delete (i, j);
    }
    w.insert (i, s);
    w.see ((i + len (s)) + 2);
    if (wname.startswith ('body')) {
        if (self.cursorStay) {
            if (tCurPosition == j) {
                var offset = len (s) - (j - i);
            }
            else {
                var offset = 0;
            }
            var newCurPosition = tCurPosition + offset;
            w.setSelectionRange (__kwargtrans__ ({i: newCurPosition, j: newCurPosition}));
        }
        c.frame.body.onBodyChanged ('Paste', __kwargtrans__ ({oldSel: oldSel}));
    }
    else if (singleLine) {
        var s = w.getAllText ();
        while (s &amp;&amp; __in__ (s [-(1)], tuple (['\n', '\r']))) {
            var s = s.__getslice__ (0, -(1), 1);
        }
    }
    else {
        // pass;
    }
    if (hasattr (w, 'getXScrollPosition')) {
        w.setXScrollPosition (x_pos);
    }
}));},
OnPasteFromMenu: pasteText,
</t>
<t tx="ekr.20201227092409.178">get OnPaste () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    return self.pasteText (__kwargtrans__ ({event: event, middleButton: true}));
});},
</t>
<t tx="ekr.20201227092409.179">get endEditLabelCommand () {return __get__ (this, cmd ('end-edit-headline') (function (self, event, p) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    var frame = self;
    var c = frame.c;
    var k = c.k;
    if (g.app.batchMode) {
        c.notValidInBatchMode ('End Edit Headline');
        return ;
    }
    var w = event &amp;&amp; event.w || c.get_focus ();
    var w_name = g.app.gui.widget_name (w);
    if (w_name.startswith ('head')) {
        c.endEditing ();
        c.treeWantsFocus ();
    }
    else {
        c.bodyWantsFocus ();
        k.setDefaultInputState ();
        k.showStateAndMode (__kwargtrans__ ({w: c.frame.body.wrapper}));
    }
}));},
</t>
<t tx="ekr.20201227092409.18">export var repeat = function* (item, n) {
    if (typeof n == 'undefined') {
        while (true) {
            yield item;
        }
    }
    else {
        for (let index = 0; index &lt; n; index++) {
            yield item;
        }
    }
}
</t>
<t tx="ekr.20201227092409.180">get bringToFront () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.181">get cascade () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.182">get contractBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.183">get contractLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.184">get contractOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.185">get contractPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.186">get deiconify () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.187">get equalSizedPanes () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.188">get expandBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.189">get expandLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.19">export var accumulate = function* (iterable, func) {
    let sum;
    let first = true;
    if (func) {
        for (let item of iterable) {
            if (first) {
                sum = item;
                first = false;
            }
            else {
                sum = func (sum, item);
            }
            yield sum;
        }
    }
    else {
        for (let item of iterable) {
            if (first) {
                sum = item;
                first = false;
            }
            else {
                sum = sum + item;
            }
            yield sum;
        }
    }
}
</t>
<t tx="ekr.20201227092409.190">get expandOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.191">get expandPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.192">get fullyExpandBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.193">get fullyExpandLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.194">get fullyExpandOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.195">get fullyExpandPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.196">get get_window_info () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.197">get hideBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.198">get hideLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.199">get hideLogWindow () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.20">export var chain = function* () {
    let args = [] .slice.apply (arguments);                         
    for (let arg of args) {
        for (let item of arg) {
            yield item;
        }
    }
}
</t>
<t tx="ekr.20201227092409.200">get hideOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.201">get hidePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.202">get leoHelp () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.203">get lift () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.204">get minimizeAll () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.205">get resizePanesToRatio () {return __get__ (this, function (self, ratio, secondary_ratio) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.206">get resizeToScreen () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.207">get setInitialWindowGeometry () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.208">get setTopGeometry () {return __get__ (this, function (self, w, h, x, y) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.209">get toggleActivePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.21">chain.from_iterable = function* (iterable) {                        
    for (let item of iterable) {
        for (let subItem of item) {
            yield subItem;
        }
    }
}
</t>
<t tx="ekr.20201227092409.210">    get toggleSplitDirection () {return __get__ (this, function (self, event) {
        if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
            var event = null;
        };
        self.oops ();
    });}
});
export var LeoLog =  __class__ ('LeoLog', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.211">get __init__ () {return __get__ (this, function (self, frame, parentFrame) {
    self.frame = frame;
    self.c = (frame ? frame.c : null);
    self.enabled = true;
    self.newlines = 0;
    self.isNull = false;
    self.canvasCtrl = null;
    self.logCtrl = null;
    self.tabName = null;
    self.tabFrame = null;
    self.canvasDict = dict ({});
    self.frameDict = dict ({});
    self.logNumber = 0;
    self.newTabCount = 0;
    self.textDict = dict ({});
});},
</t>
<t tx="ekr.20201227092409.212">get cmd () {return __get__ (this, function (py_name) {
    return g.new_cmd_decorator (py_name, ['c', 'frame', 'log']);
});},
</t>
<t tx="ekr.20201227092409.213">get clearTab () {return __get__ (this, function (self, tabName, wrap) {
    if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
        var wrap = 'none';
    };
    self.selectTab (tabName, __kwargtrans__ ({wrap: wrap}));
    var w = self.logCtrl;
    if (w) {
        w.delete (0, 'end');
    }
});},
</t>
<t tx="ekr.20201227092409.214">get createTab () {return __get__ (this, function (self, tabName, createText, widget, wrap) {
    if (typeof createText == 'undefined' || (createText != null &amp;&amp; createText.hasOwnProperty ("__kwargtrans__"))) {;
        var createText = true;
    };
    if (typeof widget == 'undefined' || (widget != null &amp;&amp; widget.hasOwnProperty ("__kwargtrans__"))) {;
        var widget = null;
    };
    if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
        var wrap = 'none';
    };
    if (createText) {
        var w = self.createTextWidget (self.tabFrame);
        self.canvasDict [tabName] = null;
        self.textDict [tabName] = w;
    }
    else {
        self.canvasDict [tabName] = null;
        self.textDict [tabName] = null;
        self.frameDict [tabName] = tabName;
    }
});},
</t>
<t tx="ekr.20201227092409.215">get createTextWidget () {return __get__ (this, function (self, parentFrame) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.216">get deleteTab () {return __get__ (this, function (self, tabName, force) {
    if (typeof force == 'undefined' || (force != null &amp;&amp; force.hasOwnProperty ("__kwargtrans__"))) {;
        var force = false;
    };
    var c = self.c;
    if (tabName == 'Log') {
        // pass;
    }
    else if (__in__ (tabName, tuple (['Find', 'Spell'])) &amp;&amp; !(force)) {
        self.selectTab ('Log');
    }
    else {
        for (var d of tuple ([self.canvasDict, self.textDict, self.frameDict])) {
            if (__in__ (tabName, d)) {
                delete d [tabName];
            }
        }
        self.tabName = null;
        self.selectTab ('Log');
    }
    c.invalidateFocus ();
    c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.217">get disable () {return __get__ (this, function (self) {
    self.enabled = false;
});},
</t>
<t tx="ekr.20201227092409.218">get enable () {return __get__ (this, function (self, enabled) {
    if (typeof enabled == 'undefined' || (enabled != null &amp;&amp; enabled.hasOwnProperty ("__kwargtrans__"))) {;
        var enabled = true;
    };
    self.enabled = enabled;
});},
</t>
<t tx="ekr.20201227092409.219">get getSelectedTab () {return __get__ (this, function (self) {
    return self.tabName;
});},
</t>
<t tx="ekr.20201227092409.22">export var compress = function* (data, selectors) {
    let dataIterator = data [Symbol.iterator] .call (data);
    let selectorsIterator = selectors [Symbol.iterator] ();
    while (true) {
        let dataItem = dataIterator.next ();
        let selectorsItem = selectorsIterator.next ();
        if (dataItem.done || selectorsItem.done) {
            break;
        }
        else {
            if (selectorsItem.value) {
                yield dataItem.value;
            }
        }
    }
}
</t>
<t tx="ekr.20201227092409.220">get hideTab () {return __get__ (this, function (self, tabName) {
    self.selectTab ('Log');
});},
</t>
<t tx="ekr.20201227092409.221">get lowerTab () {return __get__ (this, function (self, tabName) {
    self.c.invalidateFocus ();
    self.c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.222">get raiseTab () {return __get__ (this, function (self, tabName) {
    self.c.invalidateFocus ();
    self.c.bodyWantsFocus ();
});},
</t>
<t tx="ekr.20201227092409.223">get orderedTabNames () {return __get__ (this, function (self, LeoLog) {
    if (typeof LeoLog == 'undefined' || (LeoLog != null &amp;&amp; LeoLog.hasOwnProperty ("__kwargtrans__"))) {;
        var LeoLog = null;
    };
    return list (self.frameDict.py_values ());
});},
</t>
<t tx="ekr.20201227092409.224">get numberOfVisibleTabs () {return __get__ (this, function (self) {
    return len ((function () {
        var __accu0__ = [];
        for (var val of list (self.frameDict.py_values ())) {
            if (val !== null) {
                __accu0__.append (val);
            }
        }
        return __accu0__;
    }) ());
});},
</t>
<t tx="ekr.20201227092409.226">get put () {return __get__ (this, function (self, s, color, tabName, from_redirect, nodeLink) {
    if (typeof color == 'undefined' || (color != null &amp;&amp; color.hasOwnProperty ("__kwargtrans__"))) {;
        var color = null;
    };
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    if (typeof from_redirect == 'undefined' || (from_redirect != null &amp;&amp; from_redirect.hasOwnProperty ("__kwargtrans__"))) {;
        var from_redirect = false;
    };
    if (typeof nodeLink == 'undefined' || (nodeLink != null &amp;&amp; nodeLink.hasOwnProperty ("__kwargtrans__"))) {;
        var nodeLink = null;
    };
    print (s);
});},
</t>
<t tx="ekr.20201227092409.227">get putnl () {return __get__ (this, function (self, tabName) {
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.228">get renameTab () {return __get__ (this, function (self, oldName, newName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.229">    get selectTab () {return __get__ (this, function (self, tabName, createText, widget, wrap) {
        if (typeof createText == 'undefined' || (createText != null &amp;&amp; createText.hasOwnProperty ("__kwargtrans__"))) {;
            var createText = true;
        };
        if (typeof widget == 'undefined' || (widget != null &amp;&amp; widget.hasOwnProperty ("__kwargtrans__"))) {;
            var widget = null;
        };
        if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
            var wrap = 'none';
        };
        var c = self.c;
        var tabFrame = self.frameDict.py_get (tabName);
        if (!(tabFrame)) {
            self.createTab (tabName, __kwargtrans__ ({createText: createText}));
        }
        self.tabName = tabName;
        self.canvasCtrl = self.canvasDict.py_get (tabName);
        self.logCtrl = self.textDict.py_get (tabName);
        self.tabFrame = self.frameDict.py_get (tabName);
        if (0) {
            c.widgetWantsFocusNow (self.logCtrl);
        }
        return tabFrame;
    });}
});
export var LeoTree =  __class__ ('LeoTree', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.23">export var dropwhile = function* (pred, seq) {
    let started = false;
    for (let item of seq) {
        if (started) {
            yield item;
        }
        else if (!pred (item)) {
            started = true;
            yield item;
        }
    }
}
</t>
<t tx="ekr.20201227092409.230">get __init__ () {return __get__ (this, function (self, frame) {
    self.frame = frame;
    self.c = frame.c;
    self.edit_text_dict = dict ({});
    self.drag_p = null;
    self.generation = 0;
    self.redrawCount = 0;
    self.use_chapters = false;
    self.canvas = null;
});},
</t>
<t tx="ekr.20201227092409.231">get initAfterLoad () {return __get__ (this, function (self) {
});},
</t>
<t tx="ekr.20201227092409.232">get redraw_after_contract () {return __get__ (this, function (self, p) {
    self.c.redraw ();
});},
</t>
<t tx="ekr.20201227092409.233">get redraw_after_expand () {return __get__ (this, function (self, p) {
    self.c.redraw ();
});},
</t>
<t tx="ekr.20201227092409.234">get redraw_after_head_changed () {return __get__ (this, function (self) {
    self.c.redraw ();
});},
</t>
<t tx="ekr.20201227092409.235">get redraw_after_icons_changed () {return __get__ (this, function (self) {
    self.c.redraw ();
});},
</t>
<t tx="ekr.20201227092409.236">get redraw_after_select () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    self.c.redraw ();
});},
</t>
<t tx="ekr.20201227092409.237">get onHeadChanged () {return __get__ (this, function (self, p, undoType) {
    if (typeof undoType == 'undefined' || (undoType != null &amp;&amp; undoType.hasOwnProperty ("__kwargtrans__"))) {;
        var undoType = 'Typing';
    };
    var __left0__ = tuple ([self.c, self.c.undoer, self.edit_widget (p)]);
    var c = __left0__ [0];
    var u = __left0__ [1];
    var w = __left0__ [2];
    if (c.suppressHeadChanged) {
        g.trace ('suppressHeadChanged');
        return ;
    }
    if (!(w)) {
        g.trace ('no w');
        return ;
    }
    var ch = '\n';
    var s = w.getAllText ();
    while (s &amp;&amp; s [-(1)] == '\n') {
        var s = s.__getslice__ (0, -(1), 1);
    }
    var i = s.find ('\n');
    if (i &gt; -(1)) {
        g.warning ('truncating headline to one line');
        var s = s.__getslice__ (0, i, 1);
    }
    var limit = 1000;
    if (len (s) &gt; limit) {
        g.warning ('truncating headline to', limit, 'characters');
        var s = s.__getslice__ (0, limit, 1);
    }
    var s = g.checkUnicode (s || '');
    var changed = s != p.h;
    if (!(changed)) {
        return ;
    }
    if (g.doHook ('headkey1', __kwargtrans__ ({c: c, p: p, ch: ch, changed: changed}))) {
        return ;
    }
    var undoData = u.beforeChangeHeadline (p);
    p.initHeadString (s);
    if (!(c.changed)) {
        c.setChanged ();
    }
    c.frame.scanForTabWidth (p);
    c.frame.body.recolor (p);
    p.setDirty ();
    u.afterChangeHeadline (p, undoType, undoData);
    c.redraw_after_head_changed ();
    g.doHook ('headkey2', __kwargtrans__ ({c: c, p: p, ch: ch, changed: changed}));
});},
</t>
<t tx="ekr.20201227092409.238">get endEditLabel () {return __get__ (this, function (self) {
    self.onHeadChanged (self.c.p);
});},
</t>
<t tx="ekr.20201227092409.239">get getEditTextDict () {return __get__ (this, function (self, v) {
    return self.edit_text_dict.py_get (v, []);
});},
</t>
<t tx="ekr.20201227092409.24">export var filterfalse = function* (pred, seq) {
    for (let item of seq) {
        if (!pred (item)) {
            yield item;
        }
    }
}
</t>
<t tx="ekr.20201227092409.240">get onHeadlineKey () {return __get__ (this, function (self, event) {
    var w = (event ? event.widget : null);
    var ch = (event ? event.char : '');
    if (ch) {
        self.updateHead (event, w);
    }
});},
</t>
<t tx="ekr.20201227092409.241">get OnIconCtrlClick () {return __get__ (this, function (self, p) {
    g.openUrl (p);
});},
</t>
<t tx="ekr.20201227092409.242">get OnIconDoubleClick () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.243">get updateHead () {return __get__ (this, function (self, event, w) {
    var k = self.c.k;
    var ch = (event ? event.char : '');
    var __left0__ = w.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    var ins = w.getInsertPoint ();
    if (i != j) {
        var ins = i;
    }
    if (__in__ (ch, tuple (['\x08', 'BackSpace']))) {
        if (i != j) {
            w.delete (i, j);
            w.setSelectionRange (i, i, __kwargtrans__ ({insert: i}));
        }
        else if (i &gt; 0) {
            i--;
            w.delete (i);
            w.setSelectionRange (i, i, __kwargtrans__ ({insert: i}));
        }
        else {
            w.setSelectionRange (0, 0, __kwargtrans__ ({insert: 0}));
        }
    }
    else if (ch &amp;&amp; !__in__ (ch, tuple (['\n', '\r']))) {
        if (i != j) {
            w.delete (i, j);
        }
        else if (k.unboundKeyAction == 'overwrite') {
            w.delete (i, i + 1);
        }
        w.insert (ins, ch);
        w.setSelectionRange (ins + 1, ins + 1, __kwargtrans__ ({insert: ins + 1}));
    }
    var s = w.getAllText ();
    if (s.endswith ('\n')) {
        var s = s.__getslice__ (0, -(1), 1);
    }
    if (__in__ (ch, tuple (['\n', '\r']))) {
        self.endEditLabel ();
    }
});},
</t>
<t tx="ekr.20201227092409.244">get drawIcon () {return __get__ (this, function (self, p) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.245">get redraw () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    self.oops ();
});},
redraw_now: redraw,
</t>
<t tx="ekr.20201227092409.246">get scrollTo () {return __get__ (this, function (self, p) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.247">get editLabel () {return __get__ (this, function (self, p, selectAll, selection) {
    if (typeof selectAll == 'undefined' || (selectAll != null &amp;&amp; selectAll.hasOwnProperty ("__kwargtrans__"))) {;
        var selectAll = false;
    };
    if (typeof selection == 'undefined' || (selection != null &amp;&amp; selection.hasOwnProperty ("__kwargtrans__"))) {;
        var selection = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.248">get edit_widget () {return __get__ (this, function (self, p) {
    self.oops ();
});},
tree_select_lockout: false,
</t>
<t tx="ekr.20201227092409.249">get select () {return __get__ (this, function (self, p) {
    var trace = __in__ ('select', g.app.debug) &amp;&amp; !(g.unitTesting);
    var tag = 'LeoTree.select';
    var c = self.c;
    if (g.app.killed || self.tree_select_lockout) {
        return ;
    }
    if (trace) {
        print ('----- {}: {}'.format (tag, p.h));
    }
    try {
        self.tree_select_lockout = true;
        self.prev_v = c.p.v;
        self.selectHelper (p);
    }
    finally {
        self.tree_select_lockout = false;
        if (c.enableRedrawFlag) {
            var p = c.p;
            if (c.expandAllAncestors (p) &amp;&amp; !(g.unitTesting)) {
                c.redraw_later ();
            }
            else {
                c.outerUpdate ();
                if (hasattr (self, 'setItemForCurrentPosition')) {
                    self.setItemForCurrentPosition ();
                }
            }
        }
        else {
            c.requestLaterRedraw = true;
        }
    }
});},
</t>
<t tx="ekr.20201227092409.25">export var groupby = function* (iterable, keyfunc) {
    let anIterator = iterable [Symbol.iterator] ();
    let item = anIterator.next ();
    
    if (item.done) {
        return;
    }
    
    let groupKey = keyfunc (item.value);
    let more = true;
    
    function* group () {
        while (true) {
            yield (item.value);
            item = anIterator.next ();
            
            if (item.done) {
                more = false;
                return;
            }
            
            let key = keyfunc (item.value);
            
            if (key != groupKey) {
                groupKey = key;
                return;
            }
        }
    }
    
    while (more) {
        yield tuple ([groupKey, group ()]);
    }
}
</t>
<t tx="ekr.20201227092409.250">get selectHelper () {return __get__ (this, function (self, p) {
    if (!(p)) {
        return ;
    }
    var c = self.c;
    if (!(c.frame.body.wrapper)) {
        return ;
    }
    if (p.v.context != c) {
        g.trace ('Wrong context: {} != {}'.format (p.v.context, c));
        return ;
    }
    var old_p = c.p;
    var call_event_handlers = p != old_p;
    self.unselect_helper (old_p, p);
    self.select_new_node (old_p, p);
    self.change_current_position (old_p, p);
    self.scroll_cursor (p);
    self.set_status_line (p);
    if (call_event_handlers) {
        g.doHook ('select2', __kwargtrans__ ({c: c, new_p: p, old_p: old_p, new_v: p, old_v: old_p}));
        g.doHook ('select3', __kwargtrans__ ({c: c, new_p: p, old_p: old_p, new_v: p, old_v: old_p}));
    }
});},
</t>
<t tx="ekr.20201227092409.251">get unselect_helper () {return __get__ (this, function (self, old_p, p) {
    var c = self.c;
    var call_event_handlers = p != old_p;
    if (call_event_handlers) {
        var unselect = !(g.doHook ('unselect1', __kwargtrans__ ({c: c, new_p: p, old_p: old_p, new_v: p, old_v: old_p})));
    }
    else {
        var unselect = true;
    }
    if (unselect &amp;&amp; old_p &amp;&amp; old_p != p) {
        self.endEditLabel ();
        if (hasattr (self, 'unselectItem')) {
            self.unselectItem (old_p);
        }
    }
    if (call_event_handlers) {
        g.doHook ('unselect2', __kwargtrans__ ({c: c, new_p: p, old_p: old_p, new_v: p, old_v: old_p}));
    }
});},
</t>
<t tx="ekr.20201227092409.252">get select_new_node () {return __get__ (this, function (self, old_p, p) {
    var c = self.c;
    var call_event_handlers = p != old_p;
    if (call_event_handlers &amp;&amp; g.doHook ('select1', __kwargtrans__ ({c: c, new_p: p, old_p: old_p, new_v: p, old_v: old_p}))) {
        if (__in__ ('select', g.app.debug)) {
            g.trace ('select1 override');
        }
        return ;
    }
    c.frame.setWrap (p);
    self.set_body_text_after_select (p, old_p);
    c.nodeHistory.py_update (p);
});},
</t>
<t tx="ekr.20201227092409.253">get set_body_text_after_select () {return __get__ (this, function (self, p, old_p, force) {
    if (typeof force == 'undefined' || (force != null &amp;&amp; force.hasOwnProperty ("__kwargtrans__"))) {;
        var force = false;
    };
    var c = self.c;
    var w = c.frame.body.wrapper;
    var s = p.v.b;
    var old_s = w.getAllText ();
    if (!(force) &amp;&amp; p &amp;&amp; p == old_p &amp;&amp; s == old_s) {
        return ;
    }
    c.setCurrentPosition (p);
    w.setAllText (s);
});},
</t>
<t tx="ekr.20201227092409.254">get change_current_position () {return __get__ (this, function (self, old_p, p) {
    var c = self.c;
    c.frame.scanForTabWidth (p);
    var use_chapters = c.config.getBool ('use-chapters');
    if (use_chapters) {
        var cc = c.chapterController;
        var theChapter = cc &amp;&amp; cc.getSelectedChapter ();
        if (theChapter) {
            theChapter.p = p.copy ();
        }
    }
    c.undoer.onSelect (old_p, p);
});},
</t>
<t tx="ekr.20201227092409.255">get scroll_cursor () {return __get__ (this, function (self, p) {
    p.restoreCursorAndScroll ();
});},
</t>
<t tx="ekr.20201227092409.256">get set_status_line () {return __get__ (this, function (self, p) {
    var c = self.c;
    c.frame.body.assignPositionToEditor (p);
    c.frame.updateStatusLine ();
    c.frame.clearStatusLine ();
    var verbose = getattr (c, 'status_line_unl_mode', '') == 'canonical';
    if (p &amp;&amp; p.v) {
        c.frame.putStatusLine (p.get_UNL (__kwargtrans__ ({with_proto: verbose, with_index: verbose})));
    }
});},
</t>
<t tx="ekr.20201227092409.257">    get oops () {return __get__ (this, function (self) {
        g.pr ('LeoTree oops:', g.callers (4), 'should be overridden in subclass');
    });}
});
export var LeoTreeTab =  __class__ ('LeoTreeTab', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.258">get __init__ () {return __get__ (this, function (self, c, chapterController, parentFrame) {
    self.c = c;
    self.cc = chapterController;
    self.nb = null;
    self.parentFrame = parentFrame;
});},
</t>
<t tx="ekr.20201227092409.259">get createControl () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.260">get createTab () {return __get__ (this, function (self, tabName, select) {
    if (typeof select == 'undefined' || (select != null &amp;&amp; select.hasOwnProperty ("__kwargtrans__"))) {;
        var select = true;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.261">get destroyTab () {return __get__ (this, function (self, tabName) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.262">get selectTab () {return __get__ (this, function (self, tabName) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.263">get setTabLabel () {return __get__ (this, function (self, tabName) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092409.264">    get oops () {return __get__ (this, function (self) {
        g.pr ('LeoTreeTree oops:', g.callers (4), 'should be overridden in subclass');
    });}
});
export var NullBody =  __class__ ('NullBody', [LeoBody], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.265">get __init__ () {return __get__ (this, function (self, frame, parentFrame) {
    if (typeof frame == 'undefined' || (frame != null &amp;&amp; frame.hasOwnProperty ("__kwargtrans__"))) {;
        var frame = null;
    };
    if (typeof parentFrame == 'undefined' || (parentFrame != null &amp;&amp; parentFrame.hasOwnProperty ("__kwargtrans__"))) {;
        var parentFrame = null;
    };
    __super__ (NullBody, '__init__') (self, frame, parentFrame);
    self.insertPoint = 0;
    self.selection = tuple ([0, 0]);
    self.s = '';
    self.widget = null;
    var __left0__ = StringTextWrapper (__kwargtrans__ ({c: self.c, py_name: 'body'}));
    self.wrapper = __left0__;
    var wrapper = __left0__;
    self.editorWrappers ['1'] = wrapper;
    self.colorizer = NullColorizer (self.c);
});},
</t>
<t tx="ekr.20201227092409.266">get createControl () {return __get__ (this, function (self, parentFrame, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.267">get addEditor () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.268">get assignPositionToEditor () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.269">get createEditorFrame () {return __get__ (this, function (self, w) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.27">export var islice = function* () {
    let start;  // Have to be defined at function level, or Closure compiler will loose them after a yield 
    let stop;   //
    let step;   //
    
    let args = [] .slice.apply (arguments);
    let anIterator = args [0][Symbol.iterator] ();
    if (args.length == 2) {
        stop = args [1];
        start = 0;
        step = 1;
    }
    else {
        start = args [1];
        stop = args [2];
        if (args.length == 4) {
            step = args [3];
        }
        else {
            step = 1;
        }
    }
    for (let index = 0; index &lt; start; index++) {
        if (anIterator.next (). done) {
            return;
        }
    }
    for (let index = 0; index &lt; stop - start; index++) {
        let next = anIterator.next ();
        if (next.done) {
            return;
        }
        if (index % step == 0) {
            yield next.value;
        }
    }
}
</t>
<t tx="ekr.20201227092409.270">get cycleEditorFocus () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.271">get deleteEditor () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.272">get selectEditor () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.273">get selectLabel () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.274">get setEditorColors () {return __get__ (this, function (self, bg, fg) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.275">get unselectLabel () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.276">get updateEditors () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.277">get forceFullRecolor () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.278">get scheduleIdleTimeRoutine () {return __get__ (this, function (self, function) {
    var args = tuple ([].slice.apply (arguments).slice (2));
    // pass;
});},
</t>
<t tx="ekr.20201227092409.279">    get setFocus () {return __get__ (this, function (self) {
        // pass;
    });}
});
export var NullColorizer =  __class__ ('NullColorizer', [leoColorizer.BaseColorizer], {
    __module__: __name__,
    recolorCount: 0,
</t>
<t tx="ekr.20201227092409.28">export var starmap = function* (func, seq) {
    let anIterator = seq [Symbol.iterator] ();
    while (true) {
        let next = anIterator.next ()
        if (next.done) {
            return;
        }
        else {
            yield func (...next.value); 
        }
    }
}
</t>
<t tx="ekr.20201227092409.280">    get colorize () {return __get__ (this, function (self, p) {
        self.recolorCount++;
    });}
});
export var NullFrame =  __class__ ('NullFrame', [LeoFrame], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.281">get __init__ () {return __get__ (this, function (self, c, title, gui) {
    __super__ (NullFrame, '__init__') (self, c, gui);
    self.wrapper = null;
    self.iconBar = NullIconBarClass (self.c, self);
    self.initComplete = true;
    self.isNullFrame = true;
    self.outerFrame = null;
    var __left0__ = 0.5;
    self.ratio = __left0__;
    self.secondary_ratio = __left0__;
    self.statusLineClass = NullStatusLineClass;
    self.title = title;
    self.top = null;
    self.body = NullBody (__kwargtrans__ ({frame: self, parentFrame: null}));
    self.log = NullLog (__kwargtrans__ ({frame: self, parentFrame: null}));
    self.menu = leoMenu.NullMenu (__kwargtrans__ ({frame: self}));
    self.tree = NullTree (__kwargtrans__ ({frame: self}));
    self.w = 600;
    self.h = 500;
    self.x = 40;
    self.y = 40;
});},
</t>
<t tx="ekr.20201227092409.282">get bringToFront () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.283">get cascade () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.284">get contractBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.285">get contractLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.286">get contractOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.287">get contractPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.288">get deiconify () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.289">get destroySelf () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.29">export var takewhile = function* (pred, seq) {
    for (let item of seq) {
        if (pred (item)) {
            yield item;
        }
        else {
            return;
        }
    }
}
</t>
<t tx="ekr.20201227092409.290">get equalSizedPanes () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.291">get expandBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.292">get expandLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.293">get expandOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.294">get expandPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.295">get fullyExpandBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.296">get fullyExpandLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.297">get fullyExpandOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.298">get fullyExpandPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.299">get get_window_info () {return __get__ (this, function (self) {
    return tuple ([600, 500, 20, 20]);
});},
</t>
<t tx="ekr.20201227092409.3">@path c:/vs-code-devel/leojs4/
const g = require('./dummyLeoGlobals')
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.30">export var tee = function (iterable, n) {
    if (n == undefined) {
        n = 2;
    }
    let all = [];                               // Don't return iterator since destructuring assignment cannot yet deal with that
    let one = list (iterable);
    for (let i = 0; i &lt; n; i++) {
        all.append (one [Symbol.iterator] ());  // Iterator rather than list, exhaustable for semantic equivalence
    }
    return list (all);
}

</t>
<t tx="ekr.20201227092409.300">get hideBodyPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.301">get hideLogPane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.302">get hideLogWindow () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.303">get hideOutlinePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.304">get hidePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.305">get leoHelp () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.306">get lift () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.307">get minimizeAll () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.308">get oops () {return __get__ (this, function (self) {
    g.trace ('NullFrame', g.callers (4));
});},
</t>
<t tx="ekr.20201227092409.309">get resizePanesToRatio () {return __get__ (this, function (self, ratio, secondary_ratio) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.31">export var product = function () {
    let args = [] .slice.apply (arguments);
    if (args.length &amp;&amp; args [args.length - 1] .hasOwnProperty ('__kwargtrans__')) {
        var repeat = args.pop () ['repeat']; 
    }
    else {
        var repeat = 1;
    }
    
    let oldMolecules = [tuple ([])];
    for (let i = 0; i &lt; repeat; i++) {
        for (let arg of args) {
            let newMolecules = [];
            for (let oldMolecule of oldMolecules) {
                for (let atom of arg) {
                    newMolecules.append (tuple (oldMolecule.concat (atom)));
                }
            }
            oldMolecules = newMolecules;
        }
    }
    return list (oldMolecules); // Also works if args is emptpy
}
</t>
<t tx="ekr.20201227092409.310">get resizeToScreen () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.311">get setInitialWindowGeometry () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.312">get setTopGeometry () {return __get__ (this, function (self, w, h, x, y) {
    return tuple ([0, 0, 0, 0]);
});},
</t>
<t tx="ekr.20201227092409.313">get setWrap () {return __get__ (this, function (self, flag, force) {
    if (typeof force == 'undefined' || (force != null &amp;&amp; force.hasOwnProperty ("__kwargtrans__"))) {;
        var force = false;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.314">get toggleActivePane () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.315">get toggleSplitDirection () {return __get__ (this, function (self, event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.316">get py_update () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.317">    get finishCreate () {return __get__ (this, function (self) {
        self.createFirstTreeNode ();
    });}
});
export var NullIconBarClass =  __class__ ('NullIconBarClass', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.318">get __init__ () {return __get__ (this, function (self, c, parentFrame) {
    self.c = c;
    self.iconFrame = null;
    self.parentFrame = parentFrame;
    self.w = g.NullObject ();
});},
</t>
<t tx="ekr.20201227092409.319">get addRow () {return __get__ (this, function (self, height) {
    if (typeof height == 'undefined' || (height != null &amp;&amp; height.hasOwnProperty ("__kwargtrans__"))) {;
        var height = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.32">export var permutations = function (iterable, r) {
    if (r == undefined) {
        try {
            r = len (iterable);
        }
        catch (exception) {
            r = len (list (iterable));
        }
    }
    let aProduct = product (iterable, __kwargtrans__ ({repeat: r}));
    let result = [];
    for (let molecule of aProduct) {
        if (len (set (molecule)) == r) {    // Weed out doubles
            result.append (molecule);
        }
    }
    return list (result);
}
</t>
<t tx="ekr.20201227092409.320">get addRowIfNeeded () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.321">get addWidget () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.322">get createChaptersIcon () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.323">get deleteButton () {return __get__ (this, function (self, w) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.324">get getNewFrame () {return __get__ (this, function (self) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.325">get hide () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.326">get show () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.327">get add () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    var command = py_keys.py_get ('command');
    var text = py_keys.py_get ('text');
    try {
        g.app.iconWidgetCount++;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.app.iconWidgetCount = 1;
        }
        else {
            throw __except0__;
        }
    }
    var n = g.app.iconWidgetCount;
    var py_name = 'nullButtonWidget {}'.format (n);
    if (!(command)) {
        @others
});},
</t>
<t tx="ekr.20201227092409.328">    var commandCallback = function (py_name) {
        if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
            var py_name = py_name;
        };
        g.pr ('command for {}'.format (py_name));
    };
    var command = commandCallback;
}
var nullButtonWidget = __class__ ('nullButtonWidget', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.329">get __init__ () {return __get__ (this, function (self, c, command, py_name, text) {
    self.c = c;
    self.command = command;
    self.py_name = py_name;
    self.text = text;
});},
</t>
<t tx="ekr.20201227092409.33">export var combinations = function (iterable, r) {
    let tail = list (iterable);
    function recurse (tail, molecule, rNext) {
        for (let index = 0; index &lt; len (tail) - rNext; index++) {
            let newMolecule = molecule.concat (tail.slice (index, index + 1));

            if (rNext) {
                recurse (tail.slice (index + 1), newMolecule, rNext - 1);
            }
            else {
                result.append (tuple (newMolecule));
            }
        }
    }
    let result = [];
    recurse (tail, tail.slice (0, 0), r - 1);
    return list (result);
}
</t>
<t tx="ekr.20201227092409.330">    get __repr__ () {return __get__ (this, function (self) {
        return self.py_name;
    });}
});
var b = nullButtonWidget (self.c, command, py_name, text);
return b;
</t>
<t tx="ekr.20201227092409.331">get py_clear () {return __get__ (this, function (self) {
    g.app.iconWidgetCount = 0;
    g.app.iconImageRefs = [];
});},
</t>
<t tx="ekr.20201227092409.332">    get setCommandForButton () {return __get__ (this, function (self, button, command, command_p, controller, gnx, script) {
        button.command = command;
    });}
});
export var NullLog =  __class__ ('NullLog', [LeoLog], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.333">get __init__ () {return __get__ (this, function (self, frame, parentFrame) {
    if (typeof frame == 'undefined' || (frame != null &amp;&amp; frame.hasOwnProperty ("__kwargtrans__"))) {;
        var frame = null;
    };
    if (typeof parentFrame == 'undefined' || (parentFrame != null &amp;&amp; parentFrame.hasOwnProperty ("__kwargtrans__"))) {;
        var parentFrame = null;
    };
    __super__ (NullLog, '__init__') (self, frame, parentFrame);
    self.isNull = true;
    self.logNumber = 0;
    self.widget = self.createControl (parentFrame);
});},
</t>
<t tx="ekr.20201227092409.334">get finishCreate () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.335">get createControl () {return __get__ (this, function (self, parentFrame) {
    return self.createTextWidget (parentFrame);
});},
</t>
<t tx="ekr.20201227092409.336">get createTextWidget () {return __get__ (this, function (self, parentFrame) {
    self.logNumber++;
    var c = self.c;
    var log = StringTextWrapper (__kwargtrans__ ({c: c, py_name: 'log-{}'.format (self.logNumber)}));
    return log;
});},
</t>
<t tx="ekr.20201227092409.337">get hasSelection () {return __get__ (this, function (self) {
    return self.widget.hasSelection ();
});},
</t>
<t tx="ekr.20201227092409.338">get isLogWidget () {return __get__ (this, function (self, w) {
    return false;
});},
</t>
<t tx="ekr.20201227092409.339">get oops () {return __get__ (this, function (self) {
    g.trace ('NullLog:', g.callers (4));
});},
</t>
<t tx="ekr.20201227092409.340">get put () {return __get__ (this, function (self, s, color, tabName, from_redirect, nodeLink) {
    if (typeof color == 'undefined' || (color != null &amp;&amp; color.hasOwnProperty ("__kwargtrans__"))) {;
        var color = null;
    };
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    if (typeof from_redirect == 'undefined' || (from_redirect != null &amp;&amp; from_redirect.hasOwnProperty ("__kwargtrans__"))) {;
        var from_redirect = false;
    };
    if (typeof nodeLink == 'undefined' || (nodeLink != null &amp;&amp; nodeLink.hasOwnProperty ("__kwargtrans__"))) {;
        var nodeLink = null;
    };
    if (self.enabled) {
        try {
            g.pr (s, __kwargtrans__ ({newline: false}));
        }
        catch (__except0__) {
            if (isinstance (__except0__, UnicodeError)) {
                var s = s.encode ('ascii', 'replace');
                g.pr (s, __kwargtrans__ ({newline: false}));
            }
            else {
                throw __except0__;
            }
        }
    }
});},
</t>
<t tx="ekr.20201227092409.341">get putnl () {return __get__ (this, function (self, tabName) {
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    if (self.enabled) {
        g.pr ('');
    }
});},
</t>
<t tx="ekr.20201227092409.342">get clearTab () {return __get__ (this, function (self, tabName, wrap) {
    if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
        var wrap = 'none';
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.343">get createCanvas () {return __get__ (this, function (self, tabName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.344">get createTab () {return __get__ (this, function (self, tabName, createText, widget, wrap) {
    if (typeof createText == 'undefined' || (createText != null &amp;&amp; createText.hasOwnProperty ("__kwargtrans__"))) {;
        var createText = true;
    };
    if (typeof widget == 'undefined' || (widget != null &amp;&amp; widget.hasOwnProperty ("__kwargtrans__"))) {;
        var widget = null;
    };
    if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
        var wrap = 'none';
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.345">get deleteTab () {return __get__ (this, function (self, tabName, force) {
    if (typeof force == 'undefined' || (force != null &amp;&amp; force.hasOwnProperty ("__kwargtrans__"))) {;
        var force = false;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.346">get getSelectedTab () {return __get__ (this, function (self) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.347">get lowerTab () {return __get__ (this, function (self, tabName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.348">get raiseTab () {return __get__ (this, function (self, tabName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.349">get renameTab () {return __get__ (this, function (self, oldName, newName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.35">export var combinations_with_replacement = function (iterable, r) {
    let tail = list (iterable);
    function recurse (tail, molecule, rNext) {
        for (let index = 0; index &lt; len (tail); index++) {
            let newMolecule = molecule.concat (tail.slice (index, index + 1));

            if (rNext) {
                recurse (tail.slice (index), newMolecule, rNext - 1);
            }
            else {
                result.append (tuple (newMolecule));
            }
        }
    }
    let result = [];
    recurse (tail, tail.slice (0, 0), r - 1);
    return list (result);
}

//# sourceMappingURL=itertools.map
</t>
<t tx="ekr.20201227092409.350">    get selectTab () {return __get__ (this, function (self, tabName, createText, widget, wrap) {
        if (typeof createText == 'undefined' || (createText != null &amp;&amp; createText.hasOwnProperty ("__kwargtrans__"))) {;
            var createText = true;
        };
        if (typeof widget == 'undefined' || (widget != null &amp;&amp; widget.hasOwnProperty ("__kwargtrans__"))) {;
            var widget = null;
        };
        if (typeof wrap == 'undefined' || (wrap != null &amp;&amp; wrap.hasOwnProperty ("__kwargtrans__"))) {;
            var wrap = 'none';
        };
        // pass;
    });}
});
export var NullStatusLineClass =  __class__ ('NullStatusLineClass', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.351">get __init__ () {return __get__ (this, function (self, c, parentFrame) {
    self.c = c;
    self.enabled = false;
    self.parentFrame = parentFrame;
    self.textWidget = StringTextWrapper (c, __kwargtrans__ ({py_name: 'status-line'}));
    c.frame.statusFrame = null;
    c.frame.statusLabel = null;
    c.frame.statusText = self.textWidget;
});},
</t>
<t tx="ekr.20201227092409.352">get disable () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = null;
    };
    self.enabled = false;
});},
</t>
<t tx="ekr.20201227092409.353">get enable () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = 'white';
    };
    self.c.widgetWantsFocus (self.textWidget);
    self.enabled = true;
});},
</t>
<t tx="ekr.20201227092409.354">get py_clear () {return __get__ (this, function (self) {
    self.textWidget.delete (0, 'end');
});},
</t>
<t tx="ekr.20201227092409.355">get py_get () {return __get__ (this, function (self) {
    return self.textWidget.getAllText ();
});},
</t>
<t tx="ekr.20201227092409.356">get isEnabled () {return __get__ (this, function (self) {
    return self.enabled;
});},
</t>
<t tx="ekr.20201227092409.357">get put () {return __get__ (this, function (self, s, bg, fg) {
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = null;
    };
    if (typeof fg == 'undefined' || (fg != null &amp;&amp; fg.hasOwnProperty ("__kwargtrans__"))) {;
        var fg = null;
    };
    self.textWidget.insert ('end', s);
});},
</t>
<t tx="ekr.20201227092409.358">get setFocus () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.359">    get py_update () {return __get__ (this, function (self) {
        // pass;
    });}
});
export var NullTree =  __class__ ('NullTree', [LeoTree], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.360">get __init__ () {return __get__ (this, function (self, frame) {
    __super__ (NullTree, '__init__') (self, frame);
    self.c = frame.c;
    self.editWidgetsDict = dict ({});
    self.font = null;
    self.fontName = null;
    self.canvas = null;
    self.redrawCount = 0;
    self.updateCount = 0;
});},
</t>
<t tx="ekr.20201227092409.361">get edit_widget () {return __get__ (this, function (self, p) {
    var d = self.editWidgetsDict;
    if (!(p) || !(p.v)) {
        return null;
    }
    var w = d.py_get (p.v);
    if (!(w)) {
        var __left0__ = StringTextWrapper (__kwargtrans__ ({c: self.c, py_name: 'head-{}'.format (1 + len (list (d.py_keys ())))}));
        d [p.v] = __left0__;
        var w = __left0__;
        w.setAllText (p.h);
    }
    return w;
});},
</t>
<t tx="ekr.20201227092409.362">get editLabel () {return __get__ (this, function (self, p, selectAll, selection) {
    if (typeof selectAll == 'undefined' || (selectAll != null &amp;&amp; selectAll.hasOwnProperty ("__kwargtrans__"))) {;
        var selectAll = false;
    };
    if (typeof selection == 'undefined' || (selection != null &amp;&amp; selection.hasOwnProperty ("__kwargtrans__"))) {;
        var selection = null;
    };
    self.endEditLabel ();
    if (p) {
        var wrapper = StringTextWrapper (__kwargtrans__ ({c: self.c, py_name: 'head-wrapper'}));
        var e = null;
        return tuple ([e, wrapper]);
    }
    return tuple ([null, null]);
});},
</t>
<t tx="ekr.20201227092409.363">get printWidgets () {return __get__ (this, function (self) {
    var d = self.editWidgetsDict;
    for (var key of d) {
        var w = d.py_get (key);
        g.pr ('w', w, 'v.h:', key.headString, 's:', repr (w.s));
    }
});},
</t>
<t tx="ekr.20201227092409.364">get drawIcon () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.365">get redraw () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    self.redrawCount++;
    return p;
});},
redraw_now: redraw,
</t>
<t tx="ekr.20201227092409.366">get redraw_after_contract () {return __get__ (this, function (self, p) {
    self.redraw ();
});},
</t>
<t tx="ekr.20201227092409.367">get redraw_after_expand () {return __get__ (this, function (self, p) {
    self.redraw ();
});},
</t>
<t tx="ekr.20201227092409.368">get redraw_after_head_changed () {return __get__ (this, function (self) {
    self.redraw ();
});},
</t>
<t tx="ekr.20201227092409.369">get redraw_after_icons_changed () {return __get__ (this, function (self) {
    self.redraw ();
});},
</t>
<t tx="ekr.20201227092409.37">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:07
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'leo.commands';

//# sourceMappingURL=leo.commands.map
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.370">get redraw_after_select () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    self.redraw ();
});},
</t>
<t tx="ekr.20201227092409.371">get scrollTo () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.372">get updateIcon () {return __get__ (this, function (self, p, force) {
    if (typeof force == 'undefined' || (force != null &amp;&amp; force.hasOwnProperty ("__kwargtrans__"))) {;
        var force = false;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.373">    get setHeadline () {return __get__ (this, function (self, p, s) {
        var w = self.edit_widget (p);
        if (w) {
            w.delete (0, 'end');
            if (s.endswith ('\n') || s.endswith ('\r')) {
                var s = s.__getslice__ (0, -(1), 1);
            }
            w.insert (0, s);
        }
        else {
            g.trace ('-' * 20, 'oops');
        }
    });}
});
export var StringTextWrapper =  __class__ ('StringTextWrapper', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.374">get __init__ () {return __get__ (this, function (self, c, py_name) {
    self.c = c;
    self.py_name = py_name;
    self.ins = 0;
    self.sel = tuple ([0, 0]);
    self.s = '';
    self.supportsHighLevelInterface = true;
    self.widget = null;
});},
</t>
<t tx="ekr.20201227092409.375">get __repr__ () {return __get__ (this, function (self) {
    return '&lt;StringTextWrapper: {} {}&gt;'.format (id (self), self.py_name);
});},
</t>
<t tx="ekr.20201227092409.376">get getName () {return __get__ (this, function (self) {
    return self.py_name;
});},
</t>
<t tx="ekr.20201227092409.377">get clipboard_clear () {return __get__ (this, function (self) {
    g.app.gui.replaceClipboardWith ('');
});},
</t>
<t tx="ekr.20201227092409.378">get clipboard_append () {return __get__ (this, function (self, s) {
    var s1 = g.app.gui.getTextFromClipboard ();
    g.app.gui.replaceClipboardWith (s1 + s);
});},
</t>
<t tx="ekr.20201227092409.379">get flashCharacter () {return __get__ (this, function (self, i, bg, fg, flashes, delay) {
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = 'white';
    };
    if (typeof fg == 'undefined' || (fg != null &amp;&amp; fg.hasOwnProperty ("__kwargtrans__"))) {;
        var fg = 'red';
    };
    if (typeof flashes == 'undefined' || (flashes != null &amp;&amp; flashes.hasOwnProperty ("__kwargtrans__"))) {;
        var flashes = 3;
    };
    if (typeof delay == 'undefined' || (delay != null &amp;&amp; delay.hasOwnProperty ("__kwargtrans__"))) {;
        var delay = 75;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.38">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:02
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'leo.core';

//# sourceMappingURL=leo.core.map
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.380">get getXScrollPosition () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.381">get getYScrollPosition () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.382">get see () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.383">get seeInsertPoint () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.384">get setFocus () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.385">get setStyleClass () {return __get__ (this, function (self, py_name) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.386">get setXScrollPosition () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.387">get setYScrollPosition () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.388">get tag_configure () {return __get__ (this, function (self, colorName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.389">get appendText () {return __get__ (this, function (self, s) {
    self.s = self.s + g.toUnicode (s);
    self.ins = len (self.s);
    self.sel = tuple ([self.ins, self.ins]);
});},
</t>
<t tx="ekr.20201227092409.39">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:07
var time = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as leoNodes from './leo.core.leoNodes.js';
import * as leoMenu from './leo.core.leoMenu.js';
import {leoColorizer} from './leo.core.js';
import * as g from './leo.core.leoGlobals.js';
import * as __module_time__ from './time.js';
__nest__ (time, '', __module_time__);
var __name__ = 'leo.core.leoFrame';
export var StatusLineAPI =  __class__ ('StatusLineAPI', [object], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.390">get delete () {return __get__ (this, function (self, i, j) {
    if (typeof j == 'undefined' || (j != null &amp;&amp; j.hasOwnProperty ("__kwargtrans__"))) {;
        var j = null;
    };
    var i = self.toPythonIndex (i);
    if (j === null) {
        var j = i + 1;
    }
    var j = self.toPythonIndex (j);
    if (i &gt; j) {
        var __left0__ = tuple ([j, i]);
        var i = __left0__ [0];
        var j = __left0__ [1];
    }
    var s = self.getAllText ();
    self.setAllText (s.__getslice__ (0, i, 1) + s.__getslice__ (j, null, 1));
    self.setSelectionRange (i, i, __kwargtrans__ ({insert: i}));
});},
</t>
<t tx="ekr.20201227092409.391">get deleteTextSelection () {return __get__ (this, function (self) {
    var __left0__ = self.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    self.delete (i, j);
});},
</t>
<t tx="ekr.20201227092409.392">get py_get () {return __get__ (this, function (self, i, j) {
    if (typeof j == 'undefined' || (j != null &amp;&amp; j.hasOwnProperty ("__kwargtrans__"))) {;
        var j = null;
    };
    var i = self.toPythonIndex (i);
    if (j === null) {
        var j = i + 1;
    }
    var j = self.toPythonIndex (j);
    var s = self.s.__getslice__ (i, j, 1);
    return g.toUnicode (s);
});},
</t>
<t tx="ekr.20201227092409.393">get getAllText () {return __get__ (this, function (self) {
    var s = self.s;
    return g.checkUnicode (s);
});},
</t>
<t tx="ekr.20201227092409.394">get getInsertPoint () {return __get__ (this, function (self) {
    var i = self.ins;
    if (i === null) {
        if (self.virtualInsertPoint === null) {
            var i = 0;
        }
        else {
            var i = self.virtualInsertPoint;
        }
    }
    self.virtualInsertPoint = i;
    return i;
});},
</t>
<t tx="ekr.20201227092409.395">get getSelectedText () {return __get__ (this, function (self) {
    var __left0__ = self.sel;
    var i = __left0__ [0];
    var j = __left0__ [1];
    var s = self.s.__getslice__ (i, j, 1);
    return g.checkUnicode (s);
});},
</t>
<t tx="ekr.20201227092409.396">get getSelectionRange () {return __get__ (this, function (self, py_sort) {
    if (typeof py_sort == 'undefined' || (py_sort != null &amp;&amp; py_sort.hasOwnProperty ("__kwargtrans__"))) {;
        var py_sort = true;
    };
    var sel = self.sel;
    if (len (sel) == 2 &amp;&amp; sel [0] &gt;= 0 &amp;&amp; sel [1] &gt;= 0) {
        var __left0__ = sel;
        var i = __left0__ [0];
        var j = __left0__ [1];
        if (py_sort &amp;&amp; i &gt; j) {
            var sel = tuple ([j, i]);
        }
        return sel;
    }
    var i = self.ins;
    return tuple ([i, i]);
});},
</t>
<t tx="ekr.20201227092409.397">get hasSelection () {return __get__ (this, function (self) {
    var __left0__ = self.getSelectionRange ();
    var i = __left0__ [0];
    var j = __left0__ [1];
    return i != j;
});},
</t>
<t tx="ekr.20201227092409.398">get insert () {return __get__ (this, function (self, i, s) {
    var i = self.toPythonIndex (i);
    var s1 = s;
    self.s = (self.s.__getslice__ (0, i, 1) + s1) + self.s.__getslice__ (i, null, 1);
    i += len (s1);
    self.ins = i;
    self.sel = tuple ([i, i]);
});},
</t>
<t tx="ekr.20201227092409.399">get selectAllText () {return __get__ (this, function (self, insert) {
    if (typeof insert == 'undefined' || (insert != null &amp;&amp; insert.hasOwnProperty ("__kwargtrans__"))) {;
        var insert = null;
    };
    self.setSelectionRange (0, 'end', __kwargtrans__ ({insert: insert}));
});},
</t>
<t tx="ekr.20201227092409.4">var test = function () {
    g.trace ('=====');
};

module.exports = {
    test,
}
</t>
<t tx="ekr.20201227092409.40">get __init__ () {return __get__ (this, function (self, c, parentFrame) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.400">get setAllText () {return __get__ (this, function (self, s) {
    self.s = s;
    var i = len (self.s);
    self.ins = i;
    self.sel = tuple ([i, i]);
});},
</t>
<t tx="ekr.20201227092409.401">get setInsertPoint () {return __get__ (this, function (self, pos, s) {
    if (typeof s == 'undefined' || (s != null &amp;&amp; s.hasOwnProperty ("__kwargtrans__"))) {;
        var s = null;
    };
    var __left0__ = self.toPythonIndex (pos);
    self.virtualInsertPoint = __left0__;
    var i = __left0__;
    self.ins = i;
    self.sel = tuple ([i, i]);
});},
</t>
<t tx="ekr.20201227092409.402">get setSelectionRange () {return __get__ (this, function (self, i, j, insert) {
    if (typeof insert == 'undefined' || (insert != null &amp;&amp; insert.hasOwnProperty ("__kwargtrans__"))) {;
        var insert = null;
    };
    var __left0__ = tuple ([self.toPythonIndex (i), self.toPythonIndex (j)]);
    var i = __left0__ [0];
    var j = __left0__ [1];
    self.sel = tuple ([i, j]);
    self.ins = (insert === null ? j : self.toPythonIndex (insert));
});},
</t>
<t tx="ekr.20201227092409.403">get toPythonIndex () {return __get__ (this, function (self, index) {
    return g.toPythonIndex (self.s, index);
});},
</t>
<t tx="ekr.20201227092409.404">    get toPythonIndexRowCol () {return __get__ (this, function (self, index) {
        var s = self.getAllText ();
        var i = self.toPythonIndex (index);
        var __left0__ = g.convertPythonIndexToRowCol (s, i);
        var row = __left0__ [0];
        var col = __left0__ [1];
        return tuple ([i, row, col]);
    });}
});

//# sourceMappingURL=leo.core.leoFrame.map
</t>
<t tx="ekr.20201227092409.41">get py_clear () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.42">get disable () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.43">get enable () {return __get__ (this, function (self, background) {
    if (typeof background == 'undefined' || (background != null &amp;&amp; background.hasOwnProperty ("__kwargtrans__"))) {;
        var background = 'white';
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.44">get py_get () {return __get__ (this, function (self) {
    return '';
});},
</t>
<t tx="ekr.20201227092409.45">get isEnabled () {return __get__ (this, function (self) {
    return false;
});},
</t>
<t tx="ekr.20201227092409.46">get put () {return __get__ (this, function (self, s, bg, fg) {
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = null;
    };
    if (typeof fg == 'undefined' || (fg != null &amp;&amp; fg.hasOwnProperty ("__kwargtrans__"))) {;
        var fg = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.47">get setFocus () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.48">    get py_update () {return __get__ (this, function (self) {
        // pass;
    });}
});
export var TreeAPI =  __class__ ('TreeAPI', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.49">get __init__ () {return __get__ (this, function (self, frame) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.5">@path c:/vs-code-devel/leojs4/
// Just g.trace. Culled from Transcrypt'ed from Python, 2020-12-26 11:09:55
var inspect = {};
var re = {};
var sys = {};
var time = {};
import {
    AssertionError, AttributeError, BaseException, DeprecationWarning, Exception,
    IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration,
    UserWarning, ValueError, Warning,
    __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__,
    __envir__, __eq__, __floordiv__,
    __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__,
    __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__,
    __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__,
    __jsUsePyNext__, __jsmod__,
    __k__, __kwargtrans__,
    __le__, __lshift__, __lt__,
    __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__,
    __ne__, __neg__, __nest__, __or__,
    __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__,
    __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__,
    __t__, __terminal__, __truediv__,
    __withblock__, __xor__,
    abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy,
    deepcopy, delattr, dict, dir, divmod, enumerate,
    filter, float, getattr, hasattr, input, int,
    isinstance, issubclass, len, list, map, max, min, object, ord,
    pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof,
    range, repr, round, set, setattr, sorted, str, sum, tuple, zip
} from './src/org.transcrypt.__runtime__.js';
//// import {} from './time.js';
const time = require('./time')
//// import {leoGlobals as leo_g} from './leo.core.js';
const g = require('./leo.core.leoGlobals')
//// import {leoApp} from './leo.core.js';
//// import * as leo_g from './leo.core.leoGlobals.js';
//// import {leoCommands} from './leo.core.js';
const leoCommands = require('./leo.core')
//// import * as leoCommands from './leo.core.leoCommands.js';
//// import * as __module_time__ from './time.js';
//// __nest__ (time, '', __module_time__);
//// import * as __module_sys__ from './sys.js';
//// __nest__ (sys, '', __module_sys__);
//// //// import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
//// import * as __module_inspect__ from './inspect.js';
//// __nest__ (inspect, '', __module_inspect__);

var __name__ = 'leoGlobals';

@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.50">get drawIcon () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.51">get editLabel () {return __get__ (this, function (self, v, selectAll, selection) {
    if (typeof selectAll == 'undefined' || (selectAll != null &amp;&amp; selectAll.hasOwnProperty ("__kwargtrans__"))) {;
        var selectAll = false;
    };
    if (typeof selection == 'undefined' || (selection != null &amp;&amp; selection.hasOwnProperty ("__kwargtrans__"))) {;
        var selection = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.52">get edit_widget () {return __get__ (this, function (self, p) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.53">get redraw () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    // pass;
});},
redraw_now: redraw,
</t>
<t tx="ekr.20201227092409.54">get scrollTo () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.55">get initAfterLoad () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.56">get onHeadChanged () {return __get__ (this, function (self, p, undoType, s, e) {
    if (typeof undoType == 'undefined' || (undoType != null &amp;&amp; undoType.hasOwnProperty ("__kwargtrans__"))) {;
        var undoType = 'Typing';
    };
    if (typeof s == 'undefined' || (s != null &amp;&amp; s.hasOwnProperty ("__kwargtrans__"))) {;
        var s = null;
    };
    if (typeof e == 'undefined' || (e != null &amp;&amp; e.hasOwnProperty ("__kwargtrans__"))) {;
        var e = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.57">get redraw_after_contract () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.58">get redraw_after_expand () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.59">get redraw_after_head_changed () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.6">export var trace = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var d = dict ({'align': 0, 'before': '', 'newline': true, 'caller_level': 1, 'noname': false});
    var d = doKeywordArgs (py_keys, d);
    var newline = d.py_get ('newline');
    var align = d.py_get ('align', 0);
    var caller_level = d.py_get ('caller_level', 1);
    var noname = d.py_get ('noname');
    if (noname) {
        var py_name = '';
    }
    else {
        try {
            var f1 = sys._getframe (caller_level);
            var code1 = f1.f_code;
            var py_name = code1.co_name;
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
            }
            else {
                throw __except0__;
            }
        }
        if (py_name == '&lt;module&gt;') {
            var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
        }
        if (py_name.endswith ('.pyc')) {
            var py_name = py_name.__getslice__ (0, -(1), 1);
        }
    }
    if (align != 0 &amp;&amp; len (py_name) &lt; abs (align)) {
        var pad = ' ' * (abs (align) - len (py_name));
        if (align &gt; 0) {
            var py_name = py_name + pad;
        }
        else {
            var py_name = pad + py_name;
        }
    }
    var result = (py_name ? [py_name] : []);
    if (isinstance (args, tuple)) {
        var args = list (args);
    }
    if (args &amp;&amp; isString (args [0])) {
        var prefix = '';
        while (args [0].startswith ('\n')) {
            prefix += '\n';
            args [0] = args [0].__getslice__ (1, null, 1);
        }
    }
    else {
        var prefix = '';
    }
    for (var arg of args) {
        if (isString (arg)) {
            // pass;
        }
        else if (isBytes (arg)) {
            var arg = toUnicode (arg);
        }
        else {
            var arg = repr (arg);
        }
        if (result) {
            result.append (' ' + arg);
        }
        else {
            result.append (arg);
        }
    }
    var s = d.py_get ('before') + ''.join (result);
    if (prefix) {
        var prefix = prefix.__getslice__ (1, null, 1);
        pr (prefix);
    }
    pr (s, __kwargtrans__ ({newline: newline}));
};

</t>
<t tx="ekr.20201227092409.60">get redraw_after_icons_changed () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.61">get redraw_after_select () {return __get__ (this, function (self, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.62">get OnIconCtrlClick () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.63">get endEditLabel () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.64">get getEditTextDict () {return __get__ (this, function (self, v) {
    return null;
});},
</t>
<t tx="ekr.20201227092409.65">get injectCallbacks () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.66">get onHeadlineKey () {return __get__ (this, function (self, event) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.67">get select () {return __get__ (this, function (self, p) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.68">    get updateHead () {return __get__ (this, function (self, event, w) {
        // pass;
    });}
});
export var WrapperAPI =  __class__ ('WrapperAPI', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.69">get __init__ () {return __get__ (this, function (self, c) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.7">export var pr = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var d = dict ({'commas': false, 'newline': true, 'spaces': true});
    var d = doKeywordArgs (py_keys, d);
    var newline = d.py_get ('newline');
    var stdout = (sys.stdout &amp;&amp; g.unitTesting ? sys.stdout : sys.__stdout__);
    if (!(stdout)) {
        return ;
    }
    if (sys.platform.lower ().startswith ('win')) {
        var encoding = 'ascii';
    }
    else if (getattr (stdout, 'encoding', null)) {
        var encoding = stdout.encoding;
    }
    else {
        var encoding = 'utf-8';
    }
    var s = translateArgs (args, d);
    var s = g.toUnicode (s, __kwargtrans__ ({encoding: encoding, reportErrors: false}));
    if (newline) {
        s += '\n';
    }
    try {
        stdout.write (s);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            // pass;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092409.70">get appendText () {return __get__ (this, function (self, s) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.71">get clipboard_append () {return __get__ (this, function (self, s) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.72">get clipboard_clear () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.73">get delete () {return __get__ (this, function (self, i, j) {
    if (typeof j == 'undefined' || (j != null &amp;&amp; j.hasOwnProperty ("__kwargtrans__"))) {;
        var j = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.74">get deleteTextSelection () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.75">get disable () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.76">get enable () {return __get__ (this, function (self, enabled) {
    if (typeof enabled == 'undefined' || (enabled != null &amp;&amp; enabled.hasOwnProperty ("__kwargtrans__"))) {;
        var enabled = true;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.77">get flashCharacter () {return __get__ (this, function (self, i, bg, fg, flashes, delay) {
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = 'white';
    };
    if (typeof fg == 'undefined' || (fg != null &amp;&amp; fg.hasOwnProperty ("__kwargtrans__"))) {;
        var fg = 'red';
    };
    if (typeof flashes == 'undefined' || (flashes != null &amp;&amp; flashes.hasOwnProperty ("__kwargtrans__"))) {;
        var flashes = 3;
    };
    if (typeof delay == 'undefined' || (delay != null &amp;&amp; delay.hasOwnProperty ("__kwargtrans__"))) {;
        var delay = 75;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.78">get py_get () {return __get__ (this, function (self, i, j) {
    return '';
});},
</t>
<t tx="ekr.20201227092409.79">get getAllText () {return __get__ (this, function (self) {
    return '';
});},
</t>
<t tx="ekr.20201227092409.8">@path c:/vs-code-devel/leojs4/
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = require('vscode');
const app = require('./dummyLeoApp')

// import {test} from './src/dummyLeoApp.js';

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed

/**
 * @param {vscode.ExtensionContext} context
 */
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092409.80">get getInsertPoint () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.81">get getSelectedText () {return __get__ (this, function (self) {
    return '';
});},
</t>
<t tx="ekr.20201227092409.82">get getSelectionRange () {return __get__ (this, function (self) {
    return tuple ([0, 0]);
});},
</t>
<t tx="ekr.20201227092409.83">get getXScrollPosition () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.84">get getYScrollPosition () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.85">get hasSelection () {return __get__ (this, function (self) {
    return false;
});},
</t>
<t tx="ekr.20201227092409.86">get insert () {return __get__ (this, function (self, i, s) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.87">get see () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.88">get seeInsertPoint () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.89">get selectAllText () {return __get__ (this, function (self, insert) {
    if (typeof insert == 'undefined' || (insert != null &amp;&amp; insert.hasOwnProperty ("__kwargtrans__"))) {;
        var insert = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.9">function activate(context) {
    // Executed ONCE!
    console.log('===== leojs active =====');

    // leojs must match "command" field in package.json
    let disposable = vscode.commands.registerCommand('extension.leojs', () =&gt; {
        // ===== Put command code here.
        // import main from ".src/dummyLeoApp.js"
        console.log("Before")
        vscode.window.showInformationMessage('BEFORE');
        app.test()
        console.log("after")
        vscode.window.showInformationMessage('AFTER');
    });

    context.subscriptions.push(disposable);
}

// Called when the extension is deactivated
function deactivate() {}

// eslint-disable-next-line no-undef
module.exports = {
    activate,
    deactivate
}
</t>
<t tx="ekr.20201227092409.90">get setAllText () {return __get__ (this, function (self, s) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.91">get setFocus () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.92">get setInsertPoint () {return __get__ (this, function (self, pos, s) {
    if (typeof s == 'undefined' || (s != null &amp;&amp; s.hasOwnProperty ("__kwargtrans__"))) {;
        var s = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.93">get setSelectionRange () {return __get__ (this, function (self, i, j, insert) {
    if (typeof insert == 'undefined' || (insert != null &amp;&amp; insert.hasOwnProperty ("__kwargtrans__"))) {;
        var insert = null;
    };
    // pass;
});},
</t>
<t tx="ekr.20201227092409.94">get setXScrollPosition () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.95">get setYScrollPosition () {return __get__ (this, function (self, i) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.96">get tag_configure () {return __get__ (this, function (self, colorName) {
    // pass;
});},
</t>
<t tx="ekr.20201227092409.97">get toPythonIndex () {return __get__ (this, function (self, index) {
    return 0;
});},
</t>
<t tx="ekr.20201227092409.98">    get toPythonIndexRowCol () {return __get__ (this, function (self, index) {
        return tuple ([0, 0, 0]);
    });}
});
export var IconBarAPI =  __class__ ('IconBarAPI', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092409.99">get __init__ () {return __get__ (this, function (self, c, parentFrame) {
    // pass;
});},
</t>
<t tx="ekr.20201227092410.1">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:09:55
var inspect = {};
var re = {};
var sys = {};
var time = {};
/// import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
//// import {} from './time.js';
const time = require('./time')
//// import {leoGlobals as leo_g} from './leo.core.js';
const g = require('./leo.core.leoGlobals')
//// import {leoApp} from './leo.core.js';
//// import * as leo_g from './leo.core.leoGlobals.js';
//// import {leoCommands} from './leo.core.js';
const leoCommands = require('./leo.core')
//// import * as leoCommands from './leo.core.leoCommands.js';
//// import * as __module_time__ from './time.js';
//// __nest__ (time, '', __module_time__);
//// import * as __module_sys__ from './sys.js';
//// __nest__ (sys, '', __module_sys__);
//// //// import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
//// import * as __module_inspect__ from './inspect.js';
//// __nest__ (inspect, '', __module_inspect__);
var __name__ = 'leoGlobals';
// export var in_bridge = false;
// export var minimum_python_version = '3.6';
// export var isPython3 = sys.version_info &gt;= tuple ([3, 0, 0]);
// // export var isMac = sys.platform.startswith ('darwin');
// export var isWindows = sys.platform.startswith ('win');
// export var globalDirectiveList = ['all', 'beautify', 'colorcache', 'code', 'color', 'comment', 'c', 'delims', 'doc', 'encoding', 'end_raw', 'first', 'header', 'ignore', 'killbeautify', 'killcolor', 'language', 'last', 'lineending', 'markup', 'nobeautify', 'nocolor-node', 'nocolor', 'noheader', 'nowrap', 'nopyflakes', 'nosearch', 'others', 'pagewidth', 'path', 'quiet', 'raw', 'root-code', 'root-doc', 'root', 'silent', 'tabwidth', 'terse', 'unit', 'verbose', 'wrap'];
// export var directives_pat = null;
// export var global_commands_dict = dict ({});
// export var cmd_instance_dict = dict ({'AbbrevCommandsClass': ['c', 'abbrevCommands'], 'AtFile': ['c', 'atFileCommands'], 'AutoCompleterClass': ['c', 'k', 'autoCompleter'], 'ChapterController': ['c', 'chapterController'], 'Commands': ['c'], 'ControlCommandsClass': ['c', 'controlCommands'], 'DebugCommandsClass': ['c', 'debugCommands'], 'EditCommandsClass': ['c', 'editCommands'], 'EditFileCommandsClass': ['c', 'editFileCommands'], 'FileCommands': ['c', 'fileCommands'], 'HelpCommandsClass': ['c', 'helpCommands'], 'KeyHandlerClass': ['c', 'k'], 'KeyHandlerCommandsClass': ['c', 'keyHandlerCommands'], 'KillBufferCommandsClass': ['c', 'killBufferCommands'], 'LeoApp': ['g', 'app'], 'LeoFind': ['c', 'findCommands'], 'LeoImportCommands': ['c', 'importCommands'], 'PrintingController': ['c', 'printingController'], 'RectangleCommandsClass': ['c', 'rectangleCommands'], 'RstCommands': ['c', 'rstCommands'], 'SpellCommandsClass': ['c', 'spellCommands'], 'Undoer': ['c', 'undoer'], 'VimCommands': ['c', 'vimCommands']});
// export var callback = function (func) {
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092410.100">    get write () {return __get__ (this, function (self, s) {
        if (self.old) {
            if (app.log) {
                app.log.put (s, __kwargtrans__ ({from_redirect: true}));
            }
            else {
                self.old.write (s + '\n');
            }
        }
        else {
            g.pr (s);
        }
    });}
});
export var redirectStdErrObj = RedirectClass ();
export var redirectStdOutObj = RedirectClass ();
</t>
<t tx="ekr.20201227092410.101">export var redirectStderr = function () {
    redirectStdErrObj.redirect (__kwargtrans__ ({stdout: false}));
};
</t>
<t tx="ekr.20201227092410.102">export var redirectStdout = function () {
    redirectStdOutObj.redirect ();
};
</t>
<t tx="ekr.20201227092410.103">export var restoreStderr = function () {
    redirectStdErrObj.undirect (__kwargtrans__ ({stdout: false}));
};
</t>
<t tx="ekr.20201227092410.104">export var restoreStdout = function () {
    redirectStdOutObj.undirect ();
};
</t>
<t tx="ekr.20201227092410.105">export var stdErrIsRedirected = function () {
    return redirectStdErrObj.isRedirected ();
};
</t>
<t tx="ekr.20201227092410.106">export var stdOutIsRedirected = function () {
    return redirectStdOutObj.isRedirected ();
};
</t>
<t tx="ekr.20201227092410.107">export var rawPrint = function (s) {
    redirectStdOutObj.rawPrint (s);
};
export var SherlockTracer =  __class__ ('SherlockTracer', [object], {
    __module__: __name__,
    bad_fns: 
    ignored_files: 
    ignored_functions: 
});
export var TkIDDialog =  __class__ ('TkIDDialog', [EmergencyDialog], {
    __module__: __name__,
    message: 'leoID.txt not found\n\nPlease enter an id that identifies you uniquely.\nYour git/cvs/bzr login name is a good choice.\n\nLeo uses this id to uniquely identify nodes.\n\nYour id should contain only letters and numbers\nand must be at least 3 characters in length.',
    title: 'Enter Leo id',
</t>
<t tx="ekr.20201227092410.108">    get __init__ () {return __get__ (this, function (self) {
        __super__ (TkIDDialog, '__init__') (self, self.title, self.message);
        self.val = '';
    });}
});
export var Tracer =  __class__ ('Tracer', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.109">get __init__ () {return __get__ (this, function (self, limit, trace, verbose) {
    if (typeof limit == 'undefined' || (limit != null &amp;&amp; limit.hasOwnProperty ("__kwargtrans__"))) {;
        var limit = 0;
    };
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    self.callDict = dict ({});
    self.calledDict = dict ({});
    self.count = 0;
    self.inited = false;
    self.limit = limit;
    self.stack = [];
    self.trace = trace;
    self.verbose = verbose;
});},
</t>
<t tx="ekr.20201227092410.11">export var ivars2instance = function (c, g, ivars) {
    if (!(ivars)) {
        g.trace ('can not happen: no ivars');
        return null;
    }
    var ivar = ivars [0];
    if (!__in__ (ivar, tuple (['c', 'g']))) {
        g.trace ('can not happen: unknown base', ivar);
        return null;
    }
    var obj = (ivar == 'c' ? c : g);
    for (var ivar of ivars.__getslice__ (1, null, 1)) {
        var obj = getattr (obj, ivar, null);
        if (!(obj)) {
            g.trace ('can not happen: unknown attribute', obj, ivar, ivars);
            break;
        }
    }
    return obj;
};
</t>
<t tx="ekr.20201227092410.110">get computeName () {return __get__ (this, function (self, frame) {
    if (!(frame)) {
        return '';
    }
    var code = frame.f_code;
    var result = [];
    var module = inspect.getmodule (code);
    if (module) {
        var module_name = module.__name__;
        if (module_name == 'leo.core.leoGlobals') {
            result.append ('g');
        }
        else {
            var tag = 'leo.core.';
            if (module_name.startswith (tag)) {
                var module_name = module_name.__getslice__ (len (tag), null, 1);
            }
            result.append (module_name);
        }
    }
    try {
        var self_obj = frame.f_locals.py_get ('self');
        if (self_obj) {
            result.append (self_obj.__class__.__name__);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            // pass;
        }
        else {
            throw __except0__;
        }
    }
    result.append (code.co_name);
    return '.'.join (result);
});},
</t>
<t tx="ekr.20201227092410.111">get report () {return __get__ (this, function (self) {
    if (0) {
        g.pr ('\nstack');
        for (var z of self.stack) {
            g.pr (z);
        }
    }
    g.pr ('\ncallDict...');
    for (var key of sorted (self.callDict)) {
        g.pr ('{}'.format (self.calledDict.py_get (key, 0)), key);
        var d = self.callDict.py_get (key);
        for (var key2 of sorted (d)) {
            g.pr ('{}'.format (d.py_get (key2)), key2);
        }
    }
});},
</t>
<t tx="ekr.20201227092410.112">get stop () {return __get__ (this, function (self) {
    sys.settrace (null);
    self.report ();
});},
</t>
<t tx="ekr.20201227092410.113">get tracer () {return __get__ (this, function (self, frame, event, arg) {
    var n = len (self.stack);
    if (event == 'return') {
        var n = max (0, n - 1);
    }
    var pad = '.' * n;
    if (event == 'call') {
        if (!(self.inited)) {
            self.inited = true;
            var py_name = self.computeName (frame.f_back);
            self.updateStats (py_name);
            self.stack.append (py_name);
        }
        var py_name = self.computeName (frame);
        if (self.trace &amp;&amp; (self.limit == 0 || len (self.stack) &lt; self.limit)) {
            g.trace ('{}call'.format (pad), py_name);
        }
        self.updateStats (py_name);
        self.stack.append (py_name);
        return self.tracer;
    }
    if (event == 'return') {
        if (self.stack) {
            var py_name = self.stack.py_pop ();
            if (self.trace &amp;&amp; self.verbose &amp;&amp; (self.limit == 0 || len (self.stack) &lt; self.limit)) {
                g.trace ('{}ret '.format (pad), py_name);
            }
        }
        else {
            g.trace ('return underflow');
            self.stop ();
            return null;
        }
        if (self.stack) {
            return self.tracer;
        }
        self.stop ();
        return null;
    }
    return self.tracer;
});},
</t>
<t tx="ekr.20201227092410.114">    get updateStats () {return __get__ (this, function (self, py_name) {
        if (!(self.stack)) {
            return ;
        }
        var caller = self.stack [-(1)];
        var d = self.callDict.py_get (caller, dict ({}));
        d [py_name] = 1 + d.py_get (py_name, 0);
        self.callDict [caller] = d;
        self.calledDict [py_name] = 1 + self.calledDict.py_get (py_name, 0);
    });}
});
</t>
<t tx="ekr.20201227092410.115">export var startTracer = function (limit, trace, verbose) {
    if (typeof limit == 'undefined' || (limit != null &amp;&amp; limit.hasOwnProperty ("__kwargtrans__"))) {;
        var limit = 0;
    };
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    var t = g.Tracer (__kwargtrans__ ({limit: limit, trace: trace, verbose: verbose}));
    sys.settrace (t.tracer);
    return t;
};
export var tracing_tags = dict ({});
export var tracing_vars = dict ({});
export var tracing_signatures = dict ({});
export var NullObject =  __class__ ('NullObject', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.116">get __init__ () {return __get__ (this, function (self, ivars) {
    if (typeof ivars == 'undefined' || (ivars != null &amp;&amp; ivars.hasOwnProperty ("__kwargtrans__"))) {;
        var ivars = null;
    };
    var args = tuple ([].slice.apply (arguments).slice (2));
    if (isinstance (ivars, str)) {
        var ivars = [ivars];
    }
    tracing_vars [id (self)] = ivars || [];
});},
</t>
<t tx="ekr.20201227092410.117">get __call__ () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    return self;
});},
</t>
<t tx="ekr.20201227092410.118">get __repr__ () {return __get__ (this, function (self) {
    return 'NullObject';
});},
</t>
<t tx="ekr.20201227092410.119">get __str__ () {return __get__ (this, function (self) {
    return 'NullObject';
});},
</t>
<t tx="ekr.20201227092410.12">export var new_cmd_decorator = function (py_name, ivars) {
    var _decorator = function (func) {
        @others
    };
    return _decorator;
};
export var g_language_pat = re.compile ('^@language\\s+(\\w+)+', re.MULTILINE);
export var g_is_directive_pattern = re.compile ('^\\s*@([\\w-]+)\\s*');
export var g_noweb_root = re.compile ((((('&lt;' + '&lt;') + '*') + '&gt;') + '&gt;') + '=', re.MULTILINE);
export var g_pos_pattern = re.compile (':(\\d+),?(\\d+)?,?([-\\d]+)?,?(\\d+)?$');
export var g_tabwidth_pat = re.compile ('(^@tabwidth)', re.MULTILINE);
export var tree_popup_handlers = [];
export var user_dict = dict ({});
export var app = null;
export var inScript = false;
export var unitTesting = false;
</t>
<t tx="ekr.20201227092410.120">get __delattr__ () {return __get__ (this, function (self, attr) {
    return null;
});},
</t>
<t tx="ekr.20201227092410.121">get __getattr__ () {return __get__ (this, function (self, attr) {
    if (__in__ (attr, tracing_vars.py_get (id (self), []))) {
        return getattr (self, attr, null);
    }
    return self;
});},
</t>
<t tx="ekr.20201227092410.122">get __setattr__ () {return __get__ (this, function (self, attr, val) {
    if (__in__ (attr, tracing_vars.py_get (id (self), []))) {
        object.__setattr__ (self, attr, val);
    }
});},
</t>
<t tx="ekr.20201227092410.123">get __bool__ () {return __get__ (this, function (self) {
    return false;
});},
</t>
<t tx="ekr.20201227092410.124">get __contains__ () {return __get__ (this, function (self, item) {
    return false;
});},
</t>
<t tx="ekr.20201227092410.125">get __getitem__ () {return __get__ (this, function (self, key) {
    var __except0__ = KeyError;
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092410.126">get __setitem__ () {return __get__ (this, function (self, key, val) {
    // pass;
});},
</t>
<t tx="ekr.20201227092410.127">get __iter__ () {return __get__ (this, function (self) {
    return self;
});},
[Symbol.iterator] () {return this.__iter__ ()},
</t>
<t tx="ekr.20201227092410.128">get __len__ () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092410.129">    get __next__ () {return __get__ (this, function (self) {
        var __except0__ = StopIteration;
        __except0__.__cause__ = null;
        throw __except0__;
    });},
    next: __jsUsePyNext__
});
export var TracingNullObject =  __class__ ('TracingNullObject', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.13"></t>
<t tx="ekr.20201227092410.130">get __init__ () {return __get__ (this, function (self, tag, ivars) {
    if (typeof ivars == 'undefined' || (ivars != null &amp;&amp; ivars.hasOwnProperty ("__kwargtrans__"))) {;
        var ivars = null;
    };
    var args = tuple ([].slice.apply (arguments).slice (3));
    tracing_tags [id (self)] = tag;
    if (isinstance (ivars, str)) {
        var ivars = [ivars];
    }
    tracing_vars [id (self)] = ivars || [];
    if (0) {
        var suppress = tuple (['tree item']);
        if (!__in__ (tag, suppress)) {
            print ('=' * 10, 'NullObject.__init__:', id (self), tag);
        }
    }
});},
</t>
<t tx="ekr.20201227092410.131">get __call__ () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    if (0) {
        var suppress = tuple (['PyQt5.QtGui.QIcon', 'LeoQtTree.onItemCollapsed']);
        for (var z of suppress) {
            if (!__in__ (z, repr (args))) {
                print (__mod__ ('%30s'.format (), 'NullObject.__call__:'), args, kwargs);
            }
        }
    }
    return self;
});},
</t>
<t tx="ekr.20201227092410.132">get __repr__ () {return __get__ (this, function (self) {
    return 'TracingNullObject: {}'.format (tracing_tags.py_get (id (self), '&lt;NO TAG&gt;'));
});},
</t>
<t tx="ekr.20201227092410.133">get __str__ () {return __get__ (this, function (self) {
    return 'TracingNullObject: {}'.format (tracing_tags.py_get (id (self), '&lt;NO TAG&gt;'));
});},
</t>
<t tx="ekr.20201227092410.134">get __delattr__ () {return __get__ (this, function (self, attr) {
    return self;
});},
</t>
<t tx="ekr.20201227092410.135">get __getattr__ () {return __get__ (this, function (self, attr) {
    null_object_print_attr (id (self), attr);
    if (__in__ (attr, tracing_vars.py_get (id (self), []))) {
        return getattr (self, attr, null);
    }
    return self;
});},
</t>
<t tx="ekr.20201227092410.136">get __setattr__ () {return __get__ (this, function (self, attr, val) {
    g.null_object_print (id (self), '__setattr__', attr, val);
    if (__in__ (attr, tracing_vars.py_get (id (self), []))) {
        object.__setattr__ (self, attr, val);
    }
});},
</t>
<t tx="ekr.20201227092410.137">get __bool__ () {return __get__ (this, function (self) {
    if (0) {
        var suppress = tuple (['getShortcut', 'on_idle', 'setItemText']);
        var callers = g.callers (2);
        if (!(callers.endswith (suppress))) {
            g.null_object_print (id (self), '__bool__');
        }
    }
    return false;
});},
</t>
<t tx="ekr.20201227092410.138">get __contains__ () {return __get__ (this, function (self, item) {
    g.null_object_print (id (self), '__contains__');
    return false;
});},
</t>
<t tx="ekr.20201227092410.139">get __getitem__ () {return __get__ (this, function (self, key) {
    g.null_object_print (id (self), '__getitem__');
});},
</t>
<t tx="ekr.20201227092410.14">var new_cmd_wrapper = function (event) {
    var c = event.c;
    var self = g.ivars2instance (c, g, ivars);
    try {
        func (self, __kwargtrans__ ({event: event}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
};
new_cmd_wrapper.__func_name__ = func.__name__;
new_cmd_wrapper.__name__ = py_name;
new_cmd_wrapper.__doc__ = func.__doc__;
global_commands_dict [py_name] = new_cmd_wrapper;
return func;
</t>
<t tx="ekr.20201227092410.140">get __iter__ () {return __get__ (this, function (self) {
    g.null_object_print (id (self), '__iter__');
    return self;
});},
[Symbol.iterator] () {return this.__iter__ ()},
</t>
<t tx="ekr.20201227092410.141">get __len__ () {return __get__ (this, function (self) {
    return 0;
});},
</t>
<t tx="ekr.20201227092410.142">get __next__ () {return __get__ (this, function (self) {
    g.null_object_print (id (self), '__next__');
    var __except0__ = StopIteration;
    __except0__.__cause__ = null;
    throw __except0__;
});},
next: __jsUsePyNext__,
</t>
<t tx="ekr.20201227092410.143">    get __setitem__ () {return __get__ (this, function (self, key, val) {
        g.null_object_print (id (self), '__setitem__');
    });}
});
</t>
<t tx="ekr.20201227092410.144">export var null_object_print_attr = function (id_, attr) {
    var suppress = true;
    if (suppress) {
        var suppress_callers = tuple (['drawNode', 'drawTopTree', 'drawTree', 'contractItem', 'getCurrentItem', 'declutter_node', 'finishCreate', 'initAfterLoad', 'show_tips', 'writeWaitingLog']);
        var suppress_attrs = tuple (['c.frame.body.wrapper', 'c.frame.getIconBar.add', 'c.frame.log.createTab', 'c.frame.log.enable', 'c.frame.log.finishCreate', 'c.frame.menu.createMenuBar', 'c.frame.menu.finishCreate', 'currentItem', 'dw.leo_master.windowTitle', 'pyzo.keyMapper.connect', 'pyzo.keyMapper.keyMappingChanged', 'pyzo.keyMapper.setShortcut']);
    }
    else {
        var suppress_callers = [];
        var suppress_attrs = [];
    }
    var tag = tracing_tags.py_get (id_, '&lt;NO TAG&gt;');
    var callers = g.callers (3).py_split (',');
    var callers = ','.join (callers.__getslice__ (0, -(1), 1));
    var in_callers = any ((function () {
        var __accu0__ = [];
        for (var z of suppress_callers) {
            __accu0__.append (__in__ (z, callers));
        }
        return __accu0__;
    }) ());
    var s = '{}.{}'.format (tag, attr);
    if (suppress) {
        if (!(in_callers) &amp;&amp; !__in__ (s, suppress_attrs)) {
            g.pr ('{} {}'.format (s, callers));
        }
    }
    else {
        var signature = '{}.{}:{}'.format (tag, attr, callers);
        if (!__in__ (signature, tracing_signatures)) {
            tracing_signatures [signature] = true;
            g.pr ('{} {}'.format (s, callers));
        }
    }
};
</t>
<t tx="ekr.20201227092410.146">export var null_object_print = function (id_, kind) {
    var args = tuple ([].slice.apply (arguments).slice (2));
    var tag = tracing_tags.py_get (id_, '&lt;NO TAG&gt;');
    var callers = g.callers (3).py_split (',');
    var callers = ','.join (callers.__getslice__ (0, -(1), 1));
    var s = '{}.{}'.format (kind, tag);
    var signature = '{}:{}'.format (s, callers);
    if (1) {
        if (args) {
            var args = ', '.join ((function () {
                var __accu0__ = [];
                for (var z of args) {
                    __accu0__.append (repr (z));
                }
                return __accu0__;
            }) ());
            g.pr ('{} {}\n\t\t\targs: {}'.format (s, callers, args));
        }
        else {
            g.pr ('{} {}'.format (s, callers));
        }
    }
    else if (!__in__ (signature, tracing_signatures)) {
        tracing_signatures [signature] = true;
        g.pr ('{} {}'.format (s, callers));
    }
};
export var TypedDict =  __class__ ('TypedDict', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.148">get __init__ () {return __get__ (this, function (self, py_name, keyType, valType) {
    self.d = dict ({});
    self._name = py_name;
    self.keyType = keyType;
    self.valType = valType;
});},
</t>
<t tx="ekr.20201227092410.149">get __str__ () {return __get__ (this, function (self) {
    return '&lt;TypedDict name:{} keys:{} values:{} len(keys): {}&gt;'.format (self._name, self.keyType.__name__, self.valType.__name__, len (list (self.py_keys ())));
});},
</t>
<t tx="ekr.20201227092410.15">export var standard_timestamp = function () {
    return time.strftime ('%Y%m%d-%H%M%S');
};
</t>
<t tx="ekr.20201227092410.150">get __repr__ () {return __get__ (this, function (self) {
    return '{}\n{}\n'.format (g.dictToString (self.d), str (self));
});},
</t>
<t tx="ekr.20201227092410.151">get __setitem__ () {return __get__ (this, function (self, key, val) {
    if (key === null) {
        g.trace ('TypeDict: None is not a valid key', g.callers ());
        return ;
    }
    self._checkKeyType (key);
    self._checkKeyType (key);
    try {
        for (var z of val) {
            self._checkValType (z);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, py_TypeError)) {
            self._checkValType (val);
        }
        else {
            throw __except0__;
        }
    }
    self.d [key] = val;
});},
</t>
<t tx="ekr.20201227092410.152">get add_to_list () {return __get__ (this, function (self, key, val) {
    if (key === null) {
        g.trace ('TypeDict: None is not a valid key', g.callers ());
        return ;
    }
    self._checkKeyType (key);
    self._checkValType (val);
    var aList = self.d.py_get (key, []);
    if (!__in__ (val, aList)) {
        aList.append (val);
        self.d [key] = aList;
    }
});},
</t>
<t tx="ekr.20201227092410.153">get _checkKeyType () {return __get__ (this, function (self, key) {
    if (key &amp;&amp; key.__class__ != self.keyType) {
        self._reportTypeError (key, self.keyType);
    }
});},
</t>
<t tx="ekr.20201227092410.154">get _checkValType () {return __get__ (this, function (self, val) {
    if (val.__class__ != self.valType) {
        self._reportTypeError (val, self.valType);
    }
});},
</t>
<t tx="ekr.20201227092410.155">get _reportTypeError () {return __get__ (this, function (self, obj, objType) {
    return '{}\nexpected: {}\n     got: {}'.format (self._name, obj.__class__.__name__, objType.__name__);
});},
</t>
<t tx="ekr.20201227092410.156">get copy () {return __get__ (this, function (self, py_name) {
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
});},
</t>
<t tx="ekr.20201227092410.157">get py_get () {return __get__ (this, function (self, key, py_default) {
    if (typeof py_default == 'undefined' || (py_default != null &amp;&amp; py_default.hasOwnProperty ("__kwargtrans__"))) {;
        var py_default = null;
    };
    return self.d.py_get (key, py_default);
});},
</t>
<t tx="ekr.20201227092410.158">get py_items () {return __get__ (this, function (self) {
    return self.d.py_items ();
});},
</t>
<t tx="ekr.20201227092410.159">get py_keys () {return __get__ (this, function (self) {
    return self.d.py_keys ();
});},
</t>
<t tx="ekr.20201227092410.16">export var get_backup_path = function (sub_directory) {
};
export var BindingInfo =  __class__ ('BindingInfo', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.160">get py_values () {return __get__ (this, function (self) {
    return self.d.py_values ();
});},
</t>
<t tx="ekr.20201227092410.161">get get_setting () {return __get__ (this, function (self, key) {
    var key = key.py_replace ('-', '').py_replace ('_', '');
    var gs = self.py_get (key);
    var val = gs &amp;&amp; gs.val;
    return val;
});},
</t>
<t tx="ekr.20201227092410.162">get get_string_setting () {return __get__ (this, function (self, key) {
    var val = self.get_setting (key);
    return (val &amp;&amp; isinstance (val, str) ? val : null);
});},
</t>
<t tx="ekr.20201227092410.163">get py_name () {return __get__ (this, function (self) {
    return self._name;
});},
</t>
<t tx="ekr.20201227092410.164">get setName () {return __get__ (this, function (self, py_name) {
    self._name = py_name;
});},
</t>
<t tx="ekr.20201227092410.165">    get py_update () {return __get__ (this, function (self, d) {
        if (isinstance (d, TypedDict)) {
            self.d.py_update (d.d);
        }
        else {
            self.d.py_update (d);
        }
    });}
});
export var UiTypeException =  __class__ ('UiTypeException', [Exception], {
    __module__: __name__,
});
</t>
<t tx="ekr.20201227092410.166">export var assertUi = function (uitype) {
    if (!(g.app.gui.guiName () == uitype)) {
        var __except0__ = UiTypeException;
        __except0__.__cause__ = null;
        throw __except0__;
    }
};
export var TestLeoGlobals =  __class__ ('TestLeoGlobals', [unittest.TestCase], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.167">get test_comment_delims_from_extension () {return __get__ (this, function (self) {
    leo_g.app = leoApp.LeoApp ();
});},
</t>
<t tx="ekr.20201227092410.168">    get test_is_sentinel () {return __get__ (this, function (self) {
        var py_delims = leo_g.comment_delims_from_extension ('.py');
        var c_delims = leo_g.comment_delims_from_extension ('.c');
        var html_delims = leo_g.comment_delims_from_extension ('.html');
    });}
});
</t>
<t tx="ekr.20201227092410.169">export var isTextWidget = function (w) {
    return g.app.gui.isTextWidget (w);
};
</t>
<t tx="ekr.20201227092410.17">get __init__ () {return __get__ (this, function (self, kind, commandName, func, nextMode, pane, stroke) {
    if (typeof commandName == 'undefined' || (commandName != null &amp;&amp; commandName.hasOwnProperty ("__kwargtrans__"))) {;
        var commandName = '';
    };
    if (typeof func == 'undefined' || (func != null &amp;&amp; func.hasOwnProperty ("__kwargtrans__"))) {;
        var func = null;
    };
    if (typeof nextMode == 'undefined' || (nextMode != null &amp;&amp; nextMode.hasOwnProperty ("__kwargtrans__"))) {;
        var nextMode = null;
    };
    if (typeof pane == 'undefined' || (pane != null &amp;&amp; pane.hasOwnProperty ("__kwargtrans__"))) {;
        var pane = null;
    };
    if (typeof stroke == 'undefined' || (stroke != null &amp;&amp; stroke.hasOwnProperty ("__kwargtrans__"))) {;
        var stroke = null;
    };
    if (!(g.isStrokeOrNone (stroke))) {
        g.trace ('***** (BindingInfo) oops', repr (stroke));
    }
    self.kind = kind;
    self.commandName = commandName;
    self.func = func;
    self.nextMode = nextMode;
    self.pane = pane;
    self.stroke = stroke;
});},
</t>
<t tx="ekr.20201227092410.170">export var isTextWrapper = function (w) {
    return g.app.gui.isTextWrapper (w);
};
</t>
<t tx="ekr.20201227092410.171">export var alert = function (message, c) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (!(g.unitTesting)) {
        g.es (message);
        g.app.gui.alert (c, message);
    }
};
</t>
<t tx="ekr.20201227092410.172">export var assert_is = function (obj, list_or_class, warn) {
    if (typeof warn == 'undefined' || (warn != null &amp;&amp; warn.hasOwnProperty ("__kwargtrans__"))) {;
        var warn = true;
    };
    if (warn) {
        var ok = isinstance (obj, list_or_class);
        if (!(ok)) {
            g.es_print ('can not happen. {}: expected {}, got: {}'.format (obj, list_or_class, obj.__class__.__name__));
            g.es_print (g.callers ());
        }
        return ok;
    }
    var ok = isinstance (obj, list_or_class);
    return ok;
};
</t>
<t tx="ekr.20201227092410.173">export var _assert = function (condition, show_callers) {
    if (typeof show_callers == 'undefined' || (show_callers != null &amp;&amp; show_callers.hasOwnProperty ("__kwargtrans__"))) {;
        var show_callers = true;
    };
    if (g.unitTesting) {
        return true;
    }
    var ok = bool (condition);
    if (ok) {
        return true;
    }
    g.es_print ('\n===== g._assert failed =====\n');
    if (show_callers) {
        g.es_print (g.callers ());
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.174">export var callers = function (n, count, excludeCaller, verbose) {
    if (typeof n == 'undefined' || (n != null &amp;&amp; n.hasOwnProperty ("__kwargtrans__"))) {;
        var n = 4;
    };
    if (typeof count == 'undefined' || (count != null &amp;&amp; count.hasOwnProperty ("__kwargtrans__"))) {;
        var count = 0;
    };
    if (typeof excludeCaller == 'undefined' || (excludeCaller != null &amp;&amp; excludeCaller.hasOwnProperty ("__kwargtrans__"))) {;
        var excludeCaller = true;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    var result = [];
    var i = (excludeCaller ? 3 : 2);
    while (1) {
        var s = _callerName (__kwargtrans__ ({n: i, verbose: verbose}));
        if (s) {
            result.append (s);
        }
        if (!(s) || len (result) &gt;= n) {
            break;
        }
        i++;
    }
    result.reverse ();
    if (count &gt; 0) {
        var result = result.__getslice__ (0, count, 1);
    }
    if (verbose) {
        return ''.join ((function () {
            var __accu0__ = [];
            for (var z of result) {
                __accu0__.append ('\n  {}'.format (z));
            }
            return __accu0__;
        }) ());
    }
    return ','.join (result);
};
</t>
<t tx="ekr.20201227092410.176">export var _callerName = function (n, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    try {
        var f1 = sys._getframe (n);
        var code1 = f1.f_code;
        var sfn = shortFilename (code1.co_filename);
        var locals_ = f1.f_locals;
        var py_name = code1.co_name;
        var line = code1.co_firstlineno;
        if (verbose) {
            var obj = locals_.py_get ('self');
            var full_name = (obj ? '{}.{}'.format (obj.__class__.__name__, py_name) : py_name);
            return 'line {} {} {}'.format (line, sfn, full_name);
        }
        return py_name;
    }
    catch (__except0__) {
        if (isinstance (__except0__, ValueError)) {
            return '';
        }
        else if (isinstance (__except0__, Exception)) {
            es_exception ();
            return '';
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.177">export var caller = function (i) {
    if (typeof i == 'undefined' || (i != null &amp;&amp; i.hasOwnProperty ("__kwargtrans__"))) {;
        var i = 1;
    };
    return g.callers (i + 1).py_split (',') [0];
};
</t>
<t tx="ekr.20201227092410.178">export var dump = function (s) {
    var out = '';
    for (var i of s) {
        out += str (ord (i)) + ',';
    }
    return out;
};
</t>
<t tx="ekr.20201227092410.179">export var oldDump = function (s) {
    var out = '';
    for (var i of s) {
        if (i == '\n') {
            out += '[';
            out += 'n';
            out += ']';
        }
        if (i == '\t') {
            out += '[';
            out += 't';
            out += ']';
        }
        else if (i == ' ') {
            out += '[';
            out += ' ';
            out += ']';
        }
        else {
            out += i;
        }
    }
    return out;
};
</t>
<t tx="ekr.20201227092410.18">get __hash__ () {return __get__ (this, function (self) {
    return (self.stroke ? self.stroke.__hash__ () : 0);
});},
</t>
<t tx="ekr.20201227092410.180">export var dump_encoded_string = function (encoding, s) {
    print ('dump_encoded_string: {}'.format (g.callers ()));
    print ('dump_encoded_string: encoding {}\n'.format (encoding));
    print (s);
    var in_comment = false;
    for (var ch of s) {
        if (ch == '#') {
            var in_comment = true;
        }
        else if (!(in_comment)) {
            print ('{} {}'.format (ord (ch), repr (ch)));
        }
        else if (ch == '\n') {
            var in_comment = false;
        }
    }
};
</t>
<t tx="ekr.20201227092410.181">export var module_date = function (mod, format) {
    if (typeof format == 'undefined' || (format != null &amp;&amp; format.hasOwnProperty ("__kwargtrans__"))) {;
        var format = null;
    };
    var theFile = g.os_path_join (app.loadDir, mod.__file__);
    var __left0__ = g.os_path_splitext (theFile);
    var root = __left0__ [0];
    var ext = __left0__ [1];
    return g.file_date (root + '.py', __kwargtrans__ ({format: format}));
};
</t>
<t tx="ekr.20201227092410.182">export var plugin_date = function (plugin_mod, format) {
    if (typeof format == 'undefined' || (format != null &amp;&amp; format.hasOwnProperty ("__kwargtrans__"))) {;
        var format = null;
    };
    var theFile = g.os_path_join (app.loadDir, '..', 'plugins', plugin_mod.__file__);
    var __left0__ = g.os_path_splitext (theFile);
    var root = __left0__ [0];
    var ext = __left0__ [1];
    return g.file_date (root + '.py', __kwargtrans__ ({format: format}));
};
</t>
<t tx="ekr.20201227092410.183">export var file_date = function (theFile, format) {
    if (typeof format == 'undefined' || (format != null &amp;&amp; format.hasOwnProperty ("__kwargtrans__"))) {;
        var format = null;
    };
    if (theFile &amp;&amp; g.os_path_exists (theFile)) {
        try {
            var n = g.os_path_getmtime (theFile);
            if (format === null) {
                var format = '%m/%d/%y %H:%M:%S';
            }
            return time.strftime (format, time.gmtime (n));
        }
        catch (__except0__) {
            if (isinstance (__except0__, tuple ([ImportError, NameError]))) {
                // pass;
            }
            else {
                throw __except0__;
            }
        }
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.184">export var get_line = function (s, i) {
    var nl = '';
    if (g.is_nl (s, i)) {
        var i = g.skip_nl (s, i);
        var nl = '[nl]';
    }
    var j = g.find_line_start (s, i);
    var k = g.skip_to_end_of_line (s, i);
    return nl + s.__getslice__ (j, k, 1);
};
</t>
<t tx="ekr.20201227092410.185">export var get_line_after = function (s, i) {
    var nl = '';
    if (g.is_nl (s, i)) {
        var i = g.skip_nl (s, i);
        var nl = '[nl]';
    }
    var k = g.skip_to_end_of_line (s, i);
    return nl + s.__getslice__ (i, k, 1);
};
export var getLineAfter = get_line_after;
</t>
<t tx="ekr.20201227092410.186">export var getIvarsDict = function (obj) {
    var d = dict ((function () {
        var __accu0__ = [];
        for (var key of dir (obj)) {
            if (!(isinstance (getattr (obj, key), types.MethodType))) {
                __accu0__.append ([key, getattr (obj, key)]);
            }
        }
        return __accu0__;
    }) ());
    return d;
};
</t>
<t tx="ekr.20201227092410.188">export var checkUnchangedIvars = function (obj, d, exceptions) {
    if (typeof exceptions == 'undefined' || (exceptions != null &amp;&amp; exceptions.hasOwnProperty ("__kwargtrans__"))) {;
        var exceptions = null;
    };
    if (!(exceptions)) {
        var exceptions = [];
    }
    var ok = true;
    for (var key of d) {
        if (!__in__ (key, exceptions)) {
            if (getattr (obj, key) != d.py_get (key)) {
                g.trace ('changed ivar: {} old: {} new: {}'.format (key, repr (d.py_get (key)), repr (getattr (obj, key))));
                var ok = false;
            }
        }
    }
    return ok;
};
</t>
<t tx="ekr.20201227092410.189">export var pause = function (s) {
    g.pr (s);
    var i = 0;
    while (i &lt; 1000 * 1000) {
        i++;
    }
};
</t>
<t tx="ekr.20201227092410.19">get __repr__ () {return __get__ (this, function (self) {
    return self.dump ();
});},
__str__: __repr__,
</t>
<t tx="ekr.20201227092410.190">export var pdb = function (message) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = '';
    };
};
</t>
<t tx="ekr.20201227092410.191">export var dictToString = function (d, indent, tag) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    if (!(d)) {
        return '{}';
    }
    var result = ['{\n'];
    var indent2 = indent + ' ' * 4;
    @others
};
</t>
<t tx="ekr.20201227092410.192">var n = (2 + len (indent)) + max ((function () {
    var __accu0__ = [];
    for (var z of d.py_keys ()) {
        __accu0__.append (len (repr (z)));
    }
    return __accu0__;
}) ());
</t>
<t tx="ekr.20201227092410.193">for (var [i, key] of enumerate (sorted (d, __kwargtrans__ ({key: (function __lambda__ (z) {
    return repr (z);
})})))) {
    var pad = ' ' * max (0, n - len (repr (key)));
    result.append ('{}{}:'.format (pad, key));
    result.append (objToString (d.py_get (key), __kwargtrans__ ({indent: indent2})));
    if (i + 1 &lt; len (d.py_keys ())) {
        result.append (',');
    }
    result.append ('\n');
}
result.append (indent + '}');
var s = ''.join (result);
return (tag ? '{}...\n{}\n'.format (tag, s) : s);
</t>
<t tx="ekr.20201227092410.194">export var listToString = function (obj, indent, tag) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    if (!(obj)) {
        return '[]';
    }
    var result = ['['];
    var indent2 = indent + ' ' * 4;
    for (var [i, obj2] of enumerate (obj)) {
        result.append ('\n' + indent2);
        result.append (objToString (obj2, __kwargtrans__ ({indent: indent2})));
        if ((i + 1 &lt; len (obj) &amp;&amp; len (obj) &gt; 1)) {
            result.append (',');
        }
        else {
            result.append ('\n' + indent);
        }
    }
    result.append (']');
    var s = ''.join (result);
    return (tag ? '{}...\n{}\n'.format (tag, s) : s);
};
</t>
<t tx="ekr.20201227092410.195">export var objToString = function (obj, indent, printCaller, tag) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof printCaller == 'undefined' || (printCaller != null &amp;&amp; printCaller.hasOwnProperty ("__kwargtrans__"))) {;
        var printCaller = false;
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    if (isinstance (obj, dict)) {
        var s = dictToString (obj, __kwargtrans__ ({indent: indent}));
    }
    else if (isinstance (obj, list)) {
        var s = listToString (obj, __kwargtrans__ ({indent: indent}));
    }
    else if (isinstance (obj, tuple)) {
        var s = tupleToString (obj, __kwargtrans__ ({indent: indent}));
    }
    else if (isinstance (obj, str)) {
        var s = obj;
        var lines = g.splitLines (s);
        if (len (lines) &gt; 1) {
            var s = listToString (lines, __kwargtrans__ ({indent: indent}));
        }
        else {
            var s = repr (s);
        }
    }
    else {
        var s = repr (obj);
    }
    if (printCaller &amp;&amp; tag) {
        var prefix = '{}: {}'.format (g.caller (), tag);
    }
    else if (printCaller || tag) {
        var prefix = (printCaller ? g.caller () : tag);
    }
    else {
        var prefix = null;
    }
    if (prefix) {
        var sep = (__in__ ('\n', s) ? '\n' : ' ');
        return '{}:{}{}'.format (prefix, sep, s);
    }
    return s;
};
export var toString = objToString;
</t>
<t tx="ekr.20201227092410.196">export var run_pylint = function (fn, rc, dots, patterns, sherlock, show_return, stats_patterns, verbose) {
    if (typeof dots == 'undefined' || (dots != null &amp;&amp; dots.hasOwnProperty ("__kwargtrans__"))) {;
        var dots = true;
    };
    if (typeof patterns == 'undefined' || (patterns != null &amp;&amp; patterns.hasOwnProperty ("__kwargtrans__"))) {;
        var patterns = null;
    };
    if (typeof sherlock == 'undefined' || (sherlock != null &amp;&amp; sherlock.hasOwnProperty ("__kwargtrans__"))) {;
        var sherlock = false;
    };
    if (typeof show_return == 'undefined' || (show_return != null &amp;&amp; show_return.hasOwnProperty ("__kwargtrans__"))) {;
        var show_return = true;
    };
    if (typeof stats_patterns == 'undefined' || (stats_patterns != null &amp;&amp; stats_patterns.hasOwnProperty ("__kwargtrans__"))) {;
        var stats_patterns = null;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
};
</t>
<t tx="ekr.20201227092410.197">export var sleep = function (n) {
    sleep (n);
};
</t>
<t tx="ekr.20201227092410.198">export var printObj = function (obj, indent, printCaller, tag) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof printCaller == 'undefined' || (printCaller != null &amp;&amp; printCaller.hasOwnProperty ("__kwargtrans__"))) {;
        var printCaller = false;
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    g.pr (objToString (obj, __kwargtrans__ ({indent: indent, printCaller: printCaller, tag: tag})));
};
export var printDict = printObj;
export var printList = printObj;
export var printTuple = printObj;
</t>
<t tx="ekr.20201227092410.199">export var tupleToString = function (obj, indent, tag) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    if (!(obj)) {
        return '(),';
    }
    var result = ['('];
    var indent2 = indent + ' ' * 4;
    for (var [i, obj2] of enumerate (obj)) {
        if (len (obj) &gt; 1) {
            result.append ('\n' + indent2);
        }
        result.append (objToString (obj2, __kwargtrans__ ({indent: indent2})));
        if (len (obj) == 1 || i + 1 &lt; len (obj)) {
            result.append (',');
        }
        else if (len (obj) &gt; 1) {
            result.append ('\n' + indent);
        }
    }
    result.append (')');
    var s = ''.join (result);
    return (tag ? '{}...\n{}\n'.format (tag, s) : s);
};
export var lastObjectCount = 0;
export var lastObjectsDict = dict ({});
export var lastTypesDict = dict ({});
export var lastFunctionsDict = dict ({});
</t>
<t tx="ekr.20201227092410.2">var callback = function (func) {
    var callback_wrapper = function () {
        var args = tuple ([].slice.apply (arguments).slice (0));
        try {
            return func (...args, __kwargtrans__ (py_keys));
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                g.es_exception ();
            }
            else {
                throw __except0__;
            }
        }
    };
    return callback_wrapper;
};
</t>
<t tx="ekr.20201227092410.20">get dump () {return __get__ (this, function (self) {
    var result = ['BindingInfo {}'.format (self.kind)];
    var table = tuple (['commandName', 'func', 'nextMode', 'pane', 'stroke']);
    for (var ivar of table) {
        if (hasattr (self, ivar)) {
            var val = getattr (self, ivar);
            if (!__in__ (val, tuple ([null, 'none', 'None', '']))) {
                if (ivar == 'func') {
                    var val = val.__name__;
                }
                var s = '{}: {}'.format (ivar, val);
                result.append (s);
            }
        }
    }
    return __mod__ ('[%s]'.format (), ' '.join (result).strip ());
});},
</t>
<t tx="ekr.20201227092410.200">export var clearAllIvars = function (o) {
    if (o) {
        o.__dict__.py_clear ();
    }
};
</t>
<t tx="ekr.20201227092410.201">export var collectGarbage = function () {
    try {
        gc.collect ();
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            // pass;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.202">export var enable_gc_debug = function (event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (!(gc)) {
        g.error ('can not import gc module');
        return ;
    }
    gc.set_debug ((((gc.DEBUG_STATS | gc.DEBUG_LEAK) | gc.DEBUG_COLLECTABLE) | gc.DEBUG_UNCOLLECTABLE) | gc.DEBUG_SAVEALL);
};
</t>
<t tx="ekr.20201227092410.203">export var getRepresentativeLiveObjects = function () {
    var d = dict ({});
    for (var obj of gc.get_objects ()) {
        var t = py_typeof (obj);
        if (!__in__ (t, d) &amp;&amp; hasattr (obj, '__class__')) {
            d [t] = obj;
        }
    }
    return d;
};
</t>
<t tx="ekr.20201227092410.204">export var printGc = function (tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    var tag = tag || g._callerName (__kwargtrans__ ({n: 2}));
    printGcObjects (__kwargtrans__ ({tag: tag}));
    printGcRefs (__kwargtrans__ ({tag: tag}));
    printGcVerbose (__kwargtrans__ ({tag: tag}));
};
</t>
<t tx="ekr.20201227092410.205">export var printGcRefs = function (tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = '';
    };
    var verbose = false;
    var refs = gc.get_referrers (app.windowList [0]);
    g.pr ('-' * 30, tag);
    if (verbose) {
        g.pr ('refs of', app.windowList [0]);
        for (var ref of refs) {
            g.pr (py_typeof (ref));
        }
    }
    else {
        g.pr ('{} referers'.format (len (refs)));
    }
};
</t>
<t tx="ekr.20201227092410.206">export var printGcAll = function (full, sort_by_n) {
    if (typeof full == 'undefined' || (full != null &amp;&amp; full.hasOwnProperty ("__kwargtrans__"))) {;
        var full = false;
    };
    if (typeof sort_by_n == 'undefined' || (sort_by_n != null &amp;&amp; sort_by_n.hasOwnProperty ("__kwargtrans__"))) {;
        var sort_by_n = true;
    };
    if (g.unitTesting) {
        return ;
    }
    var t1 = time.process_time ();
    var objects = gc.get_objects ();
    var d = dict ({});
    for (var obj of objects) {
        var t = py_typeof (obj);
        if (hasattr (obj, '__class__')) {
            d [t] = d.py_get (t, 0) + 1;
        }
    }
    var t2 = time.process_time ();
    if (full) {
        if (sort_by_n) {
            var py_items = list (d.py_items ());
            py_items.py_sort (__kwargtrans__ ({key: (function __lambda__ (x) {
                return x [1];
            })}));
            for (var z of py_reversed (py_items)) {
                print ('{} {}'.format (z [1], z [0]));
            }
        }
        else {
            g.printObj (d);
        }
    }
    print ('\nprintGcAll: {} objects in {} sec. '.format (len (objects), t2 - t1));
};
</t>
<t tx="ekr.20201227092410.208">export var printGcObjects = function (tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = '';
    };
    var tag = tag || g._callerName (__kwargtrans__ ({n: 2}));
    try {
        var n = len (gc.garbage);
        var n2 = len (gc.get_objects ());
        var delta = n2 - lastObjectCount;
        if (delta == 0) {
            return ;
        }
        lastObjectCount = n2;
        var typesDict = dict ({});
        for (var obj of gc.get_objects ()) {
            var t = py_typeof (obj);
            if (t == 'instance' &amp;&amp; t != types.UnicodeType) {
                try {
                    var t = obj.__class__;
                }
                catch (__except0__) {
                    if (isinstance (__except0__, Exception)) {
                        // pass;
                    }
                    else {
                        throw __except0__;
                    }
                }
            }
            if (t != types.FrameType) {
                var r = repr (t);
                var n = typesDict.py_get (r, 0);
                typesDict [r] = n + 1;
            }
        }
        var py_keys = dict ({});
        for (var key of lastTypesDict) {
            if (!__in__ (key, typesDict)) {
                py_keys [key] = null;
            }
        }
        var empty = true;
        for (var key of py_keys) {
            var n3 = lastTypesDict.py_get (key, 0);
            var n4 = typesDict.py_get (key, 0);
            var delta2 = n4 - n3;
            if (delta2 != 0) {
                var empty = false;
                break;
            }
        }
        if (!(empty)) {
            g.pr ('-' * 30);
            g.pr ('{}: garbage: {}, objects: {}, delta: {}'.format (tag, n, n2, delta));
            if (0) {
                for (var key of sorted (py_keys)) {
                    var n1 = lastTypesDict.py_get (key, 0);
                    var n2 = typesDict.py_get (key, 0);
                    var delta2 = n2 - n1;
                    if (delta2 != 0) {
                        g.pr ('{} ={} {}'.format (delta2, n2, key));
                    }
                }
            }
        }
        lastTypesDict = typesDict;
        var typesDict = dict ({});
        if (0) {
            var funcDict = dict ({});
            var getspec = inspect.getfullargspec;
            var n = 0;
            for (var obj of gc.get_objects ()) {
                if (isinstance (obj, types.FunctionType)) {
                    n++;
                    var key = repr (obj);
                    funcDict [key] = null;
                    if (n &lt; 50 &amp;&amp; !__in__ (key, lastFunctionsDict)) {
                        g.pr (obj);
                        var data = getspec (obj);
                        var __left0__ = data;
                        var args = __left0__ [0];
                        var varargs = __left0__ [1];
                        var varkw = __left0__ [2];
                        var defaults = __left0__ [3];
                        var kwonlyargs = __left0__ [4];
                        var kwonlydefaults = __left0__ [5];
                        var annotations = __left0__ [6];
                        g.pr ('args', args);
                        if (varargs) {
                            g.pr ('varargs', varargs);
                        }
                        if (varkw) {
                            g.pr ('varkw', varkw);
                        }
                        if (defaults) {
                            g.pr ('defaults...');
                            for (var s of defaults) {
                                g.pr (s);
                            }
                        }
                    }
                }
            }
            lastFunctionsDict = funcDict;
            var funcDict = dict ({});
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            traceback.print_exc ();
        }
        else {
            throw __except0__;
        }
    }
};
var __left0__ = printGcObjects;
export var printNewObjects = __left0__;
export var pno = __left0__;
</t>
<t tx="ekr.20201227092410.209">export var printGcSummary = function (tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = '';
    };
    var tag = tag || g._callerName (__kwargtrans__ ({n: 2}));
    g.enable_gc_debug ();
    try {
        var n = len (gc.garbage);
        var n2 = len (gc.get_objects ());
        var s = '{}: printGCSummary: garbage: {}, objects: {}'.format (tag, n, n2);
        g.pr (s);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            traceback.print_exc ();
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.21">    get isModeBinding () {return __get__ (this, function (self) {
        return self.kind.startswith ('*mode');
    });}
});
</t>
<t tx="ekr.20201227092410.210">export var printGcVerbose = function (tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = '';
    };
    var tag = tag || g._callerName (__kwargtrans__ ({n: 2}));
    var objects = gc.get_objects ();
    var newObjects = (function () {
        var __accu0__ = [];
        for (var o of objects) {
            if (!__in__ (id (o), lastObjectsDict)) {
                __accu0__.append (o);
            }
        }
        return __accu0__;
    }) ();
    lastObjectsDict = dict ({});
    for (var o of objects) {
        lastObjectsDict [id (o)] = o;
    }
    var dicts = 0;
    var seqs = 0;
    var i = 0;
    var n = len (newObjects);
    while (i &lt; 100 &amp;&amp; i &lt; n) {
        var o = newObjects [i];
        if (isinstance (o, dict)) {
            dicts++;
        }
        else if (isinstance (o, tuple ([list, tuple]))) {
            seqs++;
        }
        i++;
    }
    g.pr ('=' * 40);
    g.pr ('dicts: {}, sequences: {}'.format (dicts, seqs));
    g.pr ('{}: {} new, {} total objects'.format (tag, len (newObjects), len (objects)));
    g.pr ('-' * 40);
};
</t>
<t tx="ekr.20201227092410.212">export var printTimes = function (times) {
    for (var [n, junk] of enumerate (times.__getslice__ (0, -(1), 1))) {
        var t = times [n + 1] - times [n];
        if (t &gt; 0.1) {
            g.trace ('*** {} {} sec.'.format (n, t));
        }
    }
};
</t>
<t tx="ekr.20201227092410.213">export var clearStats = function () {
    g.app.statsDict = dict ({});
};
</t>
<t tx="ekr.20201227092410.214">export var printStats = command ('show-stats') (function (event, py_name) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
    if (py_name) {
        if (!(isString (py_name))) {
            var py_name = repr (py_name);
        }
    }
    else {
        var py_name = g._callerName (__kwargtrans__ ({n: 2}));
    }
    var d = g.app.statsDict;
    var d2 = (function () {
        var __accu0__ = [];
        for (var [key, val] of d.iteritems ()) {
            __accu0__.append ([val, key]);
        }
        return dict (__accu0__);
    }) ();
    for (var key of py_reversed (sorted (d2.py_keys ()))) {
        print ('{} {}'.format (key, d2.py_get (key)));
    }
});
</t>
<t tx="ekr.20201227092410.216">export var stat = function (py_name) {
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
    var d = g.app.statsDict;
    if (py_name) {
        if (!(isString (py_name))) {
            var py_name = repr (py_name);
        }
    }
    else {
        var py_name = g._callerName (__kwargtrans__ ({n: 2}));
    }
    d [py_name] = 1 + d.py_get (py_name, 0);
};
</t>
<t tx="ekr.20201227092410.217">export var getTime = function () {
    return time.time ();
};
</t>
<t tx="ekr.20201227092410.218">export var esDiffTime = function (message, start) {
    var delta = time.time () - start;
    g.es ('', '{} {} sec.'.format (message, delta));
    return time.time ();
};
</t>
<t tx="ekr.20201227092410.219">export var printDiffTime = function (message, start) {
    var delta = time.time () - start;
    g.pr ('{} {} sec.'.format (message, delta));
    return time.time ();
};
</t>
<t tx="ekr.20201227092410.22">export var isBindingInfo = function (obj) {
    return isinstance (obj, BindingInfo);
};
export var Bunch =  __class__ ('Bunch', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.220">export var timeSince = function (start) {
    return '{} sec.'.format (time.time () - start);
};
</t>
<t tx="ekr.20201227092410.221">export var comment_delims_from_extension = function (filename) {
    if (filename.startswith ('.')) {
        var __left0__ = tuple ([null, filename]);
        var root = __left0__ [0];
        var ext = __left0__ [1];
    }
    else {
        var __left0__ = os.path.splitext (filename);
        var root = __left0__ [0];
        var ext = __left0__ [1];
    }
    if (ext == '.tmp') {
        var __left0__ = os.path.splitext (root);
        var root = __left0__ [0];
        var ext = __left0__ [1];
    }
    var language = g.app.extension_dict.py_get (ext.__getslice__ (1, null, 1));
    if (ext) {
        return g.set_delims_from_language (language);
    }
    g.trace ('unknown extension: {}, filename: {}, root: {}'.format (ext, filename, root));
    return tuple (['', '', '']);
};
</t>
<t tx="ekr.20201227092410.222">export var findAllValidLanguageDirectives = function (p) {
    if (!(p)) {
        return [];
    }
    var languages = set ();
    for (var m of g.g_language_pat.finditer (p.b)) {
        var language = m.group (1);
        if (g.isValidLanguage (language)) {
            languages.add (language);
        }
    }
    return list (sorted (languages));
};
</t>
<t tx="ekr.20201227092410.223">export var findTabWidthDirectives = function (c, p) {
    if (c === null) {
        return null;
    }
    var w = null;
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (w) {
            break;
        }
        for (var s of tuple ([p.h, p.b])) {
            if (w) {
                break;
            }
            var anIter = g_tabwidth_pat.finditer (s);
            for (var m of anIter) {
                var word = m.group (0);
                var i = m.start (0);
                var j = g.skip_ws (s, i + len (word));
                var __left0__ = g.skip_long (s, j);
                var junk = __left0__ [0];
                var w = __left0__ [1];
                if (w == 0) {
                    var w = null;
                }
            }
        }
    }
    return w;
};
</t>
<t tx="ekr.20201227092410.224">export var findFirstValidAtLanguageDirective = function (p) {
    if (!(p)) {
        return null;
    }
    for (var m of g.g_language_pat.finditer (p.b)) {
        var language = m.group (1);
        if (g.isValidLanguage (language)) {
            return language;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.225">export var findLanguageDirectives = function (c, p) {
    if (c === null || p === null) {
        return null;
    }
    var v0 = p.v;
    var find_language = function (p_or_v) {
        for (var s of tuple ([p_or_v.h, p_or_v.b])) {
            for (var m of g_language_pat.finditer (s)) {
                var language = m.group (1);
                if (g.isValidLanguage (language)) {
                    return language;
                }
            }
        }
        return null;
    };
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var language = find_language (p);
        if (language) {
            return language;
        }
    }
    var seen = [];
    var parents = v0.parents.__getslice__ (0, null, 1);
    while (parents) {
        var parent_v = parents.py_pop ();
        if (__in__ (parent_v, seen)) {
            continue;
        }
        seen.append (parent_v);
        var language = find_language (parent_v);
        if (language) {
            return language;
        }
        for (var grand_parent_v of parent_v.parents) {
            if (!__in__ (grand_parent_v, seen)) {
                parents.append (grand_parent_v);
            }
        }
    }
    return (c.target_language ? c.target_language.lower () : 'python');
};
</t>
<t tx="ekr.20201227092410.227">export var findReference = function (py_name, root) {
    for (var p of root.subtree (__kwargtrans__ ({copy: false}))) {
        if (p.matchHeadline (py_name) &amp;&amp; !(p.isAtIgnoreNode ())) {
            return p.copy ();
        }
    }
    for (var p of root.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var d = g.get_directives_dict (p);
        if (__in__ ('root', d)) {
            for (var p2 of p.subtree (__kwargtrans__ ({copy: false}))) {
                if (p2.matchHeadline (py_name) &amp;&amp; !(p2.isAtIgnoreNode ())) {
                    return p2.copy ();
                }
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.228">export var get_directives_dict = function (p, root) {
    if (typeof root == 'undefined' || (root != null &amp;&amp; root.hasOwnProperty ("__kwargtrans__"))) {;
        var root = null;
    };
    if (root) {
        var root_node = root [0];
    }
    var d = dict ({});
    for (var [kind, s] of tuple ([tuple (['head', p.h]), tuple (['body', p.b])])) {
        var anIter = g.directives_pat.finditer (s);
        for (var m of anIter) {
            var word = m.group (1).strip ();
            var i = m.start (1);
            if (__in__ (word, d)) {
                continue;
            }
            var j = i + len (word);
            if (j &lt; len (s) &amp;&amp; !__in__ (s [j], ' \t\n')) {
                continue;
            }
            var k = g.skip_line (s, j);
            var val = s.__getslice__ (j, k, 1).strip ();
            if (__in__ (word, tuple (['root-doc', 'root-code']))) {
                d ['root'] = val;
            }
            d [word] = val;
        }
    }
    if (root) {
        var anIter = g_noweb_root.finditer (p.b);
        for (var m of anIter) {
            if (root_node) {
                d ['root'] = 0;
            }
            else {
                g.es ('{} may only occur in a topmost node (i.e., without a parent)'.format (g.angleBrackets ('*')));
            }
            break;
        }
    }
    return d;
};
</t>
<t tx="ekr.20201227092410.229">export var get_directives_dict_list = function (p) {
    var result = [];
    var p1 = p.copy ();
    for (var p of p1.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var root = (p.hasParent () ? null : [p]);
        result.append (g.get_directives_dict (p, __kwargtrans__ ({root: root})));
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.23">get __init__ () {return __get__ (this, function (self) {
    self.__dict__.py_update (keywords);
});},
</t>
<t tx="ekr.20201227092410.230">export var getLanguageFromAncestorAtFileNode = function (p) {
    var v0 = p.v;
    var find_language = function (p) {
        if (p.b.strip ()) {
            var languages = g.findAllValidLanguageDirectives (p);
            if (len (languages) == 1) {
                var language = languages [0];
                return language;
            }
        }
        if (p.isAnyAtFileNode ()) {
            var py_name = p.anyAtFileNodeName ();
            var __left0__ = g.os_path_splitext (py_name);
            var junk = __left0__ [0];
            var ext = __left0__ [1];
            var ext = ext.__getslice__ (1, null, 1);
            var language = g.app.extension_dict.py_get (ext);
            if (g.isValidLanguage (language)) {
                return language;
            }
        }
        return null;
    };
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var language = find_language (p);
        if (language) {
            return language;
        }
    }
    var seen = [];
    var parents = v0.parents.__getslice__ (0, null, 1);
    while (parents) {
        var parent_v = parents.py_pop ();
        if (__in__ (parent_v, seen)) {
            continue;
        }
        seen.append (parent_v);
        var language = find_language (parent_v);
        if (language) {
            return language;
        }
        for (var grand_parent_v of parent_v.parents) {
            if (!__in__ (grand_parent_v, seen)) {
                parents.append (grand_parent_v);
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.232">export var getLanguageAtPosition = function (c, p) {
    var aList = g.get_directives_dict_list (p);
    var d = g.scanAtCommentAndAtLanguageDirectives (aList);
    var language = d &amp;&amp; d.py_get ('language') || g.getLanguageFromAncestorAtFileNode (p) || c.config.getString ('target-language') || 'python';
    return language.lower ();
};
</t>
<t tx="ekr.20201227092410.233">export var getOutputNewline = function (c, py_name) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
    if (py_name) {
        var s = py_name;
    }
    else if (c) {
        var s = c.config.output_newline;
    }
    else {
        var s = app.config.output_newline;
    }
    if (!(s)) {
        var s = '';
    }
    var s = s.lower ();
    if (__in__ (s, tuple (['nl', 'lf']))) {
        var s = '\n';
    }
    else if (s == 'cr') {
        var s = '\r';
    }
    else if (s == 'platform') {
        var s = os.linesep;
    }
    else if (s == 'crlf') {
        var s = '\r\n';
    }
    else {
        var s = '\n';
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.234">export var inAtNosearch = function (p) {
    for (var p of p.self_and_parents ()) {
        if (p.is_at_ignore () || re.search ('(^@|\\n@)nosearch\\b', p.b)) {
            return true;
        }
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.235">export var isDirective = function (s) {
    var m = g_is_directive_pattern.match (s);
    if (m) {
        var s2 = s.__getslice__ (m.end (1), null, 1);
        if (s2 &amp;&amp; __in__ (s2 [0], '.(')) {
            return false;
        }
        return bool (__in__ (m.group (1), g.globalDirectiveList));
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.236">export var isValidLanguage = function (language) {
    if (__in__ (language, tuple (['c++', 'cpp']))) {
        var language = 'cplusplus';
    }
    var fn = g.os_path_join (g.app.loadDir, '..', 'modes', '{}.py'.format (language));
    return g.os_path_exists (fn);
};
</t>
<t tx="ekr.20201227092410.237">export var scanAtCommentAndAtLanguageDirectives = function (aList) {
    var lang = null;
    for (var d of aList) {
        var comment = d.py_get ('comment');
        var language = d.py_get ('language');
        if (language) {
            var __left0__ = g.set_language (language, 0);
            var lang = __left0__ [0];
            var delim1 = __left0__ [1];
            var delim2 = __left0__ [2];
            var delim3 = __left0__ [3];
        }
        if (comment) {
            var __left0__ = g.set_delims_from_string (comment);
            var delim1 = __left0__ [0];
            var delim2 = __left0__ [1];
            var delim3 = __left0__ [2];
        }
        if (comment || language) {
            var delims = tuple ([delim1, delim2, delim3]);
            var d = dict ({'language': lang, 'comment': comment, 'delims': delims});
            return d;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.238">export var scanAtEncodingDirectives = function (aList) {
    for (var d of aList) {
        var encoding = d.py_get ('encoding');
        if (encoding &amp;&amp; g.isValidEncoding (encoding)) {
            return encoding;
        }
        if (encoding &amp;&amp; !(g.app.unitTesting)) {
            g.error ('invalid @encoding:', encoding);
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.239">export var scanAtHeaderDirectives = function (aList) {
    for (var d of aList) {
        if (d.py_get ('header') &amp;&amp; d.py_get ('noheader')) {
            g.error ('conflicting @header and @noheader directives');
        }
    }
};
</t>
<t tx="ekr.20201227092410.24">get __repr__ () {return __get__ (this, function (self) {
    return self.toString ();
});},
</t>
<t tx="ekr.20201227092410.240">export var scanAtLineendingDirectives = function (aList) {
    for (var d of aList) {
        var e = d.py_get ('lineending');
        if (__in__ (e, tuple (['cr', 'crlf', 'lf', 'nl', 'platform']))) {
            var lineending = g.getOutputNewline (__kwargtrans__ ({py_name: e}));
            return lineending;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.241">export var scanAtPagewidthDirectives = function (aList, issue_error_flag) {
    if (typeof issue_error_flag == 'undefined' || (issue_error_flag != null &amp;&amp; issue_error_flag.hasOwnProperty ("__kwargtrans__"))) {;
        var issue_error_flag = false;
    };
    for (var d of aList) {
        var s = d.py_get ('pagewidth');
        if (s !== null) {
            var __left0__ = g.skip_long (s, 0);
            var i = __left0__ [0];
            var val = __left0__ [1];
            if (val !== null &amp;&amp; val &gt; 0) {
                return val;
            }
            if (issue_error_flag &amp;&amp; !(g.app.unitTesting)) {
                g.error ('ignoring @pagewidth', s);
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.242">export var scanAtPathDirectives = function (c, aList) {
    var path = c.scanAtPathDirectives (aList);
    return path;
};
</t>
<t tx="ekr.20201227092410.243">export var scanAllAtPathDirectives = function (c, p) {
    var aList = g.get_directives_dict_list (p);
    var path = c.scanAtPathDirectives (aList);
    return path;
};
</t>
<t tx="ekr.20201227092410.244">export var scanAtRootDirectives = function (aList) {
    for (var d of aList) {
        var s = d.py_get ('root');
        if (s !== null) {
            var __left0__ = g.scanAtRootOptions (s, 0);
            var i = __left0__ [0];
            var mode = __left0__ [1];
            return mode;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.245">export var scanAtRootOptions = function (s, i, err_flag) {
    if (typeof err_flag == 'undefined' || (err_flag != null &amp;&amp; err_flag.hasOwnProperty ("__kwargtrans__"))) {;
        var err_flag = false;
    };
    if (g.match (s, i, '@root')) {
        i += len ('@root');
        var i = g.skip_ws (s, i);
    }
    var mode = null;
    while (g.match (s, i, '-')) {
        i++;
        var err = -(1);
        if (g.match_word (s, i, 'code')) {
            if (!(mode)) {
                var mode = 'code';
            }
            else if (err_flag) {
                g.es ('modes conflict in:', g.get_line (s, i));
            }
        }
        else if (g.match (s, i, 'doc')) {
            if (!(mode)) {
                var mode = 'doc';
            }
            else if (err_flag) {
                g.es ('modes conflict in:', g.get_line (s, i));
            }
        }
        else {
            var err = i - 1;
        }
        while (i &lt; len (s) &amp;&amp; !__in__ (s [i], tuple ([' ', '\t', '\n', '-']))) {
            i++;
        }
        if (err &gt; -(1) &amp;&amp; err_flag) {
            var z_opt = s.__getslice__ (err, i, 1);
            var z_line = g.get_line (s, i);
            g.es ('unknown option:', z_opt, 'in', z_line);
        }
    }
    if (mode === null) {
        var doc = app.config.at_root_bodies_start_in_doc_mode;
        var mode = (doc ? 'doc' : 'code');
    }
    return tuple ([i, mode]);
};
</t>
<t tx="ekr.20201227092410.246">export var scanAtTabwidthDirectives = function (aList, issue_error_flag) {
    if (typeof issue_error_flag == 'undefined' || (issue_error_flag != null &amp;&amp; issue_error_flag.hasOwnProperty ("__kwargtrans__"))) {;
        var issue_error_flag = false;
    };
    for (var d of aList) {
        var s = d.py_get ('tabwidth');
        if (s !== null) {
            var __left0__ = g.skip_long (s, 0);
            var junk = __left0__ [0];
            var val = __left0__ [1];
            if (!__in__ (val, tuple ([null, 0]))) {
                return val;
            }
            if (issue_error_flag &amp;&amp; !(g.app.unitTesting)) {
                g.error ('ignoring @tabwidth', s);
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.247">export var scanAllAtTabWidthDirectives = function (c, p) {
    if (c &amp;&amp; p) {
        var aList = g.get_directives_dict_list (p);
        var val = g.scanAtTabwidthDirectives (aList);
        var ret = (val === null ? c.tab_width : val);
    }
    else {
        var ret = null;
    }
    return ret;
};
</t>
<t tx="ekr.20201227092410.248">export var scanAtWrapDirectives = function (aList, issue_error_flag) {
    if (typeof issue_error_flag == 'undefined' || (issue_error_flag != null &amp;&amp; issue_error_flag.hasOwnProperty ("__kwargtrans__"))) {;
        var issue_error_flag = false;
    };
    for (var d of aList) {
        if (d.py_get ('wrap') !== null) {
            return true;
        }
        if (d.py_get ('nowrap') !== null) {
            return false;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.249">export var scanAllAtWrapDirectives = function (c, p) {
    if (c &amp;&amp; p) {
        var py_default = c &amp;&amp; c.config.getBool ('body-pane-wraps');
        var aList = g.get_directives_dict_list (p);
        var val = g.scanAtWrapDirectives (aList);
        var ret = (val === null ? py_default : val);
    }
    else {
        var ret = null;
    }
    return ret;
};
</t>
<t tx="ekr.20201227092410.25">get ivars () {return __get__ (this, function (self) {
    return sorted (self.__dict__);
});},
</t>
<t tx="ekr.20201227092410.250">export var scanDirectives = function (c, p) {
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    return c.scanAllDirectives (p);
};
</t>
<t tx="ekr.20201227092410.251">export var scanForAtIgnore = function (c, p) {
    if (g.app.unitTesting) {
        return false;
    }
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var d = g.get_directives_dict (p);
        if (__in__ ('ignore', d)) {
            return true;
        }
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.252">export var scanForAtLanguage = function (c, p) {
    if (c &amp;&amp; p) {
        for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
            var d = g.get_directives_dict (p);
            if (__in__ ('language', d)) {
                var z = d ['language'];
                var __left0__ = g.set_language (z, 0);
                var language = __left0__ [0];
                var delim1 = __left0__ [1];
                var delim2 = __left0__ [2];
                var delim3 = __left0__ [3];
                return language;
            }
        }
    }
    return c.target_language;
};
</t>
<t tx="ekr.20201227092410.253">export var scanForAtSettings = function (p) {
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var h = p.h;
        var h = g.app.config.canonicalizeSettingName (h);
        if (h.startswith ('@settings')) {
            return true;
        }
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.254">export var set_delims_from_language = function (language) {
    var val = g.app.language_delims_dict.py_get (language);
    if (val) {
        var __left0__ = g.set_delims_from_string (val);
        var delim1 = __left0__ [0];
        var delim2 = __left0__ [1];
        var delim3 = __left0__ [2];
        if (delim2 &amp;&amp; !(delim3)) {
            return tuple (['', delim1, delim2]);
        }
        return tuple ([delim1, delim2, delim3]);
    }
    return tuple (['', '', '']);
};
</t>
<t tx="ekr.20201227092410.255">export var set_delims_from_string = function (s) {
    var tag = '@comment';
    var i = 0;
    if (g.match_word (s, i, tag)) {
        i += len (tag);
    }
    var count = 0;
    var delims = ['', '', ''];
    while (count &lt; 3 &amp;&amp; i &lt; len (s)) {
        var __left0__ = g.skip_ws (s, i);
        var i = __left0__;
        var j = __left0__;
        while (i &lt; len (s) &amp;&amp; !(g.is_ws (s [i])) &amp;&amp; !(g.is_nl (s, i))) {
            i++;
        }
        if (j == i) {
            break;
        }
        delims [count] = s.__getslice__ (j, i, 1) || '';
        count++;
    }
    if (count == 2) {
        delims [2] = delims [1];
        delims [1] = delims [0];
        delims [0] = '';
    }
    for (var i = 0; i &lt; 3; i++) {
        if (delims [i]) {
            if (delims [i].startswith ('@0x')) {
                if (len (delims [i]) == 3) {
                    g.warning ("'{}' delimiter is invalid".format (delims [i]));
                    return tuple ([null, null, null]);
                }
                try {
                    delims [i] = binascii.unhexlify (delims [i].__getslice__ (3, null, 1));
                    delims [i] = g.toUnicode (delims [i]);
                }
                catch (__except0__) {
                    if (isinstance (__except0__, Exception)) {
                        var e = __except0__;
                        g.warning ("'{}' delimiter is invalid: {}".format (delims [i], e));
                        return tuple ([null, null, null]);
                    }
                    else {
                        throw __except0__;
                    }
                }
            }
            else {
                delims [i] = delims [i].py_replace ('__', '\n').py_replace ('_', ' ');
            }
        }
    }
    return tuple ([delims [0], delims [1], delims [2]]);
};
</t>
<t tx="ekr.20201227092410.256">export var set_language = function (s, i, issue_errors_flag) {
    if (typeof issue_errors_flag == 'undefined' || (issue_errors_flag != null &amp;&amp; issue_errors_flag.hasOwnProperty ("__kwargtrans__"))) {;
        var issue_errors_flag = false;
    };
    var tag = '@language';
    if (g.match_word (s, i, tag)) {
        i += len (tag);
    }
    var i = g.skip_ws (s, i);
    var j = i;
    var i = g.skip_c_id (s, i);
    var arg = s.__getslice__ (j, i, 1).lower ();
    if (app.language_delims_dict.py_get (arg)) {
        var language = arg;
        var __left0__ = g.set_delims_from_language (language);
        var delim1 = __left0__ [0];
        var delim2 = __left0__ [1];
        var delim3 = __left0__ [2];
        return tuple ([language, delim1, delim2, delim3]);
    }
    if (issue_errors_flag) {
        g.es ('ignoring:', g.get_line (s, i));
    }
    return tuple ([null, null, null, null]);
};
</t>
<t tx="ekr.20201227092410.257">export var setDefaultDirectory = function (c, p, importing) {
    if (typeof importing == 'undefined' || (importing != null &amp;&amp; importing.hasOwnProperty ("__kwargtrans__"))) {;
        var importing = false;
    };
    if (p) {
        var py_name = p.anyAtFileNodeName ();
        if (py_name) {
            var d = g.os_path_dirname (py_name);
            if (d &amp;&amp; g.os_path_isabs (d)) {
                return d;
            }
        }
        var aList = g.get_directives_dict_list (p);
        var path = c.scanAtPathDirectives (aList);
    }
    else {
        var path = null;
    }
    if (path) {
        var path = g.os_path_finalize (path);
    }
    else {
        g.checkOpenDirectory (c);
        var __break0__ = false;
        for (var d of tuple ([c.openDirectory, g.getBaseDirectory (c)])) {
            if (d &amp;&amp; g.os_path_isabs (d)) {
                var path = d;
                __break0__ = true;
                break;
            }
        }
        if (!__break0__) {
            var path = '';
        }
    }
    if (!(importing) &amp;&amp; !(path)) {
        g.warning ('No absolute directory specified anywhere.');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.258">export var checkOpenDirectory = function (c) {
    if (c.openDirectory != c.frame.openDirectory) {
        g.error ('Error: c.openDirectory != c.frame.openDirectory\nc.openDirectory: {}\nc.frame.openDirectory: {}'.format (c.openDirectory, c.frame.openDirectory));
    }
    if (!(g.os_path_isabs (c.openDirectory))) {
        g.error ('Error: relative c.openDirectory: {}'.format (c.openDirectory));
    }
};
</t>
<t tx="ekr.20201227092410.259">export var stripPathCruft = function (path) {
    if (!(path)) {
        return path;
    }
    if (len (path) &gt; 2 &amp;&amp; (path [0] == '&lt;' &amp;&amp; path [-(1)] == '&gt;' || path [0] == '"' &amp;&amp; path [-(1)] == '"' || path [0] == "'" &amp;&amp; path [-(1)] == "'")) {
        var path = path.__getslice__ (1, -(1), 1).strip ();
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.26">get py_keys () {return __get__ (this, function (self) {
    return sorted (self.__dict__);
});},
</t>
<t tx="ekr.20201227092410.260">export var update_directives_pat = function () {
    var aList = (function () {
        var __accu0__ = [];
        for (var z of globalDirectiveList) {
            if (z != 'others') {
                __accu0__.append ('\\b{}\\b'.format (z));
            }
        }
        return __accu0__;
    }) ();
    var pat = __mod__ ('^@(%s)'.format (), '|'.join (aList));
    directives_pat = re.compile (pat, re.MULTILINE);
};
update_directives_pat ();
</t>
<t tx="ekr.20201227092410.262">export var chdir = function (path) {
    if (!(g.os_path_isdir (path))) {
        var path = g.os_path_dirname (path);
    }
    if (g.os_path_isdir (path) &amp;&amp; g.os_path_exists (path)) {
        os.chdir (path);
    }
};
</t>
<t tx="ekr.20201227092410.263">export var computeGlobalConfigDir = function () {
    return g.app.loadManager.computeGlobalConfigDir ();
};
</t>
<t tx="ekr.20201227092410.264">export var computeHomeDir = function () {
    return g.app.loadManager.computeHomeDir ();
};
</t>
<t tx="ekr.20201227092410.265">export var computeLeoDir = function () {
    return g.app.loadManager.computeLeoDir ();
};
</t>
<t tx="ekr.20201227092410.266">export var computeLoadDir = function () {
    return g.app.loadManager.computeLoadDir ();
};
</t>
<t tx="ekr.20201227092410.267">export var computeMachineName = function () {
    return g.app.loadManager.computeMachineName ();
};
</t>
<t tx="ekr.20201227092410.268">export var computeStandardDirectories = function () {
    return g.app.loadManager.computeStandardDirectories ();
};
</t>
<t tx="ekr.20201227092410.269">export var computeWindowTitle = function (fileName) {
    var __left0__ = g.gitInfoForFile (fileName);
    var branch = __left0__ [0];
    var commit = __left0__ [1];
    if (!(fileName)) {
        return (branch ? branch + ': untitled' : 'untitled');
    }
    var __left0__ = g.os_path_split (fileName);
    var path = __left0__ [0];
    var fn = __left0__ [1];
    if (path) {
        var title = (fn + ' in ') + path;
    }
    else {
        var title = fn;
    }
    if (__in__ (os.sep, '/\\')) {
        var title = title.py_replace ('/', os.sep).py_replace ('\\', os.sep);
    }
    if (branch) {
        var title = (branch + ': ') + title;
    }
    return title;
};
</t>
<t tx="ekr.20201227092410.27">get toString () {return __get__ (this, function (self) {
    var tag = self.__dict__.py_get ('tag');
    var entries = (function () {
        var __accu0__ = [];
        for (var key of self.ivars ()) {
            if (key != 'tag') {
                __accu0__.append ('{}: {}'.format (key, str (self.__dict__.py_get (key)) || repr (self.__dict__.py_get (key))));
            }
        }
        return __accu0__;
    }) ();
    var result = ['g.Bunch({})'.format (tag || '')];
    result.extend (entries);
    return '\n    '.join (result) + '\n';
});},
</t>
<t tx="ekr.20201227092410.270">export var create_temp_file = function (textMode) {
    if (typeof textMode == 'undefined' || (textMode != null &amp;&amp; textMode.hasOwnProperty ("__kwargtrans__"))) {;
        var textMode = false;
    };
    try {
        var __left0__ = tempfile.mkstemp (__kwargtrans__ ({text: textMode}));
        var fd = __left0__ [0];
        var theFileName = __left0__ [1];
        var mode = (textMode ? 'w' : 'wb');
        var theFile = os.fdopen (fd, mode);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.error ('unexpected exception in g.create_temp_file');
            g.es_exception ();
            var __left0__ = tuple ([null, '']);
            var theFile = __left0__ [0];
            var theFileName = __left0__ [1];
        }
        else {
            throw __except0__;
        }
    }
    return tuple ([theFile, theFileName]);
};
</t>
<t tx="ekr.20201227092410.271">export var defaultLeoFileExtension = function (c) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    var conf = (c ? c.config : g.app.config);
    return conf.getString ('default-leo-extension') || '.leo';
};
</t>
<t tx="ekr.20201227092410.272">export var ensure_extension = function (py_name, ext) {
    var __left0__ = g.os_path_splitext (py_name);
    var theFile = __left0__ [0];
    var old_ext = __left0__ [1];
    if (!(py_name)) {
        return py_name;
    }
    if (__in__ (old_ext, tuple (['.db', '.leo']))) {
        return py_name;
    }
    if (old_ext &amp;&amp; old_ext == ext) {
        return py_name;
    }
    return py_name + ext;
};
</t>
<t tx="ekr.20201227092410.273">export var fullPath = function (c, p, simulate) {
    if (typeof simulate == 'undefined' || (simulate != null &amp;&amp; simulate.hasOwnProperty ("__kwargtrans__"))) {;
        var simulate = false;
    };
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        var aList = g.get_directives_dict_list (p);
        var path = c.scanAtPathDirectives (aList);
        var fn = (simulate ? p.h : p.anyAtFileNodeName ());
        if (fn) {
            var fn = c.expand_path_expression (fn);
            return g.os_path_finalize_join (path, fn);
        }
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.274">export var get_files_in_directory = function (directory, kinds, recursive) {
    if (typeof kinds == 'undefined' || (kinds != null &amp;&amp; kinds.hasOwnProperty ("__kwargtrans__"))) {;
        var kinds = null;
    };
    if (typeof recursive == 'undefined' || (recursive != null &amp;&amp; recursive.hasOwnProperty ("__kwargtrans__"))) {;
        var recursive = true;
    };
    var __left0__ = tuple ([[], os.path.sep]);
    var files = __left0__ [0];
    var sep = __left0__ [1];
    if (!(g.os.path.exists (directory))) {
        g.es_print ('does not exist', directory);
        return files;
    }
    try {
        if (kinds) {
            var kinds = (function () {
                var __accu0__ = [];
                for (var z of kinds) {
                    __accu0__.append ((z.startswith ('*') ? z : '*' + z));
                }
                return __accu0__;
            }) ();
        }
        else {
            var kinds = ['*.py'];
        }
        if (recursive) {
        }
        else {
            for (var kind of kinds) {
                files.extend (glob.glob ((directory + sep) + kind));
            }
        }
        return list (set (sorted (files)));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ();
            return [];
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.276">export var getBaseDirectory = function (c) {
    var base = app.config.relative_path_base_directory;
    if (base &amp;&amp; base == '!') {
        var base = app.loadDir;
    }
    else if (base &amp;&amp; base == '.') {
        var base = c.openDirectory;
    }
    if (base &amp;&amp; g.os_path_isabs (base)) {
        if (!(hasattr (c, 'chdir_to_relative_path'))) {
            c.chdir_to_relative_path = c.config.getBool ('chdir-to-relative-path');
        }
        if (c.chdir_to_relative_path) {
            os.chdir (base);
        }
        return base;
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.277">export var getEncodingAt = function (p, s) {
    if (typeof s == 'undefined' || (s != null &amp;&amp; s.hasOwnProperty ("__kwargtrans__"))) {;
        var s = null;
    };
    if (s) {
        var __left0__ = g.stripBOM (s);
        var e = __left0__ [0];
        var junk_s = __left0__ [1];
        if (e) {
            return e;
        }
    }
    var aList = g.get_directives_dict_list (p);
    var e = g.scanAtEncodingDirectives (aList);
    if (s &amp;&amp; s.strip () &amp;&amp; !(e)) {
        var e = 'utf-8';
    }
    return e;
};
</t>
<t tx="ekr.20201227092410.278">export var guessExternalEditor = function (c) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    var editor = os.environ.py_get ('LEO_EDITOR') || os.environ.py_get ('EDITOR') || g.app.db &amp;&amp; g.app.db.py_get ('LEO_EDITOR') || c &amp;&amp; c.config.getString ('external-editor');
    if (editor) {
        return editor;
    }
    var platform = sys.platform.lower ();
    if (platform.startswith ('win')) {
        return 'notepad';
    }
    if (platform.startswith ('linux')) {
        return 'gedit';
    }
    g.es ('No editor set.\nPlease set LEO_EDITOR or EDITOR environment variable,\nor do g.app.db[\'LEO_EDITOR\'] = "gvim"');
    return null;
};
</t>
<t tx="ekr.20201227092410.279">export var init_dialog_folder = function (c, p, use_at_path) {
    if (typeof use_at_path == 'undefined' || (use_at_path != null &amp;&amp; use_at_path.hasOwnProperty ("__kwargtrans__"))) {;
        var use_at_path = true;
    };
    if (c &amp;&amp; p &amp;&amp; use_at_path) {
        var path = g.fullPath (c, p);
        if (path) {
            var dir_ = g.os_path_dirname (path);
            if (dir_ &amp;&amp; g.os_path_exists (dir_)) {
                return dir_;
            }
        }
    }
    var table = tuple ([tuple (['c.last_dir', c &amp;&amp; c.last_dir]), tuple (['os.curdir', g.os_path_abspath (os.curdir)])]);
    for (var [kind, dir_] of table) {
        if (dir_ &amp;&amp; g.os_path_exists (dir_)) {
            return dir_;
        }
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.280">export var is_binary_file = function (f) {
    return f &amp;&amp; isinstance (f, io.BufferedIOBase);
};
</t>
<t tx="ekr.20201227092410.281">export var is_binary_external_file = function (fileName) {
    try {
        var f = open (fileName, 'rb');
        try {
            f.__enter__ ();
            var s = f.read (1024);
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        return g.is_binary_string (s);
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            return false;
        }
        else if (isinstance (__except0__, Exception)) {
            g.es_exception ();
            return false;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.282">export var is_binary_string = function (s) {
    var aList = [7, 8, 9, 10, 12, 13, 27] + list (range (32, 256));
    var aList = bytes (aList);
    return bool (s.translate (null, aList));
};
</t>
<t tx="ekr.20201227092410.283">export var is_sentinel = function (line, delims) {
    var __left0__ = delims;
    var delim1 = __left0__ [0];
    var delim2 = __left0__ [1];
    var delim3 = __left0__ [2];
    var line = line.lstrip ();
    if (delim1) {
        return line.startswith (delim1 + '@');
    }
    if (delim2 &amp;&amp; delim3) {
        var i = line.find (delim2 + '@');
        var j = line.find (delim3);
        return (0 == i &amp;&amp; i &lt; j);
    }
    g.error ('is_sentinel: can not happen. delims: {}'.format (repr (delims)));
    return false;
};
</t>
<t tx="ekr.20201227092410.284">export var makeAllNonExistentDirectories = function (theDir) {
    var theDir = g.os_path_normpath (theDir);
    var ok = g.os_path_isdir (theDir) &amp;&amp; g.os_path_exists (theDir);
    if (ok) {
        return theDir;
    }
    try {
        os.makedirs (theDir, __kwargtrans__ ({mode: 511, exist_ok: false}));
        return theDir;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.285">export var makePathRelativeTo = function (fullPath, basePath) {
    if (fullPath.startswith (basePath)) {
        var s = fullPath.__getslice__ (len (basePath), null, 1);
        if (s.startswith (os.path.sep)) {
            var s = s.__getslice__ (len (os.path.sep), null, 1);
        }
        return s;
    }
    return fullPath;
};
</t>
<t tx="ekr.20201227092410.286">export var openWithFileName = function (fileName, old_c, gui) {
    if (typeof old_c == 'undefined' || (old_c != null &amp;&amp; old_c.hasOwnProperty ("__kwargtrans__"))) {;
        var old_c = null;
    };
    if (typeof gui == 'undefined' || (gui != null &amp;&amp; gui.hasOwnProperty ("__kwargtrans__"))) {;
        var gui = null;
    };
    return g.app.loadManager.loadLocalFile (fileName, gui, old_c);
};
</t>
<t tx="ekr.20201227092410.287">export var readFileIntoEncodedString = function (fn, silent) {
    if (typeof silent == 'undefined' || (silent != null &amp;&amp; silent.hasOwnProperty ("__kwargtrans__"))) {;
        var silent = false;
    };
    try {
        var f = open (fn, 'rb');
        try {
            f.__enter__ ();
            return f.read ();
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            if (!(silent)) {
                g.error ('can not open', fn);
            }
        }
        else if (isinstance (__except0__, Exception)) {
            if (!(silent)) {
                g.error ('readFileIntoEncodedString: exception reading {}'.format (fn));
                g.es_exception ();
            }
        }
        else {
            throw __except0__;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.288">export var readFileIntoString = function (fileName, encoding, kind, verbose) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = 'utf-8';
    };
    if (typeof kind == 'undefined' || (kind != null &amp;&amp; kind.hasOwnProperty ("__kwargtrans__"))) {;
        var kind = null;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    if (!(fileName)) {
        if (verbose) {
            g.trace ('no fileName arg given');
        }
        return tuple ([null, null]);
    }
    if (g.os_path_isdir (fileName)) {
        if (verbose) {
            g.trace ('not a file:', fileName);
        }
        return tuple ([null, null]);
    }
    if (!(g.os_path_exists (fileName))) {
        if (verbose) {
            g.error ('file not found:', fileName);
        }
        return tuple ([null, null]);
    }
    try {
        var e = null;
        var f = open (fileName, 'rb');
        try {
            f.__enter__ ();
            var s = f.read ();
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        if (!(s)) {
            return tuple (['', null]);
        }
        var __left0__ = g.stripBOM (s);
        var e = __left0__ [0];
        var s = __left0__ [1];
        if (!(e)) {
            var __left0__ = g.os_path_splitext (fileName);
            var junk = __left0__ [0];
            var ext = __left0__ [1];
            if (ext == '.py') {
                var e = g.getPythonEncodingFromString (s);
            }
        }
        var s = g.toUnicode (s, __kwargtrans__ ({encoding: e || encoding}));
        return tuple ([s, e]);
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            if (verbose) {
                g.error ('can not open', '', kind || '', fileName);
            }
        }
        else if (isinstance (__except0__, Exception)) {
            g.error ('readFileIntoString: unexpected exception reading {}'.format (fileName));
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
    return tuple ([null, null]);
};
</t>
<t tx="ekr.20201227092410.289">export var readFileIntoUnicodeString = function (fn, encoding, silent) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = null;
    };
    if (typeof silent == 'undefined' || (silent != null &amp;&amp; silent.hasOwnProperty ("__kwargtrans__"))) {;
        var silent = false;
    };
    try {
        var f = open (fn, 'rb');
        try {
            f.__enter__ ();
            var s = f.read ();
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        return g.toUnicode (s, __kwargtrans__ ({encoding: encoding}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            if (!(silent)) {
                g.error ('can not open', fn);
            }
        }
        else if (isinstance (__except0__, Exception)) {
            g.error ('readFileIntoUnicodeString: unexpected exception reading {}'.format (fn));
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.29">get __setitem__ () {return __get__ (this, function (self, key, value) {
    return operator.setitem (self.__dict__, key, value);
});},
</t>
<t tx="ekr.20201227092410.290">export var readlineForceUnixNewline = function (f, fileName) {
    if (typeof fileName == 'undefined' || (fileName != null &amp;&amp; fileName.hasOwnProperty ("__kwargtrans__"))) {;
        var fileName = null;
    };
    try {
        var s = f.readline ();
    }
    catch (__except0__) {
        if (isinstance (__except0__, UnicodeDecodeError)) {
            g.trace ('UnicodeDecodeError: {}'.format (fileName), f, g.callers ());
            var s = '';
        }
        else {
            throw __except0__;
        }
    }
    if (len (s) &gt;= 2 &amp;&amp; s [-(2)] == '\r' &amp;&amp; s [-(1)] == '\n') {
        var s = s.__getslice__ (0, -(2), 1) + '\n';
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.291">export var sanitize_filename = function (s) {
    var result = [];
    for (var ch of s) {
        if (__in__ (ch, string.ascii_letters)) {
            result.append (ch);
        }
        else if (ch == '\t') {
            result.append (' ');
        }
        else if (ch == '"') {
            result.append ("'");
        }
        else if (__in__ (ch, '\\/:|&lt;&gt;*:._')) {
            result.append ('_');
        }
    }
    var s = ''.join (result).strip ();
    while (len (s) &gt; 1) {
        var n = len (s);
        var s = s.py_replace ('__', '_');
        if (len (s) == n) {
            break;
        }
    }
    return s.__getslice__ (0, 128, 1);
};
</t>
<t tx="ekr.20201227092410.292">export var setGlobalOpenDir = function (fileName) {
    if (fileName) {
        g.app.globalOpenDir = g.os_path_dirname (fileName);
    }
};
</t>
<t tx="ekr.20201227092410.293">export var shortFileName = function (fileName, n) {
    if (typeof n == 'undefined' || (n != null &amp;&amp; n.hasOwnProperty ("__kwargtrans__"))) {;
        var n = null;
    };
    if (n !== null) {
        g.trace ('"n" keyword argument is no longer used');
    }
    return (fileName ? g.os_path_basename (fileName) : '');
};
export var shortFilename = shortFileName;
</t>
<t tx="ekr.20201227092410.294">export var splitLongFileName = function (fn, limit) {
    if (typeof limit == 'undefined' || (limit != null &amp;&amp; limit.hasOwnProperty ("__kwargtrans__"))) {;
        var limit = 40;
    };
    var aList = fn.py_replace ('\\', '/').py_split ('/');
    var __left0__ = tuple ([0, []]);
    var n = __left0__ [0];
    var result = __left0__ [1];
    for (var [i, s] of enumerate (aList)) {
        n += len (s);
        result.append (s);
        if (i + 1 &lt; len (aList)) {
            result.append ('/');
            n++;
        }
        if (n &gt; limit) {
            result.append ('\n');
            var n = 0;
        }
    }
    return ''.join (result);
};
</t>
<t tx="ekr.20201227092410.295">export var utils_remove = function (fileName, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    try {
        os.remove (fileName);
        return true;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            if (verbose) {
                g.es ('exception removing:', fileName);
                g.es_exception ();
            }
            return false;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.296">export var utils_rename = function (c, src, dst, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    try {
        shutil.move (src, dst);
        return true;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            if (verbose) {
                g.error ('exception renaming', src, 'to', dst);
                g.es_exception (__kwargtrans__ ({full: false}));
            }
            return false;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.297">export var utils_chmod = function (fileName, mode, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    if (mode === null) {
        return ;
    }
    try {
        os.chmod (fileName, mode);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            if (verbose) {
                g.es ('exception in os.chmod', fileName);
                g.es_exception ();
            }
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.298">export var utils_stat = function (fileName) {
    try {
        var mode = os.stat (fileName) [0] &amp; ((7 * 8) * 8 + 7 * 8) + 7;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            var mode = null;
        }
        else {
            throw __except0__;
        }
    }
    return mode;
};
</t>
<t tx="ekr.20201227092410.299">export var writeFile = function (contents, encoding, fileName) {
    try {
        if (g.isUnicode (contents)) {
            var contents = g.toEncodedString (contents, __kwargtrans__ ({encoding: encoding}));
        }
        var f = open (fileName, 'wb');
        try {
            f.__enter__ ();
            f.write (contents);
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        return true;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            var e = __except0__;
            print ('exception writing: {}:\n{}'.format (fileName, e));
            return false;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.30">get __getitem__ () {return __get__ (this, function (self, key) {
    return operator.getitem (self.__dict__, key);
});},
</t>
<t tx="ekr.20201227092410.300">export var find_word = function (s, word, i) {
    if (typeof i == 'undefined' || (i != null &amp;&amp; i.hasOwnProperty ("__kwargtrans__"))) {;
        var i = 0;
    };
    while (i &lt; len (s)) {
        var progress = i;
        var i = s.find (word, i);
        if (i == -(1)) {
            return -(1);
        }
        if (i &gt; 0) {
            var ch = s [i - 1];
            if (ch == '_' || ch.isalnum ()) {
                i += len (word);
                continue;
            }
        }
        if (g.match_word (s, i, word)) {
            return i;
        }
        i += len (word);
    }
    return -(1);
};
</t>
<t tx="ekr.20201227092410.301">export var findRootsWithPredicate = function (c, root, predicate) {
    if (typeof predicate == 'undefined' || (predicate != null &amp;&amp; predicate.hasOwnProperty ("__kwargtrans__"))) {;
        var predicate = null;
    };
    var seen = [];
    var roots = [];
    if (predicate === null) {
        var predicate = function (p) {
            return p.isAnyAtFileNode () &amp;&amp; p.h.strip ().endswith ('.py');
        };
    }
    for (var p of root.self_and_subtree (__kwargtrans__ ({copy: false}))) {
        if (predicate (p) &amp;&amp; !__in__ (p.v, seen)) {
            seen.append (p.v);
            roots.append (p.copy ());
        }
    }
    if (roots) {
        return roots;
    }
    for (var p of root.parents ()) {
        if (predicate (p)) {
            return [p.copy ()];
        }
    }
    var clones = [];
    for (var p of root.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (p.isCloned ()) {
            clones.append (p.v);
        }
    }
    if (clones) {
        for (var p of c.all_positions (__kwargtrans__ ({copy: false}))) {
            if (predicate (p)) {
                for (var p2 of p.self_and_subtree ()) {
                    if (__in__ (p2.v, clones)) {
                        return [p.copy ()];
                    }
                }
            }
        }
    }
    return [];
};
</t>
<t tx="ekr.20201227092410.303">export var recursiveUNLSearch = function (unlList, c, depth, p, maxdepth, maxp, soft_idx, hard_idx) {
    if (typeof depth == 'undefined' || (depth != null &amp;&amp; depth.hasOwnProperty ("__kwargtrans__"))) {;
        var depth = 0;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    if (typeof maxdepth == 'undefined' || (maxdepth != null &amp;&amp; maxdepth.hasOwnProperty ("__kwargtrans__"))) {;
        var maxdepth = 0;
    };
    if (typeof maxp == 'undefined' || (maxp != null &amp;&amp; maxp.hasOwnProperty ("__kwargtrans__"))) {;
        var maxp = null;
    };
    if (typeof soft_idx == 'undefined' || (soft_idx != null &amp;&amp; soft_idx.hasOwnProperty ("__kwargtrans__"))) {;
        var soft_idx = false;
    };
    if (typeof hard_idx == 'undefined' || (hard_idx != null &amp;&amp; hard_idx.hasOwnProperty ("__kwargtrans__"))) {;
        var hard_idx = false;
    };
    if (g.unitTesting) {
        g.app.unitTestDict ['g.recursiveUNLSearch'] = true;
        return tuple ([true, maxdepth, maxp]);
    }
    var moveToP = function (c, p, unlList) {
        g.app.gui.qtApp.processEvents ();
        c.expandAllAncestors (p);
        c.selectPosition (p);
        var __left0__ = recursiveUNLParts (unlList [-(1)]);
        var nth_sib = __left0__ [0];
        var nth_same = __left0__ [1];
        var nth_line_no = __left0__ [2];
        var nth_col_no = __left0__ [3];
        if (nth_line_no) {
            if (nth_line_no &lt; 0) {
                c.goToLineNumber (-(nth_line_no));
                if (nth_col_no) {
                    var pos = c.frame.body.wrapper.getInsertPoint () + nth_col_no;
                    c.frame.body.wrapper.setInsertPoint (pos);
                }
            }
            else {
                @others
    };
    var __left0__ = recursiveUNLFind (unlList, c, depth, p, maxdepth, maxp, __kwargtrans__ ({soft_idx: soft_idx, hard_idx: hard_idx}));
    var found = __left0__ [0];
    var maxdepth = __left0__ [1];
    var maxp = __left0__ [2];
    if (maxp) {
        moveToP (c, maxp, unlList);
    }
    return tuple ([found, maxdepth, maxp]);
};
</t>
<t tx="ekr.20201227092410.304"></t>
<t tx="ekr.20201227092410.305">        var pos = sum ((function () {
            var __accu0__ = [];
            for (var i of p.b.py_split ('\n').__getslice__ (0, nth_line_no - 1, 1)) {
                __accu0__.append (len (i) + 1);
            }
            return py_iter (__accu0__);
        }) ());
        if (nth_col_no) {
            pos += nth_col_no;
        }
        c.frame.body.wrapper.setInsertPoint (pos);
    }
}
if (p.hasChildren ()) {
    p.expand ();
}
c.redraw ();
c.frame.bringToFront ();
c.bodyWantsFocusNow ();
</t>
<t tx="ekr.20201227092410.306">export var recursiveUNLFind = function (unlList, c, depth, p, maxdepth, maxp, soft_idx, hard_idx) {
    if (typeof depth == 'undefined' || (depth != null &amp;&amp; depth.hasOwnProperty ("__kwargtrans__"))) {;
        var depth = 0;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    if (typeof maxdepth == 'undefined' || (maxdepth != null &amp;&amp; maxdepth.hasOwnProperty ("__kwargtrans__"))) {;
        var maxdepth = 0;
    };
    if (typeof maxp == 'undefined' || (maxp != null &amp;&amp; maxp.hasOwnProperty ("__kwargtrans__"))) {;
        var maxp = null;
    };
    if (typeof soft_idx == 'undefined' || (soft_idx != null &amp;&amp; soft_idx.hasOwnProperty ("__kwargtrans__"))) {;
        var soft_idx = false;
    };
    if (typeof hard_idx == 'undefined' || (hard_idx != null &amp;&amp; hard_idx.hasOwnProperty ("__kwargtrans__"))) {;
        var hard_idx = false;
    };
    if (depth == 0) {
        var nds = list (c.rootPosition ().self_and_siblings ());
        @others
};
</t>
<t tx="ekr.20201227092410.307">    var unlList = (function () {
        var __accu0__ = [];
        for (var i of unlList) {
            if (i.strip ()) {
                __accu0__.append (i.py_replace ('--%3E', '--&gt;'));
            }
        }
        return __accu0__;
    }) ();
}
else {
    var nds = list (p.children ());
}
</t>
<t tx="ekr.20201227092410.308">var heads = (function () {
    var __accu0__ = [];
    for (var i of nds) {
        __accu0__.append (i.h);
    }
    return __accu0__;
}) ();
var order = [];
var __left0__ = null;
var nth_sib = __left0__;
var nth_same = __left0__;
var nth_line_no = __left0__;
var nth_col_no = __left0__;
try {
    var target = unlList [depth];
}
catch (__except0__) {
    if (isinstance (__except0__, IndexError)) {
        var target = '';
    }
    else {
        throw __except0__;
    }
}
try {
    var target = g_pos_pattern.sub ('', unlList [depth]);
    var __left0__ = recursiveUNLParts (unlList [depth]);
    var nth_sib = __left0__ [0];
    var nth_same = __left0__ [1];
    var nth_line_no = __left0__ [2];
    var nth_col_no = __left0__ [3];
    var pos = nth_sib !== null;
}
catch (__except0__) {
    if (isinstance (__except0__, IndexError)) {
        var pos = false;
    }
    else {
        throw __except0__;
    }
}
if (pos) {
    var use_idx_mode = true;
    var target = re.sub (g_pos_pattern, '', target).py_replace ('--%3E', '--&gt;');
    if (hard_idx) {
        if (nth_sib &lt; len (heads)) {
            order.append (nth_sib);
        }
    }
    else {
        if (nth_same) {
</t>
<t tx="ekr.20201227092410.309">    var nths = (function () {
        var __accu0__ = [];
        for (var [n, i] of enumerate (heads)) {
            if (i == target) {
                __accu0__.append (n);
            }
        }
        return __accu0__;
    }) ();
    if (nth_same &lt; len (nths) &amp;&amp; heads [nths [nth_same]] == target) {
        order.append (nths [nth_same]);
    }
}
</t>
<t tx="ekr.20201227092410.31">get py_get () {return __get__ (this, function (self, key, theDefault) {
    if (typeof theDefault == 'undefined' || (theDefault != null &amp;&amp; theDefault.hasOwnProperty ("__kwargtrans__"))) {;
        var theDefault = null;
    };
    return self.__dict__.py_get (key, theDefault);
});},
</t>
<t tx="ekr.20201227092410.310">        order += (function () {
            var __accu0__ = [];
            for (var [n, s] of enumerate (heads)) {
                if (!__in__ (n, order) &amp;&amp; s == target) {
                    __accu0__.append (n);
                }
            }
            return __accu0__;
        }) ();
        if (soft_idx &amp;&amp; nth_sib &lt; len (heads)) {
            order.append (nth_sib);
        }
    }
}
else if (hard_idx) {
    // pass;
}
else {
    var order = range (len (nds));
    var target = target.py_replace ('--%3E', '--&gt;');
    var use_idx_mode = false;
}
for (var ndi of order) {
    var nd = nds [ndi];
    if (target == nd.h || use_idx_mode &amp;&amp; (soft_idx || hard_idx) &amp;&amp; ndi == nth_sib) {
        if (depth + 1 == len (unlList)) {
            return tuple ([true, maxdepth, nd]);
        }
        if (maxdepth &lt; depth + 1) {
            var maxdepth = depth + 1;
            var maxp = nd.copy ();
        }
        var __left0__ = g.recursiveUNLFind (unlList, c, depth + 1, nd, maxdepth, maxp, __kwargtrans__ ({soft_idx: soft_idx, hard_idx: hard_idx}));
        var found = __left0__ [0];
        var maxdepth = __left0__ [1];
        var maxp = __left0__ [2];
        if (found) {
            return tuple ([found, maxdepth, maxp]);
        }
    }
}
if (depth == 0 &amp;&amp; maxp) {
    g.es ('Partial UNL match');
}
if (soft_idx &amp;&amp; depth + 2 &lt; len (unlList)) {
    var aList = [];
    for (var p of c.all_unique_positions ()) {
</t>
<t tx="ekr.20201227092410.311">        if (any ((function () {
            var __accu0__ = [];
            for (var unl of unlList) {
                __accu0__.append (__in__ (p.h.py_replace ('--%3E', '--&gt;'), unl));
            }
            return __accu0__;
        }) ())) {
            aList.append (tuple ([p.copy (), p.get_UNL (false, false, true)]));
        }
    }
    var maxcount = 0;
    var singleMatch = true;
    for (var iter_unl of aList) {
        var count = 0;
        var compare_list = unlList.__getslice__ (0, null, 1);
        for (var header of py_reversed (iter_unl [1].py_split ('--&gt;'))) {
            if (re.sub (g_pos_pattern, '', header).py_replace ('--%3E', '--&gt;') == compare_list [-(1)]) {
                var count = count + 1;
                compare_list.py_pop (-(1));
            }
            else {
                break;
            }
        }
        if (count &gt; maxcount) {
            var p = iter_unl [0];
            var singleMatch = true;
        }
        else if (count == maxcount) {
            var singleMatch = false;
        }
    }
    if (maxcount &amp;&amp; singleMatch) {
        var maxp = p;
        var maxdepth = p.level ();
    }
}
return tuple ([false, maxdepth, maxp]);
</t>
<t tx="ekr.20201227092410.312">export var recursiveUNLParts = function (text) {
    var pos = re.findall (g_pos_pattern, text);
    if (pos) {
        return tuple ((function () {
            var __accu0__ = [];
            for (var i of pos [0]) {
                __accu0__.append ((i ? int (i) : 0));
            }
            return py_iter (__accu0__);
        }) ());
    }
    return tuple ([null, null, null, null]);
};
</t>
<t tx="ekr.20201227092410.314">export var scanError = function (s) {
    g.app.scanErrors++;
    g.es ('', s);
};
</t>
<t tx="ekr.20201227092410.315">export var scanf = function (s, pat) {
    var count = pat.count ('%s') + pat.count ('%d');
    var pat = pat.py_replace ('%s', '(\\S+)');
    var pat = pat.py_replace ('%d', '(\\d+)');
    var parts = re.py_split (pat, s);
    var result = [];
    for (var part of parts) {
        if (part &amp;&amp; len (result) &lt; count) {
            result.append (part);
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.316">export var see_more_lines = function (s, ins, n) {
    if (typeof n == 'undefined' || (n != null &amp;&amp; n.hasOwnProperty ("__kwargtrans__"))) {;
        var n = 4;
    };
    if (n &gt; 0) {
        for (var z = 0; z &lt; n; z++) {
            if (ins &gt;= len (s)) {
                break;
            }
            var __left0__ = g.getLine (s, ins);
            var i = __left0__ [0];
            var j = __left0__ [1];
            var ins = j;
        }
    }
    return max (0, min (ins, len (s)));
};
</t>
<t tx="ekr.20201227092410.317">export var splitLines = function (s) {
    if (s) {
        return s.splitlines (true);
    }
    return [];
};
export var splitlines = splitLines;
</t>
<t tx="ekr.20201227092410.318">export var joinLines = function (aList) {
    return ''.join (aList);
};
export var joinlines = joinLines;
</t>
<t tx="ekr.20201227092410.319">export var skip_block_comment = function (s, i) {
    var j = i;
    i += 2;
    var n = len (s);
    var k = s.find ('*/', i);
    if (k == -(1)) {
        g.scanError ('Run on block comment: ' + s.__getslice__ (j, i, 1));
        return n;
    }
    return k + 2;
};
</t>
<t tx="ekr.20201227092410.32">    get __contains__ () {return __get__ (this, function (self, key) {
        return __in__ (key, self.__dict__);
    });}
});
export var bunch = Bunch;
export var EmergencyDialog =  __class__ ('EmergencyDialog', [object], {
    __module__: __name__,
});
export var FileLikeObject =  __class__ ('FileLikeObject', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.320">export var skip_braces = function (s, i) {
    var level = 0;
    var n = len (s);
    while (i &lt; n) {
        var c = s [i];
        if (c == '{') {
            level++;
            i++;
        }
        else if (c == '}') {
            level--;
            if (level &lt;= 0) {
                return i;
            }
            i++;
        }
        else if (c == "'" || c == '"') {
            var i = g.skip_string (s, i);
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_to_end_of_line (s, i);
        }
        else if (g.match (s, i, '/*')) {
            var i = g.skip_block_comment (s, i);
        }
        else if (g.match_word (s, i, '#if') || g.match_word (s, i, '#ifdef') || g.match_word (s, i, '#ifndef')) {
            var __left0__ = g.skip_pp_if (s, i);
            var i = __left0__ [0];
            var delta = __left0__ [1];
            level += delta;
        }
        else {
            i++;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.321">export var skip_parens = function (s, i) {
    var level = 0;
    var n = len (s);
    while (i &lt; n) {
        var c = s [i];
        if (c == '(') {
            level++;
            i++;
        }
        else if (c == ')') {
            level--;
            if (level &lt;= 0) {
                return i;
            }
            i++;
        }
        else if (c == "'" || c == '"') {
            var i = g.skip_string (s, i);
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_to_end_of_line (s, i);
        }
        else if (g.match (s, i, '/*')) {
            var i = g.skip_block_comment (s, i);
        }
        else {
            i++;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.322">export var skip_pascal_begin_end = function (s, i) {
    var level = 1;
    var i = g.skip_c_id (s, i);
    while (i &lt; len (s)) {
        var ch = s [i];
        if (ch == '{') {
            var i = g.skip_pascal_braces (s, i);
        }
        else if (ch == '"' || ch == "'") {
            var i = g.skip_pascal_string (s, i);
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_line (s, i);
        }
        else if (g.match (s, i, '(*')) {
            var i = g.skip_pascal_block_comment (s, i);
        }
        else if (g.match_c_word (s, i, 'end')) {
            level--;
            if (level == 0) {
                return i;
            }
            var i = g.skip_c_id (s, i);
        }
        else if (g.is_c_id (ch)) {
            var j = i;
            var i = g.skip_c_id (s, i);
            var py_name = s.__getslice__ (j, i, 1);
            if (__in__ (py_name, ['begin', 'case', 'class', 'record', 'try'])) {
                level++;
            }
        }
        else {
            i++;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.323">export var skip_pascal_block_comment = function (s, i) {
    var j = i;
    var i = s.find ('*)', i);
    if (i &gt; -(1)) {
        return i + 2;
    }
    g.scanError ('Run on comment' + s.__getslice__ (j, i, 1));
    return len (s);
};
</t>
<t tx="ekr.20201227092410.324">export var skip_pascal_string = function (s, i) {
    var j = i;
    var delim = s [i];
    i++;
    while (i &lt; len (s)) {
        if (s [i] == delim) {
            return i + 1;
        }
        i++;
    }
    g.scanError ('Run on string: ' + s.__getslice__ (j, i, 1));
    return i;
};
</t>
<t tx="ekr.20201227092410.325">export var skip_heredoc_string = function (s, i) {
    var j = i;
    var m = re.match ('\\&lt;\\&lt;\\&lt;([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)', s.__getslice__ (i, null, 1));
    if (m === null) {
        i += 3;
        return i;
    }
    var delim = m.group (1) + '\n';
    var i = g.skip_line (s, i);
    var n = len (s);
    while (i &lt; n &amp;&amp; !(g.match (s, i, delim))) {
        var i = g.skip_line (s, i);
    }
    if (i &gt;= n) {
        g.scanError ('Run on string: ' + s.__getslice__ (j, i, 1));
    }
    else if (g.match (s, i, delim)) {
        i += len (delim);
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.326">export var skip_pp_directive = function (s, i) {
    while (i &lt; len (s)) {
        if (g.is_nl (s, i)) {
            if (g.escaped (s, i)) {
                var i = g.skip_nl (s, i);
            }
            else {
                break;
            }
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_to_end_of_line (s, i);
        }
        else if (g.match (s, i, '/*')) {
            var i = g.skip_block_comment (s, i);
        }
        else {
            i++;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.327">export var skip_pp_if = function (s, i) {
    var start_line = g.get_line (s, i);
    var i = g.skip_line (s, i);
    var __left0__ = g.skip_pp_part (s, i);
    var i = __left0__ [0];
    var delta1 = __left0__ [1];
    var i = g.skip_ws (s, i);
    if (g.match_word (s, i, '#else')) {
        var i = g.skip_line (s, i);
        var i = g.skip_ws (s, i);
        var __left0__ = g.skip_pp_part (s, i);
        var i = __left0__ [0];
        var delta2 = __left0__ [1];
        if (delta1 != delta2) {
            g.es ('#if and #else parts have different braces:', start_line);
        }
    }
    var i = g.skip_ws (s, i);
    if (g.match_word (s, i, '#endif')) {
        var i = g.skip_line (s, i);
    }
    else {
        g.es ('no matching #endif:', start_line);
    }
    return tuple ([i, delta1]);
};
</t>
<t tx="ekr.20201227092410.328">export var skip_pp_part = function (s, i) {
    var delta = 0;
    while (i &lt; len (s)) {
        var c = s [i];
        if (g.match_word (s, i, '#if') || g.match_word (s, i, '#ifdef') || g.match_word (s, i, '#ifndef')) {
            var __left0__ = g.skip_pp_if (s, i);
            var i = __left0__ [0];
            var delta1 = __left0__ [1];
            delta += delta1;
        }
        else if (g.match_word (s, i, '#else') || g.match_word (s, i, '#endif')) {
            return tuple ([i, delta]);
        }
        else if (c == "'" || c == '"') {
            var i = g.skip_string (s, i);
        }
        else if (c == '{') {
            delta++;
            i++;
        }
        else if (c == '}') {
            delta--;
            i++;
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_line (s, i);
        }
        else if (g.match (s, i, '/*')) {
            var i = g.skip_block_comment (s, i);
        }
        else {
            i++;
        }
    }
    return tuple ([i, delta]);
};
</t>
<t tx="ekr.20201227092410.329">export var skip_python_string = function (s, i, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    if (g.match (s, i, "'''") || g.match (s, i, '"""')) {
        var j = i;
        var delim = s [i] * 3;
        i += 3;
        var k = s.find (delim, i);
        if (k &gt; -(1)) {
            return k + 3;
        }
        if (verbose) {
            g.scanError ('Run on triple quoted string: ' + s.__getslice__ (j, i, 1));
        }
        return len (s);
    }
    return g.skip_string (s, i, __kwargtrans__ ({verbose: verbose}));
};
</t>
<t tx="ekr.20201227092410.33">get __init__ () {return __get__ (this, function (self, encoding, fromString) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = 'utf-8';
    };
    if (typeof fromString == 'undefined' || (fromString != null &amp;&amp; fromString.hasOwnProperty ("__kwargtrans__"))) {;
        var fromString = null;
    };
    self.encoding = encoding || 'utf-8';
    if (fromString) {
        self.list = g.splitLines (fromString);
    }
    else {
        self.list = [];
    }
    self.ptr = 0;
});},
</t>
<t tx="ekr.20201227092410.330">export var skip_string = function (s, i, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    var j = i;
    var delim = s [i];
    i++;
    var n = len (s);
    while (i &lt; n &amp;&amp; s [i] != delim) {
        if (s [i] == '\\') {
            i += 2;
        }
        else {
            i++;
        }
    }
    if (i &gt;= n) {
        if (verbose) {
            g.scanError ('Run on string: ' + s.__getslice__ (j, i, 1));
        }
    }
    else if (s [i] == delim) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.331">export var skip_to_semicolon = function (s, i) {
    var n = len (s);
    while (i &lt; n) {
        var c = s [i];
        if (c == ';') {
            return i;
        }
        if (c == "'" || c == '"') {
            var i = g.skip_string (s, i);
        }
        else if (g.match (s, i, '//')) {
            var i = g.skip_to_end_of_line (s, i);
        }
        else if (g.match (s, i, '/*')) {
            var i = g.skip_block_comment (s, i);
        }
        else {
            i++;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.332">export var skip_typedef = function (s, i) {
    var n = len (s);
    while (i &lt; n &amp;&amp; g.is_c_id (s [i])) {
        var i = g.skip_c_id (s, i);
        var i = g.skip_ws_and_nl (s, i);
    }
    if (g.match (s, i, '{')) {
        var i = g.skip_braces (s, i);
        var i = g.skip_to_semicolon (s, i);
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.333">export var escaped = function (s, i) {
    var count = 0;
    while (i - 1 &gt;= 0 &amp;&amp; s [i - 1] == '\\') {
        count++;
        i--;
    }
    return __mod__ (count, 2) == 1;
};
</t>
<t tx="ekr.20201227092410.334">export var find_line_start = function (s, i) {
    if (i &lt; 0) {
        return 0;
    }
    var i = s.rfind ('\n', 0, i + 1);
    return (i == -(1) ? 0 : i + 1);
};
</t>
<t tx="ekr.20201227092410.335">export var find_on_line = function (s, i, pattern) {
    var j = s.find ('\n', i);
    if (j == -(1)) {
        var j = len (s);
    }
    var k = s.find (pattern, i, j);
    return k;
};
</t>
<t tx="ekr.20201227092410.336">export var is_c_id = function (ch) {
    return g.isWordChar (ch);
};
</t>
<t tx="ekr.20201227092410.337">export var is_nl = function (s, i) {
    return i &lt; len (s) &amp;&amp; (s [i] == '\n' || s [i] == '\r');
};
</t>
<t tx="ekr.20201227092410.338">export var is_special = function (s, directive) {
    var lws = __in__ (directive, tuple (['@others', '@all']));
    var pattern = (lws ? '^\\s*(%s\\b)' : '^(%s\\b)');
    var pattern = re.compile (__mod__ (pattern, directive), re.MULTILINE);
    var m = re.search (pattern, s);
    if (m) {
        return tuple ([true, m.start (1)]);
    }
    return tuple ([false, -(1)]);
};
</t>
<t tx="ekr.20201227092410.339">export var is_ws = function (c) {
    return c == '\t' || c == ' ';
};
</t>
<t tx="ekr.20201227092410.34">get py_clear () {return __get__ (this, function (self) {
    self.list = [];
});},
</t>
<t tx="ekr.20201227092410.340">export var is_ws_or_nl = function (s, i) {
    return g.is_nl (s, i) || i &lt; len (s) &amp;&amp; g.is_ws (s [i]);
};
</t>
<t tx="ekr.20201227092410.341">export var match = function (s, i, pattern) {
    return s &amp;&amp; pattern &amp;&amp; s.find (pattern, i, i + len (pattern)) == i;
};
</t>
<t tx="ekr.20201227092410.342">export var match_c_word = function (s, i, py_name) {
    var n = len (py_name);
    return py_name &amp;&amp; py_name == s.__getslice__ (i, i + n, 1) &amp;&amp; (i + n == len (s) || !(g.is_c_id (s [i + n])));
};
</t>
<t tx="ekr.20201227092410.343">export var match_ignoring_case = function (s1, s2) {
    return s1 &amp;&amp; s2 &amp;&amp; s1.lower () == s2.lower ();
};
</t>
<t tx="ekr.20201227092410.344">export var match_word = function (s, i, pattern) {
    if (pattern === null) {
        return false;
    }
    if (i &gt; 0 &amp;&amp; g.isWordChar (s [i - 1])) {
        return false;
    }
    var j = len (pattern);
    if (j == 0) {
        return false;
    }
    if (s.find (pattern, i, i + j) != i) {
        return false;
    }
    if (i + j &gt;= len (s)) {
        return true;
    }
    var ch = s [i + j];
    return !(g.isWordChar (ch));
};
</t>
<t tx="ekr.20201227092410.345">export var skip_blank_lines = function (s, i) {
    while (i &lt; len (s)) {
        if (g.is_nl (s, i)) {
            var i = g.skip_nl (s, i);
        }
        else if (g.is_ws (s [i])) {
            var j = g.skip_ws (s, i);
            if (g.is_nl (s, j)) {
                var i = j;
            }
            else {
                break;
            }
        }
        else {
            break;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.346">export var skip_c_id = function (s, i) {
    var n = len (s);
    while (i &lt; n &amp;&amp; g.isWordChar (s [i])) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.347">export var skip_id = function (s, i, chars) {
    if (typeof chars == 'undefined' || (chars != null &amp;&amp; chars.hasOwnProperty ("__kwargtrans__"))) {;
        var chars = null;
    };
    var chars = (chars ? g.toUnicode (chars) : '');
    var n = len (s);
    while (i &lt; n &amp;&amp; (g.isWordChar (s [i]) || __in__ (s [i], chars))) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.348">export var skip_line = function (s, i) {
    if (i &gt;= len (s)) {
        return len (s);
    }
    if (i &lt; 0) {
        var i = 0;
    }
    var i = s.find ('\n', i);
    if (i == -(1)) {
        return len (s);
    }
    return i + 1;
};
</t>
<t tx="ekr.20201227092410.349">export var skip_to_end_of_line = function (s, i) {
    if (i &gt;= len (s)) {
        return len (s);
    }
    if (i &lt; 0) {
        var i = 0;
    }
    var i = s.find ('\n', i);
    if (i == -(1)) {
        return len (s);
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.35">get close () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092410.350">export var skip_to_start_of_line = function (s, i) {
    if (i &gt;= len (s)) {
        return len (s);
    }
    if (i &lt;= 0) {
        return 0;
    }
    var i = s.rfind ('\n', 0, i);
    if (i == -(1)) {
        return 0;
    }
    return i + 1;
};
</t>
<t tx="ekr.20201227092410.351">export var skip_long = function (s, i) {
    var val = 0;
    var i = g.skip_ws (s, i);
    var n = len (s);
    if (i &gt;= n || !(s [i].isdigit ()) &amp;&amp; !__in__ (s [i], '+-')) {
        return tuple ([i, null]);
    }
    var j = i;
    if (__in__ (s [i], '+-')) {
        i++;
    }
    while (i &lt; n &amp;&amp; s [i].isdigit ()) {
        i++;
    }
    try {
        var val = int (s.__getslice__ (j, i, 1));
        return tuple ([i, val]);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return tuple ([i, null]);
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.352">export var skip_nl = function (s, i) {
    if (g.match (s, i, '\r\n')) {
        return i + 2;
    }
    if (g.match (s, i, '\n') || g.match (s, i, '\r')) {
        return i + 1;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.353">export var skip_non_ws = function (s, i) {
    var n = len (s);
    while (i &lt; n &amp;&amp; !(g.is_ws (s [i]))) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.354">export var skip_pascal_braces = function (s, i) {
    if (i == -(1)) {
        return len (s);
    }
    return s.find ('}', i);
};
</t>
<t tx="ekr.20201227092410.355">export var skip_to_char = function (s, i, ch) {
    var j = s.find (ch, i);
    if (j == -(1)) {
        return tuple ([len (s), s.__getslice__ (i, null, 1)]);
    }
    return tuple ([j, s.__getslice__ (i, j, 1)]);
};
</t>
<t tx="ekr.20201227092410.356">export var skip_ws = function (s, i) {
    var n = len (s);
    while (i &lt; n &amp;&amp; g.is_ws (s [i])) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.357">export var skip_ws_and_nl = function (s, i) {
    var n = len (s);
    while (i &lt; n &amp;&amp; (g.is_ws (s [i]) || g.is_nl (s, i))) {
        i++;
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.358">export var backupGitIssues = function (c, base_url) {
    if (typeof base_url == 'undefined' || (base_url != null &amp;&amp; base_url.hasOwnProperty ("__kwargtrans__"))) {;
        var base_url = null;
    };
    if (base_url === null) {
        var base_url = 'https://api.github.com/repos/leo-editor/leo-editor/issues';
    }
    var root = c.lastTopLevel ().insertAfter ();
    root.h = 'Backup of issues: {}'.format (time.strftime ('%Y/%m/%d'));
    var label_list = [];
    GitIssueController ().backup_issues (base_url, c, label_list, root);
    root.expand ();
    c.selectPosition (root);
    c.redraw ();
    g.trace ('done');
};
</t>
<t tx="ekr.20201227092410.359">export var execGitCommand = function (command, directory) {
    if (typeof directory == 'undefined' || (directory != null &amp;&amp; directory.hasOwnProperty ("__kwargtrans__"))) {;
        var directory = null;
    };
    var git_dir = g.os_path_finalize_join (directory, '.git');
    if (!(g.os_path_exists (git_dir))) {
        g.trace ('not found:', git_dir, g.callers ());
        return [];
    }
    if (__in__ ('\n', command)) {
        g.trace ('removing newline from', command);
        var command = command.py_replace ('\n', '');
    }
    var old_dir = os.path.normpath (os.path.abspath (os.curdir));
    if (directory) {
        os.chdir (directory);
    }
    try {
        var p = subprocess.Popen (shlex.py_split (command), __kwargtrans__ ({stdout: subprocess.PIPE, stderr: null, shell: false}));
        var __left0__ = p.communicate ();
        var out = __left0__ [0];
        var err = __left0__ [1];
        var lines = (function () {
            var __accu0__ = [];
            for (var z of g.splitLines (out || [])) {
                __accu0__.append (g.toUnicode (z));
            }
            return __accu0__;
        }) ();
    }
    finally {
        os.chdir (old_dir);
    }
    return lines;
};
</t>
<t tx="ekr.20201227092410.36">get flush () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092410.361">export var getGitIssues = function (c, base_url, label_list, milestone, state) {
    if (typeof base_url == 'undefined' || (base_url != null &amp;&amp; base_url.hasOwnProperty ("__kwargtrans__"))) {;
        var base_url = null;
    };
    if (typeof label_list == 'undefined' || (label_list != null &amp;&amp; label_list.hasOwnProperty ("__kwargtrans__"))) {;
        var label_list = null;
    };
    if (typeof milestone == 'undefined' || (milestone != null &amp;&amp; milestone.hasOwnProperty ("__kwargtrans__"))) {;
        var milestone = null;
    };
    if (typeof state == 'undefined' || (state != null &amp;&amp; state.hasOwnProperty ("__kwargtrans__"))) {;
        var state = null;
    };
    if (base_url === null) {
        var base_url = 'https://api.github.com/repos/leo-editor/leo-editor/issues';
    }
    if (isinstance (label_list, tuple ([list, tuple]))) {
        var root = c.lastTopLevel ().insertAfter ();
        root.h = (milestone ? 'Issues for ' + milestone : 'Backup');
        GitIssueController ().backup_issues (base_url, c, label_list, root);
        root.expand ();
        c.selectPosition (root);
        c.redraw ();
        g.trace ('done');
    }
    else {
        g.trace ('label_list must be a list or tuple', repr (label_list));
    }
};
export var GitIssueController =  __class__ ('GitIssueController', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.362">get backup_issues () {return __get__ (this, function (self, base_url, c, label_list, root, state) {
    if (typeof state == 'undefined' || (state != null &amp;&amp; state.hasOwnProperty ("__kwargtrans__"))) {;
        var state = null;
    };
    self.base_url = base_url;
    self.root = root;
    self.milestone = null;
    if (label_list) {
        for (var state of tuple (['closed', 'open'])) {
            for (var label of label_list) {
                self.get_one_issue (label, state);
            }
        }
    }
    else if (state === null) {
        for (var state of tuple (['closed', 'open'])) {
            var organizer = root.insertAsLastChild ();
            organizer.h = '{} issues...'.format (state);
            self.get_all_issues (label_list, organizer, state);
        }
    }
    else if (__in__ (state, tuple (['closed', 'open']))) {
        self.get_all_issues (label_list, root, state);
    }
    else {
        g.es_print ('state must be in (None, "open", "closed")');
    }
});},
</t>
<t tx="ekr.20201227092410.363">get get_all_issues () {return __get__ (this, function (self, label_list, root, state, limit) {
    if (typeof limit == 'undefined' || (limit != null &amp;&amp; limit.hasOwnProperty ("__kwargtrans__"))) {;
        var limit = 100;
    };
});},
</t>
<t tx="ekr.20201227092410.364">get get_issues () {return __get__ (this, function (self, base_url, label_list, milestone, root, state) {
    self.base_url = base_url;
    self.milestone = milestone;
    self.root = root;
    for (var label of label_list) {
        self.get_one_issue (label, state);
    }
});},
</t>
<t tx="ekr.20201227092410.365">get get_one_issue () {return __get__ (this, function (self, label, state, limit) {
    if (typeof limit == 'undefined' || (limit != null &amp;&amp; limit.hasOwnProperty ("__kwargtrans__"))) {;
        var limit = 20;
    };
});},
</t>
<t tx="ekr.20201227092410.366">get get_one_page () {return __get__ (this, function (self, label, page, r, root) {
    if (self.milestone) {
        @others
});},
</t>
<t tx="ekr.20201227092410.367">    var aList = (function () {
        var __accu0__ = [];
        for (var z of r.json ()) {
            if (z.py_get ('milestone') !== null &amp;&amp; self.milestone == z.py_get ('milestone').py_get ('title')) {
                __accu0__.append (z);
            }
        }
        return __accu0__;
    }) ();
}
else {
</t>
<t tx="ekr.20201227092410.368">    var aList = (function () {
        var __accu0__ = [];
        for (var z of r.json ()) {
            __accu0__.append (z);
        }
        return __accu0__;
    }) ();
}
for (var d of aList) {
    var __left0__ = tuple ([d.py_get ('number'), d.py_get ('title')]);
    var n = __left0__ [0];
    var title = __left0__ [1];
    var html_url = d.py_get ('html_url') || self.base_url;
    var p = root.insertAsNthChild (0);
    p.h = '#{}: {}'.format (n, title);
    p.b = '{}\n\n'.format (html_url);
    p.b += d.py_get ('body').strip ();
}
var link = r.headers.py_get ('Link');
var done = !(link) || link.find ('rel="next"') == -(1);
return tuple ([done, len (aList)]);
</t>
<t tx="ekr.20201227092410.369">    get print_header () {return __get__ (this, function (self, r) {
        if (0) {
            print ('Link', r.headers.py_get ('Link'));
        }
        else {
            for (var key of r.headers) {
                print ('{}: {}'.format (key, r.headers.py_get (key)));
            }
        }
    });}
});
</t>
<t tx="ekr.20201227092410.37">get py_get () {return __get__ (this, function (self) {
    return ''.join (self.list);
});},
getvalue: py_get,
read: py_get,
</t>
<t tx="ekr.20201227092410.370">export var getGitVersion = function (directory) {
    if (typeof directory == 'undefined' || (directory != null &amp;&amp; directory.hasOwnProperty ("__kwargtrans__"))) {;
        var directory = null;
    };
    var trace = __in__ ('git', g.app.debug);
    try {
        var s = subprocess.check_output ('git log -n 1 --date=iso', __kwargtrans__ ({cwd: directory || g.app.loadDir, stderr: subprocess.DEVNULL, shell: true}));
        if (trace) {
            g.trace (s);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, subprocess.CalledProcessError)) {
            var e = __except0__;
            var s = e.output;
            if (trace) {
                g.trace ('return code', e.returncode);
                g.trace ('value', repr (s));
                g.es_print ('Exception in g.getGitVersion');
                g.es_exception ();
            }
            var s = g.toUnicode (s);
            if (!(isinstance (s, str))) {
                return tuple (['', '', '']);
            }
        }
        else if (isinstance (__except0__, Exception)) {
            if (trace) {
                g.es_print ('Exception in g.getGitVersion');
                g.es_exception ();
            }
            return tuple (['', '', '']);
        }
        else {
            throw __except0__;
        }
    }
    @others
};
</t>
<t tx="ekr.20201227092410.371">var info = (function () {
    var __accu0__ = [];
    for (var z of s.splitlines ()) {
        __accu0__.append (g.toUnicode (z));
    }
    return __accu0__;
}) ();
</t>
<t tx="ekr.20201227092410.372">var find = function (kind) {
    for (var z of info) {
        if (z.startswith (kind)) {
            return z.lstrip (kind).lstrip (':').strip ();
        }
    }
    return '';
};
return tuple ([find ('Author'), find ('commit').__getslice__ (0, 10, 1), find ('Date')]);
</t>
<t tx="ekr.20201227092410.373">export var gitBranchName = function (path) {
    if (typeof path == 'undefined' || (path != null &amp;&amp; path.hasOwnProperty ("__kwargtrans__"))) {;
        var path = null;
    };
    var __left0__ = g.gitInfo (path);
    var branch = __left0__ [0];
    var commit = __left0__ [1];
    return branch;
};
</t>
<t tx="ekr.20201227092410.374">export var gitCommitNumber = function (path) {
    if (typeof path == 'undefined' || (path != null &amp;&amp; path.hasOwnProperty ("__kwargtrans__"))) {;
        var path = null;
    };
    var __left0__ = g.gitInfo (path);
    var branch = __left0__ [0];
    var commit = __left0__ [1];
    return commit;
};
</t>
<t tx="ekr.20201227092410.375">export var gitInfoForFile = function (filename) {
    return g.gitInfo (filename);
};
</t>
<t tx="ekr.20201227092410.376">export var gitInfoForOutline = function (c) {
    return g.gitInfoForFile (c.fileName ());
};
</t>
<t tx="ekr.20201227092410.377">export var gitDescribe = function (path) {
    if (typeof path == 'undefined' || (path != null &amp;&amp; path.hasOwnProperty ("__kwargtrans__"))) {;
        var path = null;
    };
    var describe = g.execGitCommand ('git describe --tags --long', path);
    var __left0__ = describe [0].rsplit ('-', 2);
    var tag = __left0__ [0];
    var distance = __left0__ [1];
    var commit = __left0__ [2];
    if (__in__ ('g', commit.__getslice__ (0, null, 1))) {
        var commit = commit.__getslice__ (1, null, 1);
    }
    var commit = commit.rstrip ();
    return tuple ([tag, distance, commit]);
};
</t>
<t tx="ekr.20201227092410.378">export var gitHeadPath = function (path) {
    return null;
};
</t>
<t tx="ekr.20201227092410.379">export var gitInfo = function (path) {
    if (typeof path == 'undefined' || (path != null &amp;&amp; path.hasOwnProperty ("__kwargtrans__"))) {;
        var path = null;
    };
    var __left0__ = tuple (['', '']);
    var branch = __left0__ [0];
    var commit = __left0__ [1];
    if (path === null) {
        var path = os.path.dirname ('c:/vs-code-devel/leojs4/leoGlobals.py');
    }
    if (!(os.path.isdir (path))) {
        var path = os.path.dirname (path);
    }
    var path = g.gitHeadPath (path);
    if (!(path)) {
        return tuple ([branch, commit]);
    }
    try {
        var f = open (path);
        try {
            f.__enter__ ();
            var s = f.read ();
            if (!(s.startswith ('ref'))) {
                var branch = 'None';
                var commit = s.__getslice__ (0, 7, 1);
                return tuple ([branch, commit]);
            }
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        var pointer = s.py_split () [1];
        var dirs = pointer.py_split ('/');
        var branch = dirs [-(1)];
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            g.trace ('can not open:', path);
            return tuple ([branch, commit]);
        }
        else {
            throw __except0__;
        }
    }
    var git_dir = g.os_path_finalize_join (path, '..');
    try {
        var path = g.os_path_finalize_join (git_dir, pointer);
        var f = open (path);
        try {
            f.__enter__ ();
            var s = f.read ();
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
        var commit = s.strip ().__getslice__ (0, 12, 1);
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            try {
                var path = g.os_path_finalize_join (git_dir, 'packed-refs');
                var f = open (path);
                try {
                    f.__enter__ ();
                    for (var line of f) {
                        if (line.strip ().endswith (' ' + pointer)) {
                            var commit = line.py_split () [0].__getslice__ (0, 12, 1);
                            break;
                        }
                    }
                    f.__exit__ ();
                }
                catch (__except1__) {
                    if (! (f.__exit__ (__except1__.name, __except1__, __except1__.stack))) {
                        throw __except1__;
                    }
                }
            }
            catch (__except1__) {
                if (isinstance (__except1__, IOError)) {
                    // pass;
                }
                else {
                    throw __except1__;
                }
            }
        }
        else {
            throw __except0__;
        }
    }
    return tuple ([branch, commit]);
};
</t>
<t tx="ekr.20201227092410.38">get readline () {return __get__ (this, function (self) {
    if (self.ptr &lt; len (self.list)) {
        var line = self.list [self.ptr];
        self.ptr++;
        return line;
    }
    return '';
});},
</t>
<t tx="ekr.20201227092410.380">export var dummy_act_on_node = function (c, p, event) {
    // pass;
};
export var act_on_node = dummy_act_on_node;
export var childrenModifiedSet = set ();
export var contentModifiedSet = set ();
</t>
<t tx="ekr.20201227092410.381">export var doHook = function (tag) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    if (g.app.killed || g.app.hookError) {
        return null;
    }
    if (args) {
        g.pr ('***ignoring args param.  tag = {}'.format (tag));
    }
    if (!(g.app.config.use_plugins)) {
        if (__in__ (tag, tuple (['open0', 'start1']))) {
            g.warning ('Plugins disabled: use_plugins is 0 in a leoSettings.leo file.');
        }
        return null;
    }
    var c = keywords.py_get ('c');
    var f = c &amp;&amp; c.hookFunction || g.app.hookFunction;
    if (!(f)) {
        var __left0__ = g.app.pluginsController.doPlugins;
        g.app.hookFunction = __left0__;
        var f = __left0__;
    }
    try {
        return f (tag, keywords);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ();
            g.app.hookError = true;
            g.app.idle_time_hooks_enabled = false;
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.382">export var loadOnePlugin = function (pluginName, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    var pc = g.app.pluginsController;
    return pc.loadOnePlugin (pluginName, __kwargtrans__ ({verbose: verbose}));
};
</t>
<t tx="ekr.20201227092410.383">export var registerExclusiveHandler = function (tags, fn) {
    var pc = g.app.pluginsController;
    return pc.registerExclusiveHandler (tags, fn);
};
</t>
<t tx="ekr.20201227092410.384">export var registerHandler = function (tags, fn) {
    var pc = g.app.pluginsController;
    return pc.registerHandler (tags, fn);
};
</t>
<t tx="ekr.20201227092410.385">export var plugin_signon = function (module_name, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    var pc = g.app.pluginsController;
    return pc.plugin_signon (module_name, verbose);
};
</t>
<t tx="ekr.20201227092410.386">export var unloadOnePlugin = function (moduleOrFileName, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    var pc = g.app.pluginsController;
    return pc.unloadOnePlugin (moduleOrFileName, verbose);
};
</t>
<t tx="ekr.20201227092410.387">export var unregisterHandler = function (tags, fn) {
    var pc = g.app.pluginsController;
    return pc.unregisterHandler (tags, fn);
};
</t>
<t tx="ekr.20201227092410.388">export var getHandlersForTag = function (tags) {
    var pc = g.app.pluginsController;
    return pc.getHandlersForTag (tags);
};
</t>
<t tx="ekr.20201227092410.389">export var getLoadedPlugins = function () {
    var pc = g.app.pluginsController;
    return pc.getLoadedPlugins ();
};
</t>
<t tx="ekr.20201227092410.39">    get write () {return __get__ (this, function (self, s) {
        if (s) {
            if (isinstance (s, bytes)) {
                var s = g.toUnicode (s, self.encoding);
            }
            self.list.append (s);
        }
    });}
});
export var fileLikeObject = FileLikeObject;
export var GeneralSetting =  __class__ ('GeneralSetting', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.390">export var getPluginModule = function (moduleName) {
    var pc = g.app.pluginsController;
    return pc.getPluginModule (moduleName);
};
</t>
<t tx="ekr.20201227092410.391">export var pluginIsLoaded = function (fn) {
    var pc = g.app.pluginsController;
    return pc.isLoaded (fn);
};
</t>
<t tx="ekr.20201227092410.392">export var disableIdleTimeHook = function () {
    g.app.idle_time_hooks_enabled = false;
};
</t>
<t tx="ekr.20201227092410.393">export var enableIdleTimeHook = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.app.idle_time_hooks_enabled = true;
};
</t>
<t tx="ekr.20201227092410.394">export var IdleTime = function (handler, delay, tag) {
    if (typeof delay == 'undefined' || (delay != null &amp;&amp; delay.hasOwnProperty ("__kwargtrans__"))) {;
        var delay = 500;
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = null;
    };
    try {
        return g.app.gui.idleTimeClass (handler, delay, tag);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.395">export var idleTimeHookHandler = function (timer) {
    g.es_print ('Replaced by IdleTimeManager.on_idle');
    g.trace (g.callers ());
};
</t>
<t tx="ekr.20201227092410.396">export var cantImport = function (moduleName, pluginName, verbose) {
    if (typeof pluginName == 'undefined' || (pluginName != null &amp;&amp; pluginName.hasOwnProperty ("__kwargtrans__"))) {;
        var pluginName = null;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    var s = 'Can not import {}'.format (moduleName);
    if (pluginName) {
        var s = s + ' from {}'.format (pluginName);
    }
    if (!(g.app) || !(g.app.gui)) {
        print (s);
    }
    else if (g.unitTesting) {
        return ;
    }
    else {
        g.warning ('', s);
    }
};
</t>
<t tx="ekr.20201227092410.397">export var import_module = function (py_name, package) {
    if (typeof package == 'undefined' || (package != null &amp;&amp; package.hasOwnProperty ("__kwargtrans__"))) {;
        var package = null;
    };
    var trace = true || __in__ ('plugins', g.app.debug);
    var exceptions = [];
    try {
        var m = importlib.import_module (py_name, __kwargtrans__ ({package: package}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            var e = __except0__;
            var m = null;
            if (trace) {
                var __left0__ = sys.exc_info ();
                var t = __left0__ [0];
                var v = __left0__ [1];
                var tb = __left0__ [2];
                var v = v || str (t);
                if (!__in__ (v, exceptions)) {
                    exceptions.append (v);
                    g.trace ('Can not import {}: {}'.format (py_name, e));
                }
            }
        }
        else {
            throw __except0__;
        }
    }
    return m;
};
</t>
<t tx="ekr.20201227092410.398">export var convertPythonIndexToRowCol = function (s, i) {
    if (!(s) || i &lt;= 0) {
        return tuple ([0, 0]);
    }
    var i = min (i, len (s));
    var row = s.count ('\n', 0, i);
    if (row == 0) {
        return tuple ([row, i]);
    }
    var prevNL = s.rfind ('\n', 0, i);
    return tuple ([row, (i - prevNL) - 1]);
};
</t>
<t tx="ekr.20201227092410.399">export var convertRowColToPythonIndex = function (s, row, col, lines) {
    if (typeof lines == 'undefined' || (lines != null &amp;&amp; lines.hasOwnProperty ("__kwargtrans__"))) {;
        var lines = null;
    };
    if (row &lt; 0) {
        return 0;
    }
    if (lines === null) {
        var lines = g.splitLines (s);
    }
    if (row &gt;= len (lines)) {
        return len (s);
    }
    var col = min (col, len (lines [row]));
    var prev = 0;
    for (var line of lines.__getslice__ (0, row, 1)) {
        prev += len (line);
    }
    return prev + col;
};
</t>
<t tx="ekr.20201227092410.4">export var check_cmd_instance_dict = function (c, g) {
    var d = cmd_instance_dict;
    for (var key of d) {
        var ivars = d.py_get (key);
        var obj = ivars2instance (c, g, ivars);
        if (obj) {
            var py_name = obj.__class__.__name__;
            if (py_name != key) {
                g.trace ('class mismatch', key, py_name);
            }
        }
    }
};
export var Command =  __class__ ('Command', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.40">get __init__ () {return __get__ (this, function (self, kind, encoding, ivar, setting, val, path, tag, unl) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = null;
    };
    if (typeof ivar == 'undefined' || (ivar != null &amp;&amp; ivar.hasOwnProperty ("__kwargtrans__"))) {;
        var ivar = null;
    };
    if (typeof setting == 'undefined' || (setting != null &amp;&amp; setting.hasOwnProperty ("__kwargtrans__"))) {;
        var setting = null;
    };
    if (typeof val == 'undefined' || (val != null &amp;&amp; val.hasOwnProperty ("__kwargtrans__"))) {;
        var val = null;
    };
    if (typeof path == 'undefined' || (path != null &amp;&amp; path.hasOwnProperty ("__kwargtrans__"))) {;
        var path = null;
    };
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = 'setting';
    };
    if (typeof unl == 'undefined' || (unl != null &amp;&amp; unl.hasOwnProperty ("__kwargtrans__"))) {;
        var unl = null;
    };
    self.encoding = encoding;
    self.ivar = ivar;
    self.kind = kind;
    self.path = path;
    self.unl = unl;
    self.setting = setting;
    self.val = val;
    self.tag = tag;
});},
</t>
<t tx="ekr.20201227092410.400">export var getWord = function (s, i) {
    if (i &gt;= len (s)) {
        var i = len (s) - 1;
    }
    if (i &lt; 0) {
        var i = 0;
    }
    while ((0 &lt;= i &amp;&amp; i &lt; len (s)) &amp;&amp; g.isWordChar (s [i])) {
        i--;
    }
    i++;
    var j = i;
    while ((0 &lt;= j &amp;&amp; j &lt; len (s)) &amp;&amp; g.isWordChar (s [j])) {
        j++;
    }
    return tuple ([i, j]);
};
</t>
<t tx="ekr.20201227092410.401">export var getLine = function (s, i) {
    if (i &gt; len (s)) {
        var i = len (s) - 1;
    }
    if (i &lt; 0) {
        var i = 0;
    }
    var j = s.rfind ('\n', 0, i);
    if (j == -(1)) {
        var j = 0;
    }
    else {
        j++;
    }
    var k = s.find ('\n', i);
    if (k == -(1)) {
        var k = len (s);
    }
    else {
        var k = k + 1;
    }
    return tuple ([j, k]);
};
</t>
<t tx="ekr.20201227092410.402">export var toPythonIndex = function (s, index) {
    if (index === null) {
        return 0;
    }
    if (isinstance (index, int)) {
        return index;
    }
    if (index == '1.0') {
        return 0;
    }
    if (index == 'end') {
        return len (s);
    }
    var data = index.py_split ('.');
    if (len (data) == 2) {
        var __left0__ = data;
        var row = __left0__ [0];
        var col = __left0__ [1];
        var __left0__ = tuple ([int (row), int (col)]);
        var row = __left0__ [0];
        var col = __left0__ [1];
        var i = g.convertRowColToPythonIndex (s, row - 1, col);
        return i;
    }
    g.trace ('bad string index: {}'.format (index));
    return 0;
};
</t>
<t tx="ekr.20201227092410.403">export var flatten_list = function* (obj) {
    if (isinstance (obj, dict) &amp;&amp; obj.py_get ('_join_list')) {
        var indent = obj.py_get ('indent') || '';
        var leading = obj.py_get ('leading') || '';
        var sep = obj.py_get ('sep') || '';
        var trailing = obj.py_get ('trailing') || '';
        var aList = obj.py_get ('aList');
        for (var [i, item] of enumerate (aList)) {
            if (leading) {
                yield leading;
            }
            for (var s of flatten_list (item)) {
                if (indent &amp;&amp; s.startswith ('\n')) {
                    yield ('\n' + indent) + s.__getslice__ (1, null, 1);
                }
                else {
                    yield s;
                }
            }
            if (sep &amp;&amp; i &lt; len (aList) - 1) {
                yield sep;
            }
            if (trailing) {
                yield trailing;
            }
        }
    }
    else if (isinstance (obj, tuple ([list, tuple]))) {
        for (var obj2 of obj) {
            for (var s of flatten_list (obj2)) {
                yield s;
            }
        }
    }
    else if (obj) {
        if (isinstance (obj, str)) {
            yield obj;
        }
        else {
            yield repr (obj);
        }
    }
    else {
        // pass;
    }
    };
</t>
<t tx="ekr.20201227092410.404">export var join_list = function (aList, indent, leading, sep, trailing) {
    if (typeof indent == 'undefined' || (indent != null &amp;&amp; indent.hasOwnProperty ("__kwargtrans__"))) {;
        var indent = '';
    };
    if (typeof leading == 'undefined' || (leading != null &amp;&amp; leading.hasOwnProperty ("__kwargtrans__"))) {;
        var leading = '';
    };
    if (typeof sep == 'undefined' || (sep != null &amp;&amp; sep.hasOwnProperty ("__kwargtrans__"))) {;
        var sep = '';
    };
    if (typeof trailing == 'undefined' || (trailing != null &amp;&amp; trailing.hasOwnProperty ("__kwargtrans__"))) {;
        var trailing = '';
    };
    if (!(aList)) {
        return null;
    }
    if (indent || leading || sep || trailing) {
        return dict ({'_join_list': true, 'aList': aList, 'indent': indent, 'leading': leading, 'sep': sep, 'trailing': trailing});
    }
    return aList;
};
</t>
<t tx="ekr.20201227092410.405">export var list_to_string = function (obj) {
    return ''.join ((function () {
        var __accu0__ = [];
        for (var z of flatten_list (obj)) {
            __accu0__.append (z);
        }
        return __accu0__;
    }) ());
};
</t>
<t tx="ekr.20201227092410.407">export var isascii = function (s) {
    return all ((function () {
        var __accu0__ = [];
        for (var ch of s) {
            __accu0__.append (ord (ch) &lt; 128);
        }
        return py_iter (__accu0__);
    }) ());
};
</t>
<t tx="ekr.20201227092410.409">export var angleBrackets = function (s) {
    var lt = '&lt;&lt;';
    var rt = '&gt;&gt;';
    return (lt + s) + rt;
};
export var virtual_event_name = angleBrackets;
</t>
<t tx="ekr.20201227092410.41">    get __repr__ () {return __get__ (this, function (self) {
        var val = str (self.val).py_replace ('\n', ' ');
        return 'GS: {} {} = {}'.format (g.shortFileName (self.path), self.kind, g.truncate (val, 50));
    });},
    dump: __repr__,
    __str__: __repr__
});
export var KeyStroke =  __class__ ('KeyStroke', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.410">export var ensureLeadingNewlines = function (s, n) {
    var s = g.removeLeading (s, '\t\n\r ');
    return '\n' * n + s;
};
</t>
<t tx="ekr.20201227092410.411">export var ensureTrailingNewlines = function (s, n) {
    var s = g.removeTrailing (s, '\t\n\r ');
    return s + '\n' * n;
};
</t>
<t tx="ekr.20201227092410.412">export var longestCommonPrefix = function (s1, s2) {
    var prefix = '';
    for (var ch of s1) {
        if (s2.startswith (prefix + ch)) {
            var prefix = prefix + ch;
        }
        else {
            return prefix;
        }
    }
    return prefix;
};
</t>
<t tx="ekr.20201227092410.413">export var itemsMatchingPrefixInList = function (s, aList, matchEmptyPrefix) {
    if (typeof matchEmptyPrefix == 'undefined' || (matchEmptyPrefix != null &amp;&amp; matchEmptyPrefix.hasOwnProperty ("__kwargtrans__"))) {;
        var matchEmptyPrefix = false;
    };
    if (s) {
        var pmatches = (function () {
            var __accu0__ = [];
            for (var a of aList) {
                if (a.startswith (s)) {
                    __accu0__.append (a);
                }
            }
            return __accu0__;
        }) ();
    }
    else if (matchEmptyPrefix) {
        var pmatches = aList.__getslice__ (0, null, 1);
    }
    else {
        var pmatches = [];
    }
    if (pmatches) {
        pmatches.py_sort ();
        var common_prefix = reduce (g.longestCommonPrefix, pmatches);
    }
    else {
        var common_prefix = '';
    }
    return tuple ([pmatches, common_prefix]);
};
</t>
<t tx="ekr.20201227092410.415">export var removeLeading = function (s, chars) {
    var i = 0;
    while (i &lt; len (s) &amp;&amp; __in__ (s [i], chars)) {
        i++;
    }
    return s.__getslice__ (i, null, 1);
};
</t>
<t tx="ekr.20201227092410.416">export var removeTrailing = function (s, chars) {
    var i = len (s) - 1;
    while (i &gt;= 0 &amp;&amp; __in__ (s [i], chars)) {
        i--;
    }
    i++;
    return s.__getslice__ (0, i, 1);
};
</t>
<t tx="ekr.20201227092410.417">export var stripBrackets = function (s) {
    if (s.startswith ('&lt;')) {
        var s = s.__getslice__ (1, null, 1);
    }
    if (s.endswith ('&gt;')) {
        var s = s.__getslice__ (0, -(1), 1);
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.418">export var unCamel = function (s) {
    var __left0__ = tuple ([[], []]);
    var result = __left0__ [0];
    var word = __left0__ [1];
    for (var ch of s) {
        if (ch.isalpha () &amp;&amp; ch.isupper ()) {
            if (word) {
                result.append (''.join (word));
            }
            var word = [ch];
        }
        else if (ch.isalpha ()) {
            word.append (ch);
        }
        else if (word) {
            result.append (''.join (word));
            var word = [];
        }
    }
    if (word) {
        result.append (''.join (word));
    }
    return result;
};
export var checkUnicode_dict = dict ({});
</t>
<t tx="ekr.20201227092410.419">export var checkUnicode = function (s, encoding) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = null;
    };
    if (isinstance (s, str)) {
        return s;
    }
    var tag = 'g.checkUnicode';
    if (!(isinstance (s, bytes))) {
        g.error ('{}: unexpected argument: {}'.format (tag, s));
        return '';
    }
    var callers = g.callers (1);
    if (!__in__ (callers, checkUnicode_dict)) {
        g.trace (g.callers ());
        g.error ('\n{}: expected unicode. got: {}\n'.format (tag, s));
        checkUnicode_dict [callers] = true;
    }
    if (!(encoding)) {
        var encoding = 'utf-8';
    }
    try {
        var s = s.decode (encoding, 'strict');
    }
    catch (__except0__) {
        if (isinstance (__except0__, tuple ([UnicodeDecodeError, UnicodeError]))) {
            var s = s.decode (encoding, 'replace');
            g.trace (g.callers ());
            g.error ('{}: unicode error. encoding: {}, s:\n{}'.format (tag, encoding, s));
        }
        else if (isinstance (__except0__, Exception)) {
            g.trace (g.callers ());
            g.es_excption ();
            g.error ('{}: unexpected error! encoding: {}, s:\n{}'.format (tag, encoding, s));
        }
        else {
            throw __except0__;
        }
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.42">get __init__ () {return __get__ (this, function (self, binding) {
    if (binding) {
        self.s = self.finalize_binding (binding);
    }
    else {
        self.s = null;
    }
});},
</t>
<t tx="ekr.20201227092410.420">export var getPythonEncodingFromString = function (s) {
    var encoding = null;
    var __left0__ = tuple (['# -*- coding:', '-*-']);
    var tag = __left0__ [0];
    var tag2 = __left0__ [1];
    var __left0__ = tuple ([len (tag), len (tag2)]);
    var n1 = __left0__ [0];
    var n2 = __left0__ [1];
    if (s) {
        var s = g.toUnicode (s, __kwargtrans__ ({encoding: 'ascii', reportErrors: false}));
        var lines = g.splitLines (s);
        var line1 = lines [0].strip ();
        if (line1.startswith (tag) &amp;&amp; line1.endswith (tag2)) {
            var e = line1.__getslice__ (n1, -(n2), 1).strip ();
            if (e &amp;&amp; g.isValidEncoding (e)) {
                var encoding = e;
            }
        }
        else if (g.match_word (line1, 0, '@first')) {
            var line1 = line1.__getslice__ (len ('@first'), null, 1).strip ();
            if (line1.startswith (tag) &amp;&amp; line1.endswith (tag2)) {
                var e = line1.__getslice__ (n1, -(n2), 1).strip ();
                if (e &amp;&amp; g.isValidEncoding (e)) {
                    var encoding = e;
                }
            }
        }
    }
    return encoding;
};
</t>
<t tx="ekr.20201227092410.421">export var isBytes = function (s) {
    return isinstance (s, bytes);
};
</t>
<t tx="ekr.20201227092410.422">export var isCallable = function (obj) {
    return hasattr (obj, '__call__');
};
</t>
<t tx="ekr.20201227092410.423">export var isInt = function (obj) {
    return isinstance (obj, int);
};
</t>
<t tx="ekr.20201227092410.424">export var isList = function (s) {
    return isinstance (s, list);
};
</t>
<t tx="ekr.20201227092410.425">export var isString = function (s) {
    return isinstance (s, str);
};
</t>
<t tx="ekr.20201227092410.426">export var isUnicode = function (s) {
    return isinstance (s, str);
};
</t>
<t tx="ekr.20201227092410.427">export var isValidEncoding = function (encoding) {
    if (!(encoding)) {
        return false;
    }
    if (sys.platform == 'cli') {
        return true;
    }
};
</t>
<t tx="ekr.20201227092410.428">export var isWordChar = function (ch) {
    return ch &amp;&amp; (ch.isalnum () || ch == '_');
};
</t>
<t tx="ekr.20201227092410.429">export var isWordChar1 = function (ch) {
    return ch &amp;&amp; (ch.isalpha () || ch == '_');
};
</t>
<t tx="ekr.20201227092410.43">get __eq__ () {return __get__ (this, function (self, other) {
    if (!(other)) {
        return false;
    }
    if (hasattr (other, 's')) {
        return self.s == other.s;
    }
    return self.s == other;
});},
</t>
<t tx="ekr.20201227092410.430">export var stripBOM = function (s) {
    var table = tuple ([tuple ([4, 'utf-32', codecs.BOM_UTF32_BE]), tuple ([4, 'utf-32', codecs.BOM_UTF32_LE]), tuple ([3, 'utf-8', codecs.BOM_UTF8]), tuple ([2, 'utf-16', codecs.BOM_UTF16_BE]), tuple ([2, 'utf-16', codecs.BOM_UTF16_LE])]);
    if (s) {
        for (var [n, e, bom] of table) {
            if (bom == s.__getslice__ (0, len (bom), 1)) {
                return tuple ([e, s.__getslice__ (len (bom), null, 1)]);
            }
        }
    }
    return tuple ([null, s]);
};
</t>
<t tx="ekr.20201227092410.431">export var toEncodedString = function (s, encoding, reportErrors) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = 'utf-8';
    };
    if (typeof reportErrors == 'undefined' || (reportErrors != null &amp;&amp; reportErrors.hasOwnProperty ("__kwargtrans__"))) {;
        var reportErrors = false;
    };
    if (!(g.isUnicode (s))) {
        return s;
    }
    if (!(encoding)) {
        var encoding = 'utf-8';
    }
    try {
        var s = s.encode (encoding, 'strict');
    }
    catch (__except0__) {
        if (isinstance (__except0__, UnicodeError)) {
            var s = s.encode (encoding, 'replace');
            if (reportErrors) {
                g.error ('Error converting {} from unicode to {} encoding'.format (s, encoding));
            }
        }
        else {
            throw __except0__;
        }
    }
    return s;
};
export var unicode_warnings = dict ({});
</t>
<t tx="ekr.20201227092410.432">export var toUnicode = function (s, encoding, reportErrors) {
    if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
        var encoding = null;
    };
    if (typeof reportErrors == 'undefined' || (reportErrors != null &amp;&amp; reportErrors.hasOwnProperty ("__kwargtrans__"))) {;
        var reportErrors = false;
    };
    if (isinstance (s, str)) {
        return s;
    }
    var tag = 'g.toUnicode';
    if (!(isinstance (s, bytes))) {
        if (!(isinstance (s, tuple ([NullObject, TracingNullObject])))) {
            var callers = g.callers ();
            if (!__in__ (callers, unicode_warnings)) {
                unicode_warnings [callers] = true;
                g.error ('{}: unexpected argument of type {}'.format (tag, s.__class__.__name__));
                g.trace (callers);
            }
        }
        return '';
    }
    if (!(encoding)) {
        var encoding = 'utf-8';
    }
    try {
        var s = s.decode (encoding, 'strict');
    }
    catch (__except0__) {
        if (isinstance (__except0__, tuple ([UnicodeDecodeError, UnicodeError]))) {
            var s = s.decode (encoding, 'replace');
            if (reportErrors) {
                g.error ('{}: unicode error. encoding: {}, s:\n{}'.format (tag, encoding, s));
                g.trace (g.callers ());
            }
        }
        else if (isinstance (__except0__, Exception)) {
            g.es_exception ();
            g.error ('{}: unexpected error! encoding: {}, s:\n{}'.format (tag, encoding, s));
            g.trace (g.callers ());
        }
        else {
            throw __except0__;
        }
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.433">export var u = function (s) {
    return s;
};
</t>
<t tx="ekr.20201227092410.434">export var computeLeadingWhitespace = function (width, tab_width) {
    if (width &lt;= 0) {
        return '';
    }
    if (tab_width &gt; 1) {
        var tabs = int (width / tab_width);
        var blanks = int (__mod__ (width, tab_width));
        return '\t' * tabs + ' ' * blanks;
    }
    return ' ' * width;
};
</t>
<t tx="ekr.20201227092410.435">export var computeLeadingWhitespaceWidth = function (s, tab_width) {
    var w = 0;
    for (var ch of s) {
        if (ch == ' ') {
            w++;
        }
        else if (ch == '\t') {
            w += abs (tab_width) - __mod__ (w, abs (tab_width));
        }
        else {
            break;
        }
    }
    return w;
};
</t>
<t tx="ekr.20201227092410.436">export var computeWidth = function (s, tab_width) {
    var w = 0;
    for (var ch of s) {
        if (ch == '\t') {
            w += abs (tab_width) - __mod__ (w, abs (tab_width));
        }
        else if (ch == '\n') {
            break;
        }
        else {
            w++;
        }
    }
    return w;
};
</t>
<t tx="ekr.20201227092410.437">export var adjustTripleString = function (s, tab_width) {
    var lines = g.splitLines (s);
    var __left0__ = tuple ([true, 0]);
    var first = __left0__ [0];
    var w = __left0__ [1];
    for (var line of lines) {
        if (line.strip ()) {
            var lws = g.get_leading_ws (line);
            var w2 = abs (g.computeWidth (lws, tab_width));
            if (w2 == 0) {
                return s;
            }
            if (first || w2 &lt; w) {
                var w = w2;
                var first = false;
            }
        }
    }
    if (w == 0) {
        return s;
    }
    var result = (function () {
        var __accu0__ = [];
        for (var line of lines) {
            __accu0__.append (g.removeLeadingWhitespace (line, w, tab_width));
        }
        return __accu0__;
    }) ();
    var result = ''.join (result);
    return result;
};
</t>
<t tx="ekr.20201227092410.439">export var removeExtraLws = function (s, tab_width) {
    var lines = g.splitLines (s);
    var __break0__ = false;
    for (var line of lines) {
        if (line.strip ()) {
            var lws = g.get_leading_ws (line);
            var w = g.computeWidth (lws, tab_width);
            __break0__ = true;
            break;
        }
    }
    if (!__break0__) {
        return s;
    }
    var result = (function () {
        var __accu0__ = [];
        for (var line of lines) {
            __accu0__.append (g.removeLeadingWhitespace (line, w, tab_width));
        }
        return __accu0__;
    }) ();
    var result = ''.join (result);
    return result;
};
</t>
<t tx="ekr.20201227092410.44">get __lt__ () {return __get__ (this, function (self, other) {
    if (!(other)) {
        return false;
    }
    if (hasattr (other, 's')) {
        return self.s &lt; other.s;
    }
    return self.s &lt; other;
});},
</t>
<t tx="ekr.20201227092410.441">export var wrap_lines = function (lines, pageWidth, firstLineWidth) {
    if (typeof firstLineWidth == 'undefined' || (firstLineWidth != null &amp;&amp; firstLineWidth.hasOwnProperty ("__kwargtrans__"))) {;
        var firstLineWidth = null;
    };
    if (pageWidth &lt; 10) {
        var pageWidth = 10;
    }
    if (!(firstLineWidth)) {
        var firstLineWidth = pageWidth;
    }
    if (firstLineWidth &lt; 10) {
        var firstLineWidth = 10;
    }
    var outputLineWidth = firstLineWidth;
    var sentenceSpacingWidth = 1;
    var result = [];
    var line = '';
    for (var s of lines) {
        var i = 0;
        while (i &lt; len (s)) {
            var j = g.skip_ws (s, i);
            var k = g.skip_non_ws (s, j);
            var word = s.__getslice__ (j, k, 1);
            var i = k;
            var wordLen = len (word);
            if (line.endswith ('.') || line.endswith ('?') || line.endswith ('!')) {
                var space = ' ' * sentenceSpacingWidth;
            }
            else {
                var space = ' ';
            }
            if (line &amp;&amp; wordLen &gt; 0) {
                wordLen += len (space);
            }
            if (wordLen + len (line) &lt;= outputLineWidth) {
                if (wordLen &gt; 0) {
                    if (line) {
                        var line = space.join (tuple ([line, word]));
                    }
                    else {
                        var line = word;
                    }
                }
                else {
                    // pass;
                }
            }
            else {
                if (line) {
                    result.append (line);
                    var outputLineWidth = pageWidth;
                }
                var line = word;
                if (len (line) &gt; pageWidth) {
                    result.append (line);
                    var outputLineWidth = pageWidth;
                    var line = '';
                }
            }
        }
    }
    if (line) {
        result.append (line);
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.442">export var get_leading_ws = function (s) {
    var i = 0;
    var n = len (s);
    while (i &lt; n &amp;&amp; __in__ (s [i], tuple ([' ', '\t']))) {
        i++;
    }
    return s.__getslice__ (0, i, 1);
};
</t>
<t tx="ekr.20201227092410.443">export var optimizeLeadingWhitespace = function (line, tab_width) {
    var __left0__ = g.skip_leading_ws_with_indent (line, 0, tab_width);
    var i = __left0__ [0];
    var width = __left0__ [1];
    var s = g.computeLeadingWhitespace (width, tab_width) + line.__getslice__ (i, null, 1);
    return s;
};
</t>
<t tx="ekr.20201227092410.444">export var regularizeTrailingNewlines = function (s, kind) {
    // pass;
};
</t>
<t tx="ekr.20201227092410.445">export var removeBlankLines = function (s) {
    var lines = g.splitLines (s);
    var lines = (function () {
        var __accu0__ = [];
        for (var z of lines) {
            if (z.strip ()) {
                __accu0__.append (z);
            }
        }
        return __accu0__;
    }) ();
    return ''.join (lines);
};
</t>
<t tx="ekr.20201227092410.447">export var removeLeadingBlankLines = function (s) {
    var lines = g.splitLines (s);
    var result = [];
    var remove = true;
    for (var line of lines) {
        if (remove &amp;&amp; !(line.strip ())) {
            // pass;
        }
        else {
            var remove = false;
            result.append (line);
        }
    }
    return ''.join (result);
};
</t>
<t tx="ekr.20201227092410.448">export var removeLeadingWhitespace = function (s, first_ws, tab_width) {
    var j = 0;
    var ws = 0;
    var first_ws = abs (first_ws);
    for (var ch of s) {
        if (ws &gt;= first_ws) {
            break;
        }
        else if (ch == ' ') {
            j++;
            ws++;
        }
        else if (ch == '\t') {
            j++;
            ws += abs (tab_width) - __mod__ (ws, abs (tab_width));
        }
        else {
            break;
        }
    }
    if (j &gt; 0) {
        var s = s.__getslice__ (j, null, 1);
    }
    return s;
};
</t>
<t tx="ekr.20201227092410.449">export var removeTrailingWs = function (s) {
    var j = len (s) - 1;
    while (j &gt;= 0 &amp;&amp; (s [j] == ' ' || s [j] == '\t')) {
        j--;
    }
    return s.__getslice__ (0, j + 1, 1);
};
</t>
<t tx="ekr.20201227092410.45">get __le__ () {return __get__ (this, function (self, other) {
    return self.__lt__ (other) || self.__eq__ (other);
});},
</t>
<t tx="ekr.20201227092410.450">export var skip_leading_ws = function (s, i, ws, tab_width) {
    var count = 0;
    while (count &lt; ws &amp;&amp; i &lt; len (s)) {
        var ch = s [i];
        if (ch == ' ') {
            count++;
            i++;
        }
        else if (ch == '\t') {
            count += abs (tab_width) - __mod__ (count, abs (tab_width));
            i++;
        }
        else {
            break;
        }
    }
    return i;
};
</t>
<t tx="ekr.20201227092410.451">export var skip_leading_ws_with_indent = function (s, i, tab_width) {
    var count = 0;
    var n = len (s);
    while (i &lt; n) {
        var ch = s [i];
        if (ch == ' ') {
            count++;
            i++;
        }
        else if (ch == '\t') {
            count += abs (tab_width) - __mod__ (count, abs (tab_width));
            i++;
        }
        else {
            break;
        }
    }
    return tuple ([i, count]);
};
</t>
<t tx="ekr.20201227092410.452">export var stripBlankLines = function (s) {
    var lines = g.splitLines (s);
    for (var [i, line] of enumerate (lines)) {
        var j = g.skip_ws (line, 0);
        if (j &gt;= len (line)) {
            lines [i] = '';
        }
        else if (line [j] == '\n') {
            lines [i] = '\n';
        }
    }
    return ''.join (lines);
};
</t>
<t tx="ekr.20201227092410.453">export var doKeywordArgs = function (py_keys, d) {
    if (typeof d == 'undefined' || (d != null &amp;&amp; d.hasOwnProperty ("__kwargtrans__"))) {;
        var d = null;
    };
    if (d === null) {
        var d = dict ({});
    }
    var result = dict ({});
    for (var [key, default_val] of d.py_items ()) {
        var isBool = __in__ (default_val, tuple ([true, false]));
        var val = py_keys.py_get (key);
        if (isBool &amp;&amp; __in__ (val, tuple ([true, 'True', 'true']))) {
            result [key] = true;
        }
        else if (isBool &amp;&amp; __in__ (val, tuple ([false, 'False', 'false']))) {
            result [key] = false;
        }
        else if (val === null) {
            result [key] = default_val;
        }
        else {
            result [key] = val;
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.454">export var ecnl = function (tabName) {
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    g.ecnls (1, tabName);
};
</t>
<t tx="ekr.20201227092410.455">export var ecnls = function (n, tabName) {
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    var log = app.log;
    if (log &amp;&amp; !(log.isNull)) {
        while (log.newlines &lt; n) {
            g.enl (tabName);
        }
    }
};
</t>
<t tx="ekr.20201227092410.456">export var enl = function (tabName) {
    if (typeof tabName == 'undefined' || (tabName != null &amp;&amp; tabName.hasOwnProperty ("__kwargtrans__"))) {;
        var tabName = 'Log';
    };
    var log = app.log;
    if (log &amp;&amp; !(log.isNull)) {
        log.newlines++;
        log.putnl (tabName);
    }
};
</t>
<t tx="ekr.20201227092410.457">export var blue = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.es_print (...args, __kwargtrans__ (__mergekwargtrans__ ({color: 'blue'}, py_keys)));
};
</t>
<t tx="ekr.20201227092410.458">export var error = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.es_print (...args, __kwargtrans__ (__mergekwargtrans__ ({color: 'error'}, py_keys)));
};
</t>
<t tx="ekr.20201227092410.459">export var note = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.es_print (...args, __kwargtrans__ (__mergekwargtrans__ ({color: 'note'}, py_keys)));
};
</t>
<t tx="ekr.20201227092410.46">get __ne__ () {return __get__ (this, function (self, other) {
    return !(self.__eq__ (other));
});},
</t>
<t tx="ekr.20201227092410.460">export var red = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.es_print (...args, __kwargtrans__ (__mergekwargtrans__ ({color: 'red'}, py_keys)));
};
</t>
<t tx="ekr.20201227092410.461">export var warning = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.es_print (...args, __kwargtrans__ (__mergekwargtrans__ ({color: 'warning'}, py_keys)));
};
</t>
<t tx="ekr.20201227092410.462">export var es = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    if (!(app) || app.killed) {
        return ;
    }
    if (app.gui &amp;&amp; app.gui.consoleOnly) {
        return ;
    }
    var log = app.log;
    var d = dict ({'color': null, 'commas': false, 'newline': true, 'spaces': true, 'tabName': 'Log', 'nodeLink': null});
    var d = g.doKeywordArgs (py_keys, d);
    var color = d.py_get ('color');
    if (color == 'suppress') {
        return ;
    }
    var color = g.actualColor (color);
    var tabName = d.py_get ('tabName') || 'Log';
    var newline = d.py_get ('newline');
    var s = g.translateArgs (args, d);
    if (app.batchMode) {
        if (app.log) {
            app.log.put (s);
        }
    }
    else if (g.unitTesting) {
        if (log &amp;&amp; !(log.isNull)) {
            g.pr (s, __kwargtrans__ ({newline: newline}));
        }
    }
    else if (log &amp;&amp; app.logInited) {
        if (newline) {
            s += '\n';
        }
        log.put (s, __kwargtrans__ ({color: color, tabName: tabName, nodeLink: d ['nodeLink']}));
        for (var ch of s) {
            if (ch == '\n') {
                log.newlines++;
            }
            else {
                log.newlines = 0;
            }
        }
    }
    else {
        app.logWaiting.append (tuple ([s, color, newline, d]));
    }
};
export var log = es;
</t>
<t tx="ekr.20201227092410.463">export var es_clickable_link = function (c, p, line_number, message) {
    var log = c.frame.log;
    var unl = p.get_UNL (__kwargtrans__ ({with_proto: true, with_count: true}));
    if (unl) {
        var nodeLink = '{},{}'.format (unl, line_number);
        log.put (message, __kwargtrans__ ({nodeLink: nodeLink}));
    }
    else {
        log.put (message);
    }
};
</t>
<t tx="ekr.20201227092410.464">export var es_debug = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    py_keys ['color'] = 'blue';
    try {
        var f1 = sys._getframe (1);
        var code1 = f1.f_code;
        var py_name = code1.co_name;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
        }
        else {
            throw __except0__;
        }
    }
    if (py_name == '&lt;module&gt;') {
        var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
    }
    if (py_name.endswith ('.pyc')) {
        var py_name = py_name.__getslice__ (0, -(1), 1);
    }
    g.pr (py_name, ...args, __kwargtrans__ (py_keys));
    if (!(g.app.unitTesting)) {
        g.es (py_name, ...args, __kwargtrans__ (py_keys));
    }
};
</t>
<t tx="ekr.20201227092410.465">export var es_dump = function (s, n, title) {
    if (typeof n == 'undefined' || (n != null &amp;&amp; n.hasOwnProperty ("__kwargtrans__"))) {;
        var n = 30;
    };
    if (typeof title == 'undefined' || (title != null &amp;&amp; title.hasOwnProperty ("__kwargtrans__"))) {;
        var title = null;
    };
    if (title) {
        g.es_print ('', title);
    }
    var i = 0;
    while (i &lt; len (s)) {
        var aList = ''.join ((function () {
            var __accu0__ = [];
            for (var ch of s.__getslice__ (i, i + n, 1)) {
                __accu0__.append ('{} '.format (ord (ch)));
            }
            return __accu0__;
        }) ());
        g.es_print ('', aList);
        i += n;
    }
};
</t>
<t tx="ekr.20201227092410.467">export var es_error = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var color = py_keys.py_get ('color');
    if (color === null &amp;&amp; g.app.config) {
        py_keys ['color'] = g.app.config.getColor ('log-error-color') || 'red';
    }
    g.es (...args, __kwargtrans__ (py_keys));
};
</t>
<t tx="ekr.20201227092410.468">export var es_print_error = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var color = py_keys.py_get ('color');
    if (color === null &amp;&amp; g.app.config) {
        py_keys ['color'] = g.app.config.getColor ('log-error-color') || 'red';
    }
    g.es_print (...args, __kwargtrans__ (py_keys));
};
</t>
<t tx="ekr.20201227092410.469">export var es_event_exception = function (eventName, full) {
    if (typeof full == 'undefined' || (full != null &amp;&amp; full.hasOwnProperty ("__kwargtrans__"))) {;
        var full = false;
    };
    g.es ('exception handling ', eventName, 'event');
    var __left0__ = sys.exc_info ();
    var typ = __left0__ [0];
    var val = __left0__ [1];
    var tb = __left0__ [2];
    if (full) {
        var errList = traceback.format_exception (typ, val, tb);
    }
    else {
        var errList = traceback.format_exception_only (typ, val);
    }
    for (var i of errList) {
        g.es ('', i);
    }
    if (!(g.stdErrIsRedirected ())) {
        traceback.print_exc ();
    }
};
</t>
<t tx="ekr.20201227092410.47">get __gt__ () {return __get__ (this, function (self, other) {
    return !(self.__lt__ (other)) &amp;&amp; !(self.__eq__ (other));
});},
</t>
<t tx="ekr.20201227092410.470">export var es_exception = function (full, c, color) {
    if (typeof full == 'undefined' || (full != null &amp;&amp; full.hasOwnProperty ("__kwargtrans__"))) {;
        var full = true;
    };
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof color == 'undefined' || (color != null &amp;&amp; color.hasOwnProperty ("__kwargtrans__"))) {;
        var color = 'red';
    };
    var __left0__ = sys.exc_info ();
    var typ = __left0__ [0];
    var val = __left0__ [1];
    var tb = __left0__ [2];
    if (full) {
        var lines = traceback.format_exception (typ, val, tb);
    }
    else {
        var lines = traceback.format_exception_only (typ, val);
    }
    for (var line of lines) {
        g.es_print_error (line, __kwargtrans__ ({color: color}));
    }
    var __left0__ = g.getLastTracebackFileAndLineNumber ();
    var fileName = __left0__ [0];
    var n = __left0__ [1];
    return tuple ([fileName, n]);
};
</t>
<t tx="ekr.20201227092410.471">export var es_exception_type = function (c, color) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof color == 'undefined' || (color != null &amp;&amp; color.hasOwnProperty ("__kwargtrans__"))) {;
        var color = 'red';
    };
    var __left0__ = sys.exc_info ().__getslice__ (0, 2, 1);
    var exctype = __left0__ [0];
    var value = __left0__ [1];
    g.es_print ('', '{}, {}'.format (exctype.__name__, value), __kwargtrans__ ({color: color}));
};
</t>
<t tx="ekr.20201227092410.472">export var es_print = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    g.pr (...args, __kwargtrans__ (py_keys));
    if (g.app &amp;&amp; !(g.app.unitTesting)) {
        g.es (...args, __kwargtrans__ (py_keys));
    }
};
</t>
<t tx="ekr.20201227092410.473">export var es_print_exception = function (full, c, color) {
    if (typeof full == 'undefined' || (full != null &amp;&amp; full.hasOwnProperty ("__kwargtrans__"))) {;
        var full = true;
    };
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof color == 'undefined' || (color != null &amp;&amp; color.hasOwnProperty ("__kwargtrans__"))) {;
        var color = 'red';
    };
    var __left0__ = sys.exc_info ();
    var typ = __left0__ [0];
    var val = __left0__ [1];
    var tb = __left0__ [2];
    if (full) {
        var lines = traceback.format_exception (typ, val, tb);
    }
    else {
        var lines = traceback.format_exception_only (typ, val);
    }
    print (''.join (lines));
    try {
        var __left0__ = g.getLastTracebackFileAndLineNumber ();
        var fileName = __left0__ [0];
        var n = __left0__ [1];
        return tuple ([fileName, n]);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return tuple (['&lt;no file&gt;', 0]);
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.474">export var es_trace = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    if (args) {
        try {
            var s = args [0];
            g.trace (g.toEncodedString (s, 'ascii'));
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                // pass;
            }
            else {
                throw __except0__;
            }
        }
    }
    g.es (...args, __kwargtrans__ (py_keys));
};
</t>
<t tx="ekr.20201227092410.475">export var getLastTracebackFileAndLineNumber = function () {
    var __left0__ = sys.exc_info ();
    var typ = __left0__ [0];
    var val = __left0__ [1];
    var tb = __left0__ [2];
    if (typ == SyntaxError) {
        return tuple ([val.filename, val.lineno]);
    }
    var data = traceback.extract_tb (tb);
    if (data) {
        var item = data [-(1)];
        var __left0__ = item;
        var filename = __left0__ [0];
        var n = __left0__ [1];
        var functionName = __left0__ [2];
        var text = __left0__ [3];
        return tuple ([filename, n]);
    }
    return tuple (['&lt;string&gt;', 0]);
};
</t>
<t tx="ekr.20201227092410.476">export var goto_last_exception = function (c) {
    var __left0__ = sys.exc_info ();
    var typ = __left0__ [0];
    var val = __left0__ [1];
    var tb = __left0__ [2];
    if (tb) {
        var __left0__ = g.getLastTracebackFileAndLineNumber ();
        var file_name = __left0__ [0];
        var line_number = __left0__ [1];
        var line_number = max (0, line_number - 1);
        if (file_name.endswith ('scriptFile.py')) {
            c.goToScriptLineNumber (line_number, c.p);
        }
        else {
            for (var p of c.all_nodes ()) {
                if (p.isAnyAtFileNode () &amp;&amp; p.h.endswith (file_name)) {
                    c.goToLineNumber (line_number, p);
                    return ;
                }
            }
        }
    }
    else {
        g.trace ('No previous exception');
    }
};
</t>
<t tx="ekr.20201227092410.477">export var internalError = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var callers = g.callers (20).py_split (',');
    var caller = callers [-(1)];
    g.error ('\nInternal Leo error in', caller);
    g.es_print (...args);
    g.es_print ('Called from', ', '.join (callers.__getslice__ (0, -(1), 1)));
    g.es_print ("Please report this error to Leo's developers", __kwargtrans__ ({color: 'red'}));
};
</t>
<t tx="ekr.20201227092410.478">export var log_to_file = function (s, fn) {
    if (typeof fn == 'undefined' || (fn != null &amp;&amp; fn.hasOwnProperty ("__kwargtrans__"))) {;
        var fn = null;
    };
    if (fn === null) {
        var fn = g.os_path_expanduser ('~/test/leo_log.txt');
    }
    if (!(s.endswith ('\n'))) {
        var s = s + '\n';
    }
    try {
        var f = open (fn, 'a');
        try {
            f.__enter__ ();
            f.write (s);
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.479">export var pr = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var d = dict ({'commas': false, 'newline': true, 'spaces': true});
    var d = doKeywordArgs (py_keys, d);
    var newline = d.py_get ('newline');
    var stdout = (sys.stdout &amp;&amp; g.unitTesting ? sys.stdout : sys.__stdout__);
    if (!(stdout)) {
        return ;
    }
    if (sys.platform.lower ().startswith ('win')) {
        var encoding = 'ascii';
    }
    else if (getattr (stdout, 'encoding', null)) {
        var encoding = stdout.encoding;
    }
    else {
        var encoding = 'utf-8';
    }
    var s = translateArgs (args, d);
    var s = g.toUnicode (s, __kwargtrans__ ({encoding: encoding, reportErrors: false}));
    if (newline) {
        s += '\n';
    }
    try {
        stdout.write (s);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            // pass;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.48">get __ge__ () {return __get__ (this, function (self, other) {
    return !(self.__lt__ (other));
});},
</t>
<t tx="ekr.20201227092410.480">export var prettyPrintType = function (obj) {
    if (isinstance (obj, str)) {
        return 'string';
    }
    var t = py_typeof (obj);
    if (__in__ (t, tuple ([types.BuiltinFunctionType, types.FunctionType]))) {
        return 'function';
    }
    if (t == types.ModuleType) {
        return 'module';
    }
    if (__in__ (t, [types.MethodType, types.BuiltinMethodType])) {
        return 'method';
    }
    var t = str (py_typeof (obj));
    if (t.startswith ("&lt;type '")) {
        var t = t.__getslice__ (7, null, 1);
    }
    if (t.endswith ("'&gt;")) {
        var t = t.__getslice__ (0, -(2), 1);
    }
    return t;
};
</t>
<t tx="ekr.20201227092410.481">export var print_bindings = function (py_name, window) {
    var bindings = window.bind ();
    g.pr ('\nBindings for', py_name);
    for (var b of bindings) {
        g.pr (b);
    }
};
</t>
<t tx="ekr.20201227092410.482">export var printEntireTree = function (c, tag) {
    if (typeof tag == 'undefined' || (tag != null &amp;&amp; tag.hasOwnProperty ("__kwargtrans__"))) {;
        var tag = '';
    };
    g.pr ('printEntireTree', '=' * 50);
    g.pr ('printEntireTree', tag, 'root', c.rootPosition ());
    for (var p of c.all_positions ()) {
        g.pr ('..' * p.level (), p.v);
    }
};
</t>
<t tx="ekr.20201227092410.483">export var printGlobals = function (message) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    var globs = list (__all__);
    globs.py_sort ();
    if (message) {
        var leader = '-' * 10;
        g.pr (leader, ' ', message, ' ', leader);
    }
    for (var py_name of globs) {
        g.pr (py_name);
    }
};
</t>
<t tx="ekr.20201227092410.484">export var printLeoModules = function (message) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    var mods = [];
    for (var py_name of sys.modules) {
        if (py_name &amp;&amp; py_name.__getslice__ (0, 3, 1) == 'leo') {
            mods.append (py_name);
        }
    }
    if (message) {
        var leader = '-' * 10;
        g.pr (leader, ' ', message, ' ', leader);
    }
    mods.py_sort ();
    for (var m of mods) {
        g.pr (m, __kwargtrans__ ({newline: false}));
    }
    g.pr ('');
};
</t>
<t tx="ekr.20201227092410.485">export var printStack = function () {
    traceback.print_stack ();
};
</t>
<t tx="ekr.20201227092410.486">export var trace = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var d = dict ({'align': 0, 'before': '', 'newline': true, 'caller_level': 1, 'noname': false});
    var d = doKeywordArgs (py_keys, d);
    var newline = d.py_get ('newline');
    var align = d.py_get ('align', 0);
    var caller_level = d.py_get ('caller_level', 1);
    var noname = d.py_get ('noname');
    if (noname) {
        var py_name = '';
    }
    else {
        try {
            var f1 = sys._getframe (caller_level);
            var code1 = f1.f_code;
            var py_name = code1.co_name;
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
            }
            else {
                throw __except0__;
            }
        }
        if (py_name == '&lt;module&gt;') {
            var py_name = g.shortFileName ('c:/vs-code-devel/leojs4/leoGlobals.py');
        }
        if (py_name.endswith ('.pyc')) {
            var py_name = py_name.__getslice__ (0, -(1), 1);
        }
    }
    if (align != 0 &amp;&amp; len (py_name) &lt; abs (align)) {
        var pad = ' ' * (abs (align) - len (py_name));
        if (align &gt; 0) {
            var py_name = py_name + pad;
        }
        else {
            var py_name = pad + py_name;
        }
    }
    var result = (py_name ? [py_name] : []);
    if (isinstance (args, tuple)) {
        var args = list (args);
    }
    if (args &amp;&amp; isString (args [0])) {
        var prefix = '';
        while (args [0].startswith ('\n')) {
            prefix += '\n';
            args [0] = args [0].__getslice__ (1, null, 1);
        }
    }
    else {
        var prefix = '';
    }
    for (var arg of args) {
        if (isString (arg)) {
            // pass;
        }
        else if (isBytes (arg)) {
            var arg = toUnicode (arg);
        }
        else {
            var arg = repr (arg);
        }
        if (result) {
            result.append (' ' + arg);
        }
        else {
            result.append (arg);
        }
    }
    var s = d.py_get ('before') + ''.join (result);
    if (prefix) {
        var prefix = prefix.__getslice__ (1, null, 1);
        pr (prefix);
    }
    pr (s, __kwargtrans__ ({newline: newline}));
};
export var console_encoding = null;
</t>
<t tx="ekr.20201227092410.487">export var translateArgs = function (args, d) {
    if (!(console_encoding)) {
        var e = sys.getdefaultencoding ();
        console_encoding = (isValidEncoding (e) ? e : 'utf-8');
    }
    var result = [];
    var n = 0;
    var spaces = d.py_get ('spaces');
    for (var arg of args) {
        n++;
        if (isinstance (arg, str)) {
            var arg = toUnicode (arg, console_encoding);
        }
        if (!(isString (arg))) {
            var arg = repr (arg);
        }
        else if (__mod__ (n, 2) == 1) {
            var arg = translateString (arg);
        }
        else {
            // pass;
        }
        if (arg) {
            if (result &amp;&amp; spaces) {
                result.append (' ');
            }
            result.append (arg);
        }
    }
    return ''.join (result);
};
</t>
<t tx="ekr.20201227092410.488">export var translateString = function (s) {
    var upper = app &amp;&amp; getattr (app, 'translateToUpperCase', null);
    if (!(isinstance (s, str))) {
        var s = str (s, 'utf-8');
    }
    if (upper) {
        var s = s.upper ();
    }
    else {
        var s = gettext.gettext (s);
    }
    return s;
};
export var tr = translateString;
</t>
<t tx="ekr.20201227092410.489">export var actualColor = function (color) {
    var c = g.app.log &amp;&amp; g.app.log.c;
    if (!(c) || !(c.config)) {
        return color;
    }
    if (color &amp;&amp; color.startswith ('#')) {
        return color;
    }
    if (color === null) {
        var color2 = c.config.getColor ('log-text-foreground-color');
        if (color2) {
            return color2;
        }
        var color2 = c.config.getColor ('log-black-color');
        return color2 || 'black';
    }
    if (color == 'black') {
        var color2 = c.config.getColor ('log-black-color');
        if (color2) {
            return color2;
        }
        var color2 = c.config.getColor ('log-text-foreground-color');
        return color2 || 'black';
    }
    var color2 = c.config.getColor ('log_{}_color'.format (color));
    return color2 || color;
};
</t>
<t tx="ekr.20201227092410.49">get __hash__ () {return __get__ (this, function (self) {
    return (self.s ? self.s.__hash__ () : 0);
});},
</t>
<t tx="ekr.20201227092410.490">export var CheckVersion = function (s1, s2, condition, stringCompare, delimiter, trace) {
    if (typeof condition == 'undefined' || (condition != null &amp;&amp; condition.hasOwnProperty ("__kwargtrans__"))) {;
        var condition = '&gt;=';
    };
    if (typeof stringCompare == 'undefined' || (stringCompare != null &amp;&amp; stringCompare.hasOwnProperty ("__kwargtrans__"))) {;
        var stringCompare = null;
    };
    if (typeof delimiter == 'undefined' || (delimiter != null &amp;&amp; delimiter.hasOwnProperty ("__kwargtrans__"))) {;
        var delimiter = '.';
    };
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    @others
};
</t>
<t tx="ekr.20201227092410.491">var vals1 = (function () {
    var __accu0__ = [];
    for (var s of s1.py_split (delimiter)) {
        __accu0__.append (g.CheckVersionToInt (s));
    }
    return __accu0__;
}) ();
var n1 = len (vals1);
</t>
<t tx="ekr.20201227092410.492">var vals2 = (function () {
    var __accu0__ = [];
    for (var s of s2.py_split (delimiter)) {
        __accu0__.append (g.CheckVersionToInt (s));
    }
    return __accu0__;
}) ();
var n2 = len (vals2);
var n = max (n1, n2);
if (n1 &lt; n) {
</t>
<t tx="ekr.20201227092410.493">    vals1.extend ((function () {
        var __accu0__ = [];
        for (var i = 0; i &lt; n - n1; i++) {
            __accu0__.append (0);
        }
        return __accu0__;
    }) ());
}
if (n2 &lt; n) {
</t>
<t tx="ekr.20201227092410.494">    vals2.extend ((function () {
        var __accu0__ = [];
        for (var i = 0; i &lt; n - n2; i++) {
            __accu0__.append (0);
        }
        return __accu0__;
    }) ());
}
var __break0__ = false;
for (var [cond, val] of tuple ([tuple (['==', vals1 == vals2]), tuple (['!=', vals1 != vals2]), tuple (['&lt;', vals1 &lt; vals2]), tuple (['&lt;=', vals1 &lt;= vals2]), tuple (['&gt;', vals1 &gt; vals2]), tuple (['&gt;=', vals1 &gt;= vals2])])) {
    if (condition == cond) {
        var result = val;
        __break0__ = true;
        break;
    }
}
if (!__break0__) {
    var __except0__ = EnvironmentError ("condition must be one of '&gt;=', '&gt;', '==', '!=', '&lt;', or '&lt;='.");
    __except0__.__cause__ = null;
    throw __except0__;
}
return result;
</t>
<t tx="ekr.20201227092410.495">export var CheckVersionToInt = function (s) {
    try {
        return int (s);
    }
    catch (__except0__) {
        if (isinstance (__except0__, ValueError)) {
            var aList = [];
            for (var ch of s) {
                if (ch.isdigit ()) {
                    aList.append (ch);
                }
                else {
                    break;
                }
            }
            if (aList) {
                var s = ''.join (aList);
                return int (s);
            }
            return 0;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.496">export var choose = function (cond, a, b) {
    if (cond) {
        return a;
    }
    return b;
};
</t>
<t tx="ekr.20201227092410.497">export var cls = command ('cls') (function (event) {
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (sys.platform.lower ().startswith ('win')) {
        os.system ('cls');
    }
});
</t>
<t tx="ekr.20201227092410.498">export var createScratchCommander = function (fileName) {
    if (typeof fileName == 'undefined' || (fileName != null &amp;&amp; fileName.hasOwnProperty ("__kwargtrans__"))) {;
        var fileName = null;
    };
    var c = g.app.newCommander (fileName);
    var frame = c.frame;
    frame.createFirstTreeNode ();
    frame.setInitialWindowGeometry ();
    frame.resizePanesToRatio (frame.ratio, frame.secondary_ratio);
};
</t>
<t tx="ekr.20201227092410.499">export var funcToMethod = function (f, theClass, py_name) {
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
    setattr (theClass, py_name || f.__name__, f);
};
export var init_zodb_import_failed = false;
export var init_zodb_failed = dict ({});
export var init_zodb_db = dict ({});
</t>
<t tx="ekr.20201227092410.5">get __init__ () {return __get__ (this, function (self, py_name) {
    self.py_name = py_name;
});},
</t>
<t tx="ekr.20201227092410.50">get __repr__ () {return __get__ (this, function (self) {
    return '&lt;KeyStroke: {}&gt;'.format (repr (self.s));
});},
</t>
<t tx="ekr.20201227092410.500">export var init_zodb = function (pathToZodbStorage, verbose) {
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = true;
    };
    var db = init_zodb_db.py_get (pathToZodbStorage);
    if (db) {
        return db;
    }
    if (init_zodb_import_failed) {
        return null;
    }
    var failed = init_zodb_failed.py_get (pathToZodbStorage);
    if (failed) {
        return null;
    }
    try {
        var storage = ZODB.FileStorage.FileStorage (pathToZodbStorage);
        var __left0__ = ZODB.DB (storage);
        init_zodb_db [pathToZodbStorage] = __left0__;
        var db = __left0__;
        return db;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            if (verbose) {
                g.es ('g.init_zodb: exception creating ZODB.DB instance');
                g.es_exception ();
            }
            init_zodb_failed [pathToZodbStorage] = true;
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.501">export var isMacOS = function () {
    return sys.platform == 'darwin';
};
</t>
<t tx="ekr.20201227092410.502">export var issueSecurityWarning = function (setting) {
    g.es ('Security warning! Ignoring...', __kwargtrans__ ({color: 'red'}));
    g.es (setting, __kwargtrans__ ({color: 'red'}));
    g.es ('This setting can be set only in');
    g.es ('leoSettings.leo or myLeoSettings.leo');
};
</t>
<t tx="ekr.20201227092410.503">export var makeDict = function () {
    return py_keys;
};
</t>
<t tx="ekr.20201227092410.504">export var pep8_class_name = function (s) {
    return ''.join ((function () {
        var __accu0__ = [];
        for (var z of s.py_split ('_')) {
            if (z) {
                __accu0__.append (z [0].upper () + z.__getslice__ (1, null, 1));
            }
        }
        return __accu0__;
    }) ());
};
if (0) {
    cls ();
    var aList = tuple (['_', '__', '_abc', 'abc_', 'abc', 'abc_xyz', 'AbcPdQ']);
    for (var s of aList) {
        print (pep8_class_name (s));
    }
}
</t>
<t tx="ekr.20201227092410.506">export var plural = function (obj) {
    if (isinstance (obj, tuple ([list, tuple, str]))) {
        var n = len (obj);
    }
    else {
        var n = obj;
    }
    return (n == 1 ? '' : 's');
};
</t>
<t tx="ekr.20201227092410.507">export var truncate = function (s, n) {
    if (len (s) &lt;= n) {
        return s;
    }
    var s2 = s.__getslice__ (0, n - 3, 1) + '...({})'.format (len (s));
    if (s.endswith ('\n')) {
        return s2 + '\n';
    }
    return s2;
};
</t>
<t tx="ekr.20201227092410.508">export var windows = function () {
    return app &amp;&amp; app.windowList;
};
</t>
<t tx="ekr.20201227092410.509">export var glob_glob = function (pattern) {
    var aList = glob.glob (pattern);
    if (g.isWindows) {
        var aList = (function () {
            var __accu0__ = [];
            for (var z of aList) {
                __accu0__.append (z.py_replace ('\\', '/'));
            }
            return __accu0__;
        }) ();
    }
    return aList;
};
</t>
<t tx="ekr.20201227092410.51">get __str__ () {return __get__ (this, function (self) {
    return repr (self.s);
});},
</t>
<t tx="ekr.20201227092410.511">export var os_path_abspath = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = path.py_replace ('\x00', '');
    var path = os.path.abspath (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.512">export var os_path_basename = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = os.path.basename (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.513">export var os_path_dirname = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = os.path.dirname (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.514">export var os_path_exists = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = path.py_replace ('\x00', '');
    return os.path.exists (path);
};
export var deprecated_messages = [];
</t>
<t tx="ekr.20201227092410.515">export var os_path_expandExpression = function (s) {
    var c = py_keys.py_get ('c');
    if (!(c)) {
        g.trace ('can not happen: no c', g.callers ());
        return s;
    }
    var callers = g.callers (2);
    if (!__in__ (callers, deprecated_messages)) {
        deprecated_messages.append (callers);
        g.es_print ('\nos_path_expandExpression is deprecated. called from: {}'.format (callers));
    }
    return c.expand_path_expression (s);
};
</t>
<t tx="ekr.20201227092410.516">export var os_path_expanduser = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var result = os.path.normpath (os.path.expanduser (path));
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.517">export var os_path_finalize = function (path) {
    var path = path.py_replace ('\x00', '');
    var path = os.path.expanduser (path);
    var path = os.path.abspath (path);
    var path = os.path.normpath (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.518">export var os_path_finalize_join = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var path = g.os_path_join (...args, __kwargtrans__ (py_keys));
    var path = g.os_path_finalize (path);
    return path;
};
</t>
<t tx="ekr.20201227092410.519">export var os_path_getmtime = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    try {
        return os.path.getmtime (path);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return 0;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.52">get dump () {return __get__ (this, function (self) {
    for (var i = 0; i &lt; 128; i++) {
        var s = chr (i);
        var stroke = g.KeyStroke (s);
        if (stroke.s != s) {
            print ('{} {} {}'.format (i, s, stroke.s));
        }
    }
    for (var ch of tuple (['backspace', 'linefeed', 'return', 'tab'])) {
        var stroke = g.KeyStroke (ch);
        print ('{} {} {}'.format ('', ch, stroke.s));
    }
});},
</t>
<t tx="ekr.20201227092410.520">export var os_path_getsize = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    return os.path.getsize (path);
};
</t>
<t tx="ekr.20201227092410.521">export var os_path_isabs = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    return os.path.isabs (path);
};
</t>
<t tx="ekr.20201227092410.522">export var os_path_isdir = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    return os.path.isdir (path);
};
</t>
<t tx="ekr.20201227092410.523">export var os_path_isfile = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    return os.path.isfile (path);
};
</t>
<t tx="ekr.20201227092410.524">export var os_path_join = function () {
    var args = tuple ([].slice.apply (arguments).slice (0));
    var c = py_keys.py_get ('c');
    var uargs = (function () {
        var __accu0__ = [];
        for (var arg of args) {
            __accu0__.append (g.toUnicodeFileEncoding (arg));
        }
        return __accu0__;
    }) ();
    if (uargs &amp;&amp; uargs [0] == '!!') {
        uargs [0] = g.app.loadDir;
    }
    else if (uargs &amp;&amp; uargs [0] == '.') {
        var c = py_keys.py_get ('c');
        if (c &amp;&amp; c.openDirectory) {
            uargs [0] = c.openDirectory;
        }
    }
    if (uargs) {
        try {
            var path = os.path.join (...uargs);
        }
        catch (__except0__) {
            if (isinstance (__except0__, py_TypeError)) {
                g.trace (uargs, args, py_keys, g.callers ());
                __except0__.__cause__ = null;
                throw __except0__;
            }
            else {
                throw __except0__;
            }
        }
    }
    else {
        var path = '';
    }
    var path = g.toUnicodeFileEncoding (path);
    var path = path.py_replace ('\x00', '');
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.526">export var os_path_normcase = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = os.path.normcase (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.527">export var os_path_normpath = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = os.path.normpath (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.528">export var os_path_normslashes = function (path) {
    if (g.isWindows &amp;&amp; path) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.529">export var os_path_realpath = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var path = os.path.realpath (path);
    var path = g.toUnicodeFileEncoding (path);
    if (g.isWindows) {
        var path = path.py_replace ('\\', '/');
    }
    return path;
};
</t>
<t tx="ekr.20201227092410.53">get finalize_binding () {return __get__ (this, function (self, binding) {
    var trace = false &amp;&amp; __in__ ('keys', g.app.debug);
    self.mods = self.find_mods (binding);
    var s = self.strip_mods (binding);
    var s = self.finalize_char (s);
    var mods = ''.join ((function () {
        var __accu0__ = [];
        for (var z of self.mods) {
            __accu0__.append ('{}+'.format (z.capitalize ()));
        }
        return __accu0__;
    }) ());
    if (trace &amp;&amp; __in__ ('meta', self.mods)) {
        g.trace ('{}:{} ==&gt; {}'.format (binding, self.mods, mods + s));
    }
    return mods + s;
});},
</t>
<t tx="ekr.20201227092410.530">export var os_path_split = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var __left0__ = os.path.py_split (path);
    var head = __left0__ [0];
    var tail = __left0__ [1];
    var head = g.toUnicodeFileEncoding (head);
    var tail = g.toUnicodeFileEncoding (tail);
    return tuple ([head, tail]);
};
</t>
<t tx="ekr.20201227092410.531">export var os_path_splitext = function (path) {
    var path = g.toUnicodeFileEncoding (path);
    var __left0__ = os.path.splitext (path);
    var head = __left0__ [0];
    var tail = __left0__ [1];
    var head = g.toUnicodeFileEncoding (head);
    var tail = g.toUnicodeFileEncoding (tail);
    return tuple ([head, tail]);
};
</t>
<t tx="ekr.20201227092410.532">export var os_startfile = function (fname) {
    @others
};
</t>
<t tx="ekr.20201227092410.533">var stderr2log = function (g, ree, fname) {
    while (true) {
        var emsg = ree.read ().decode ('utf-8');
        if (emsg) {
            g.es_print_error ('xdg-open {} caused output to stderr:\n{}'.format (fname, emsg));
        }
        else {
            break;
        }
    }
};
</t>
<t tx="ekr.20201227092410.534">var itPoll = function (fname, ree, subPopen, g, ito) {
    stderr2log (g, ree, fname);
    var rc = subPopen.poll ();
    if (!(rc === null)) {
        ito.stop ();
        ito.destroy_self ();
        if (rc != 0) {
            g.es_print ('xdg-open {} failed with exit code {}'.format (fname, rc));
        }
        stderr2log (g, ree, fname);
        ree.close ();
    }
};
if (fname.find ('"') &gt; -(1)) {
    var quoted_fname = "'{}'".format (fname);
}
else {
    var quoted_fname = '"{}"'.format (fname);
}
if (sys.platform.startswith ('win')) {
    os.startfile (quoted_fname);
}
else if (sys.platform == 'darwin') {
    try {
        subprocess.call (['open', fname]);
    }
    catch (__except0__) {
        if (isinstance (__except0__, OSError)) {
            // pass;
        }
        else if (isinstance (__except0__, ImportError)) {
            os.system ('open {}'.format (quoted_fname));
        }
        else {
            throw __except0__;
        }
    }
}
else {
    try {
        var ree = null;
        var wre = tempfile.NamedTemporaryFile ();
        var ree = io.open (wre.py_name, 'rb', __kwargtrans__ ({buffering: 0}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, IOError)) {
            g.trace ('error opening temp file for {}'.format (fname));
            if (ree) {
                ree.close ();
            }
            return ;
        }
        else {
            throw __except0__;
        }
    }
    try {
        var subPopen = subprocess.Popen (['xdg-open', fname], __kwargtrans__ ({stderr: wre, shell: false}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_print ('error opening {}'.format (fname));
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
    try {
</t>
<t tx="ekr.20201227092410.535">        var itoPoll = g.IdleTime ((function __lambda__ (ito) {
            return itPoll (fname, ree, subPopen, g, ito);
        }), __kwargtrans__ ({delay: 1000}));
        itoPoll.start ();
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ('exception executing g.startfile for {}'.format (fname));
        }
        else {
            throw __except0__;
        }
    }
}
</t>
<t tx="ekr.20201227092410.536">export var toUnicodeFileEncoding = function (path) {
    if (path &amp;&amp; isinstance (path, str)) {
        var path = path.py_replace ('\\', os.sep);
        return g.toUnicode (path);
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.537">export var createTopologyList = function (c, root, useHeadlines) {
    if (typeof root == 'undefined' || (root != null &amp;&amp; root.hasOwnProperty ("__kwargtrans__"))) {;
        var root = null;
    };
    if (typeof useHeadlines == 'undefined' || (useHeadlines != null &amp;&amp; useHeadlines.hasOwnProperty ("__kwargtrans__"))) {;
        var useHeadlines = false;
    };
    if (!(root)) {
        var root = c.rootPosition ();
    }
    var v = root;
    if (useHeadlines) {
        var aList = [tuple ([v.numberOfChildren (), v.headString ()])];
    }
    else {
        var aList = [v.numberOfChildren ()];
    }
    var child = v.firstChild ();
    while (child) {
        aList.append (g.createTopologyList (c, child, useHeadlines));
        var child = child.py_next ();
    }
    return aList;
};
</t>
<t tx="ekr.20201227092410.538">export var getDocString = function (s) {
    var tags = tuple (['"""', "'''"]);
    var __left0__ = tags;
    var tag1 = __left0__ [0];
    var tag2 = __left0__ [1];
    var __left0__ = tuple ([s.find (tag1), s.find (tag2)]);
    var i1 = __left0__ [0];
    var i2 = __left0__ [1];
    if (i1 == -(1) &amp;&amp; i2 == -(1)) {
        return '';
    }
    if (i1 &gt; -(1) &amp;&amp; i2 &gt; -(1)) {
        var i = min (i1, i2);
    }
    else {
        var i = max (i1, i2);
    }
    var tag = s.__getslice__ (i, i + 3, 1);
    var j = s.find (tag, i + 3);
    if (j &gt; -(1)) {
        return s.__getslice__ (i + 3, j, 1);
    }
    return '';
};
</t>
<t tx="ekr.20201227092410.539">export var getDocStringForFunction = function (func) {
    @others
};
</t>
<t tx="ekr.20201227092410.540">var py_name = function (func) {
    return (hasattr (func, '__name__') ? func.__name__ : '&lt;no __name__&gt;');
};
</t>
<t tx="ekr.20201227092410.541">var get_defaults = function (func, i) {
    var defaults = inspect.getfullargspec (func) [3];
    return defaults [i];
};
var s = '';
if (py_name (func) == 'minibufferCallback') {
    var func = get_defaults (func, 0);
    if (hasattr (func, 'func.__doc__') &amp;&amp; func.__doc__.strip ()) {
        var s = func.__doc__;
    }
}
if (!(s) &amp;&amp; py_name (func) == 'commonCommandCallback') {
    var script = get_defaults (func, 1);
    var s = g.getDocString (script);
}
if (!(s) &amp;&amp; hasattr (func, '__doc__')) {
    var s = func.__doc__;
}
if (!(s) &amp;&amp; hasattr (func, 'docstring')) {
    var s = func.docstring;
}
return s;
</t>
<t tx="ekr.20201227092410.542">export var python_tokenize = function (s, line_numbers) {
    if (typeof line_numbers == 'undefined' || (line_numbers != null &amp;&amp; line_numbers.hasOwnProperty ("__kwargtrans__"))) {;
        var line_numbers = true;
    };
    var __left0__ = tuple ([[], 0, 0]);
    var result = __left0__ [0];
    var i = __left0__ [1];
    var line_number = __left0__ [2];
    while (i &lt; len (s)) {
        var __left0__ = i;
        var progress = __left0__;
        var j = __left0__;
        var ch = s [i];
        if (ch == '\n') {
            var __left0__ = tuple (['nl', i + 1]);
            var kind = __left0__ [0];
            var i = __left0__ [1];
        }
        else if (__in__ (ch, ' \t')) {
            var kind = 'ws';
            while (i &lt; len (s) &amp;&amp; __in__ (s [i], ' \t')) {
                i++;
            }
        }
        else if (ch == '#') {
            var __left0__ = tuple (['comment', g.skip_to_end_of_line (s, i)]);
            var kind = __left0__ [0];
            var i = __left0__ [1];
        }
        else if (__in__ (ch, '"\'')) {
            var __left0__ = tuple (['string', g.skip_python_string (s, i, __kwargtrans__ ({verbose: false}))]);
            var kind = __left0__ [0];
            var i = __left0__ [1];
        }
        else if (ch == '_' || ch.isalpha ()) {
            var __left0__ = tuple (['id', g.skip_id (s, i)]);
            var kind = __left0__ [0];
            var i = __left0__ [1];
        }
        else {
            var __left0__ = tuple (['other', i + 1]);
            var kind = __left0__ [0];
            var i = __left0__ [1];
        }
        var val = s.__getslice__ (j, i, 1);
        if (line_numbers) {
            line_number += val.count ('\n');
            result.append (tuple ([kind, val, line_number]));
        }
        else {
            result.append (tuple ([kind, val]));
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092410.543">export var exec_file = function (path, d, script) {
    if (typeof script == 'undefined' || (script != null &amp;&amp; script.hasOwnProperty ("__kwargtrans__"))) {;
        var script = null;
    };
    if (script === null) {
        var f = open (path);
        try {
            f.__enter__ ();
            var script = f.read ();
            f.__exit__ ();
        }
        catch (__except0__) {
            if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                throw __except0__;
            }
        }
    }
    exec (compile (script, path, 'exec'), d);
};
</t>
<t tx="ekr.20201227092410.544">export var execute_shell_commands = function (commands, trace) {
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (isinstance (commands, str)) {
        var commands = [commands];
    }
    for (var command of commands) {
        var wait = !(command.startswith ('&amp;'));
        if (trace) {
            g.trace (command);
        }
        if (command.startswith ('&amp;')) {
            var command = command.__getslice__ (1, null, 1).strip ();
        }
        var proc = subprocess.Popen (command, __kwargtrans__ ({shell: true}));
        if (wait) {
            proc.communicate ();
        }
        else {
            if (trace) {
                print ('Start:', proc);
            }
            var proc_poller = function (timer, proc) {
                if (typeof proc == 'undefined' || (proc != null &amp;&amp; proc.hasOwnProperty ("__kwargtrans__"))) {;
                    var proc = proc;
                };
                var val = proc.poll ();
                if (val !== null) {
                    if (trace) {
                        print ('  End:', proc, val);
                    }
                    timer.stop ();
                }
            };
            g.IdleTime (proc_poller, __kwargtrans__ ({delay: 0})).start ();
        }
    }
};
</t>
<t tx="ekr.20201227092410.546">export var execute_shell_commands_with_options = function (base_dir, c, command_setting, commands, path_setting, trace, warning) {
    if (typeof base_dir == 'undefined' || (base_dir != null &amp;&amp; base_dir.hasOwnProperty ("__kwargtrans__"))) {;
        var base_dir = null;
    };
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof command_setting == 'undefined' || (command_setting != null &amp;&amp; command_setting.hasOwnProperty ("__kwargtrans__"))) {;
        var command_setting = null;
    };
    if (typeof commands == 'undefined' || (commands != null &amp;&amp; commands.hasOwnProperty ("__kwargtrans__"))) {;
        var commands = null;
    };
    if (typeof path_setting == 'undefined' || (path_setting != null &amp;&amp; path_setting.hasOwnProperty ("__kwargtrans__"))) {;
        var path_setting = null;
    };
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (typeof warning == 'undefined' || (warning != null &amp;&amp; warning.hasOwnProperty ("__kwargtrans__"))) {;
        var warning = null;
    };
    var base_dir = g.computeBaseDir (c, base_dir, path_setting, trace);
    if (!(base_dir)) {
        return ;
    }
    var commands = g.computeCommands (c, commands, command_setting, trace);
    if (!(commands)) {
        return ;
    }
    if (warning) {
        g.es_print (warning);
    }
    os.chdir (base_dir);
    g.execute_shell_commands (commands);
};
</t>
<t tx="ekr.20201227092410.547">export var computeBaseDir = function (c, base_dir, path_setting, trace) {
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (path_setting) {
        if (!(c)) {
            return g.es_print ('@string path_setting requires valid c arg');
        }
        var base_dir2 = c.config.getString (path_setting);
        if (base_dir2) {
            var base_dir2 = base_dir2.py_replace ('\\', '/');
            if (g.os_path_exists (base_dir2)) {
                return base_dir2;
            }
            return g.es_print ('@string {} not found: {}'.format (path_setting, base_dir2));
        }
    }
    if (base_dir) {
        var base_dir = base_dir.py_replace ('\\', '/');
        if (g.os_path_exists (base_dir)) {
            return base_dir;
        }
        return g.es_print ('base_dir not found: {}'.format (base_dir));
    }
    return g.es_print ('Please use @string {}'.format (path_setting));
};
</t>
<t tx="ekr.20201227092410.548">export var computeCommands = function (c, commands, command_setting, trace) {
    if (typeof trace == 'undefined' || (trace != null &amp;&amp; trace.hasOwnProperty ("__kwargtrans__"))) {;
        var trace = false;
    };
    if (!(commands) &amp;&amp; !(command_setting)) {
        g.es_print ('Please use commands, command_setting or both');
        return [];
    }
    if (command_setting) {
        if (c) {
            var aList = c.config.getData (command_setting);
            return aList || commands;
        }
        g.es_print ('@data command_setting requires valid c arg');
        return [];
    }
    return commands;
};
</t>
<t tx="ekr.20201227092410.549">export var executeFile = function (filename, options) {
    if (typeof options == 'undefined' || (options != null &amp;&amp; options.hasOwnProperty ("__kwargtrans__"))) {;
        var options = '';
    };
    if (!(os.access (filename, os.R_OK))) {
        return ;
    }
    var __left0__ = g.os_path_split (filename);
    var fdir = __left0__ [0];
    var fname = __left0__ [1];
    var subprocess_wrapper = function (cmdlst) {
        var p = subprocess.Popen (cmdlst, __kwargtrans__ ({cwd: fdir, universal_newlines: true, stdout: subprocess.PIPE, stderr: subprocess.PIPE}));
        var __left0__ = p.communicate ();
        var stdo = __left0__ [0];
        var stde = __left0__ [1];
        return tuple ([p.wait (), stdo, stde]);
    };
    var __left0__ = subprocess_wrapper ('{} {} {}'.format (sys.executable, fname, options));
    var rc = __left0__ [0];
    var so = __left0__ [1];
    var se = __left0__ [2];
    if (rc) {
        g.pr ('return code', rc);
    }
    g.pr (so, se);
};
</t>
<t tx="ekr.20201227092410.55">get finalize_char () {return __get__ (this, function (self, s) {
    var shift_d = dict ({'bksp': 'BackSpace', 'backspace': 'BackSpace', 'backtab': 'Tab', 'linefeed': 'Return', '\r': 'Return', 'return': 'Return', 'tab': 'Tab'});
    if (self.mods &amp;&amp; __in__ (s.lower (), shift_d)) {
        return shift_d.py_get (s.lower ());
    }
    var translate_d = dict ({'bksp': 'BackSpace', 'backspace': 'BackSpace', 'backtab': 'Tab', 'linefeed': '\n', '\r': '\n', 'return': '\n', 'tab': 'Tab', 'delete': 'Delete', 'down': 'Down', 'end': 'End', 'enter': 'Enter', 'escape': 'Escape', 'home': 'Home', 'insert': 'Insert', 'left': 'Left', 'next': 'Next', 'prior': 'Prior', 'right': 'Right', 'up': 'Up', 'del': 'Delete', 'dnarrow': 'Down', 'esc': 'Escape', 'ins': 'Insert', 'ltarrow': 'Left', 'pagedn': 'Next', 'pageup': 'Prior', 'pgdown': 'Next', 'pgup': 'Prior', 'rtarrow': 'Right', 'uparrow': 'Up', 'ampersand': '&amp;', 'asciicircum': '^', 'asciitilde': '~', 'asterisk': '*', 'at': '@', 'backslash': '\\', 'bar': '|', 'braceleft': '{', 'braceright': '}', 'bracketleft': '[', 'bracketright': ']', 'colon': ':', 'comma': ',', 'dollar': '$', 'equal': '=', 'exclam': '!', 'greater': '&gt;', 'less': '&lt;', 'minus': '-', 'numbersign': '#', 'quotedbl': '"', 'quoteright': "'", 'parenleft': '(', 'parenright': ')', 'percent': '%', 'period': '.', 'plus': '+', 'question': '?', 'quoteleft': '`', 'semicolon': ';', 'slash': '/', 'space': ' ', 'underscore': '_'});
    if (__in__ (s, tuple ([null, 'none', 'None']))) {
        return 'None';
    }
    if (__in__ (s.lower (), translate_d)) {
        var s = translate_d.py_get (s.lower ());
        return self.strip_shift (s);
    }
    if (len (s) &gt; 1 &amp;&amp; s.find (' ') &gt; -(1)) {
        return '';
    }
    if (s.isalpha ()) {
        if (len (s) == 1) {
            if (__in__ ('shift', self.mods)) {
                if (len (self.mods) == 1) {
                    self.mods.remove ('shift');
                    var s = s.upper ();
                }
                else {
                    var s = s.lower ();
                }
            }
            else if (self.mods) {
                var s = s.lower ();
            }
        }
        else {
            var s = '';
            if (0) {
                if (g.app.gui) {
                    if (__in__ (s.capitalize (), g.app.gui.specialChars)) {
                        var s = s.capitalize ();
                    }
                }
            }
        }
        return s;
    }
    return self.strip_shift (s);
});},
</t>
<t tx="ekr.20201227092410.551">export var findNodeInChildren = function (c, p, headline, exact) {
    if (typeof exact == 'undefined' || (exact != null &amp;&amp; exact.hasOwnProperty ("__kwargtrans__"))) {;
        var exact = true;
    };
    var p1 = p.copy ();
    var h = headline.strip ();
    for (var p of p1.children ()) {
        if (p.h.strip () == h) {
            return p.copy ();
        }
    }
    if (!(exact)) {
        for (var p of p1.children ()) {
            if (p.h.strip ().startswith (h)) {
                return p.copy ();
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.552">export var findNodeInTree = function (c, p, headline, exact) {
    if (typeof exact == 'undefined' || (exact != null &amp;&amp; exact.hasOwnProperty ("__kwargtrans__"))) {;
        var exact = true;
    };
    var h = headline.strip ();
    var p1 = p.copy ();
    for (var p of p1.subtree ()) {
        if (p.h.strip () == h) {
            return p.copy ();
        }
    }
    if (!(exact)) {
        for (var p of p1.subtree ()) {
            if (p.h.strip ().startswith (h)) {
                return p.copy ();
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.553">export var findNodeAnywhere = function (c, headline, exact) {
    if (typeof exact == 'undefined' || (exact != null &amp;&amp; exact.hasOwnProperty ("__kwargtrans__"))) {;
        var exact = true;
    };
    var h = headline.strip ();
    for (var p of c.all_unique_positions (__kwargtrans__ ({copy: false}))) {
        if (p.h.strip () == h) {
            return p.copy ();
        }
    }
    if (!(exact)) {
        for (var p of c.all_unique_positions (__kwargtrans__ ({copy: false}))) {
            if (p.h.strip ().startswith (h)) {
                return p.copy ();
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.554">export var findTopLevelNode = function (c, headline, exact) {
    if (typeof exact == 'undefined' || (exact != null &amp;&amp; exact.hasOwnProperty ("__kwargtrans__"))) {;
        var exact = true;
    };
    var h = headline.strip ();
    for (var p of c.rootPosition ().self_and_siblings (__kwargtrans__ ({copy: false}))) {
        if (p.h.strip () == h) {
            return p.copy ();
        }
    }
    if (!(exact)) {
        for (var p of c.rootPosition ().self_and_siblings (__kwargtrans__ ({copy: false}))) {
            if (p.h.strip ().startswith (h)) {
                return p.copy ();
            }
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.555">export var getScript = function (c, p, useSelectedText, forcePythonSentinels, useSentinels) {
    if (typeof useSelectedText == 'undefined' || (useSelectedText != null &amp;&amp; useSelectedText.hasOwnProperty ("__kwargtrans__"))) {;
        var useSelectedText = true;
    };
    if (typeof forcePythonSentinels == 'undefined' || (forcePythonSentinels != null &amp;&amp; forcePythonSentinels.hasOwnProperty ("__kwargtrans__"))) {;
        var forcePythonSentinels = true;
    };
    if (typeof useSentinels == 'undefined' || (useSentinels != null &amp;&amp; useSentinels.hasOwnProperty ("__kwargtrans__"))) {;
        var useSentinels = true;
    };
    var w = c.frame.body.wrapper;
    if (!(p)) {
        var p = c.p;
    }
    try {
        if (g.app.inBridge) {
            var s = p.b;
        }
        else if (w &amp;&amp; p == c.p &amp;&amp; useSelectedText &amp;&amp; w.hasSelection ()) {
            var s = w.getSelectedText ();
        }
        else {
            var s = p.b;
        }
        var s = g.removeExtraLws (s, c.tab_width);
        var s = g.extractExecutableString (c, p, s);
        var script = g.composeScript (c, p, s, __kwargtrans__ ({forcePythonSentinels: forcePythonSentinels, useSentinels: useSentinels}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_print ('unexpected exception in g.getScript');
            g.es_exception ();
            var script = '';
        }
        else {
            throw __except0__;
        }
    }
    return script;
};
</t>
<t tx="ekr.20201227092410.556">export var composeScript = function (c, p, s, forcePythonSentinels, useSentinels) {
    if (typeof forcePythonSentinels == 'undefined' || (forcePythonSentinels != null &amp;&amp; forcePythonSentinels.hasOwnProperty ("__kwargtrans__"))) {;
        var forcePythonSentinels = true;
    };
    if (typeof useSentinels == 'undefined' || (useSentinels != null &amp;&amp; useSentinels.hasOwnProperty ("__kwargtrans__"))) {;
        var useSentinels = true;
    };
    if (!(s.strip ())) {
        return '';
    }
    var at = c.atFileCommands;
    var old_in_script = g.app.inScript;
    try {
        var __left0__ = true;
        g.app.inScript = __left0__;
        g.inScript = __left0__;
        g.app.scriptDict ['script1'] = s;
        var script = at.stringToString (p.copy (), s, __kwargtrans__ ({forcePythonSentinels: forcePythonSentinels, sentinels: useSentinels}));
        var script = script.py_replace ('\r\n', '\n');
        g.app.scriptDict ['script2'] = script;
    }
    finally {
        var __left0__ = old_in_script;
        g.app.inScript = __left0__;
        g.inScript = __left0__;
    }
    return script;
};
</t>
<t tx="ekr.20201227092410.557">export var extractExecutableString = function (c, p, s) {
    if (g.unitTesting) {
        return s;
    }
    var language = g.scanForAtLanguage (c, p);
    if (!(language)) {
        return s;
    }
    var pattern = '^@language\\s+(\\w+)';
    var matches = list (re.finditer (pattern, s, re.MULTILINE));
    if (len (matches) &lt; 2) {
        return s;
    }
    var __left0__ = tuple ([false, []]);
    var extracting = __left0__ [0];
    var result = __left0__ [1];
    for (var [i, line] of enumerate (g.splitLines (s))) {
        var m = re.match (pattern, line);
        if (m) {
            var extracting = m.group (1) == language;
        }
        else if (extracting) {
            result.append (line);
        }
    }
    return ''.join (result);
};
</t>
<t tx="ekr.20201227092410.558">export var handleScriptException = function (c, p, script, script1) {
    g.warning ('exception executing script');
    var full = c.config.getBool ('show-full-tracebacks-in-scripts');
    var __left0__ = g.es_exception (__kwargtrans__ ({full: full}));
    var fileName = __left0__ [0];
    var n = __left0__ [1];
    if (p.v.context == c) {
        try {
            c.goToScriptLineNumber (n, p);
            if (g.os_path_exists (fileName)) {
                var f = open (fileName);
                try {
                    f.__enter__ ();
                    var lines = f.readlines ();
                    f.__exit__ ();
                }
                catch (__except0__) {
                    if (! (f.__exit__ (__except0__.name, __except0__, __except0__.stack))) {
                        throw __except0__;
                    }
                }
            }
            else {
                var lines = g.splitLines (script);
            }
            var s = '-' * 20;
            g.es_print ('', s);
            var i = max (0, n - 2);
            var j = min (n + 2, len (lines));
            while (i &lt; j) {
                var ch = (i == n - 1 ? '*' : ' ');
                var s = '{} line {}: {}'.format (ch, i + 1, lines [i]);
                g.es ('', s, __kwargtrans__ ({newline: false}));
                i++;
            }
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                g.es_print ('Unexpected exception in g.handleScriptException');
                g.es_exception ();
            }
            else {
                throw __except0__;
            }
        }
    }
};
</t>
<t tx="ekr.20201227092410.559">export var insertCodingLine = function (encoding, script) {
    if (script) {
        var tag = '@first # -*- coding:';
        var lines = g.splitLines (script);
        var __break0__ = false;
        for (var s of lines) {
            if (s.startswith (tag)) {
                __break0__ = true;
                break;
            }
        }
        if (!__break0__) {
            lines.insert (0, '{} {} -*-\n'.format (tag, encoding));
            var script = ''.join (lines);
        }
    }
    return script;
};
</t>
<t tx="ekr.20201227092410.56">get strip_shift () {return __get__ (this, function (self, s) {
    var shift_d = dict ({'`': '~', '~': '~', '1': '!', '!': '!', '2': '@', '@': '@', '3': '#', '#': '#', '4': '$', '$': '$', '5': '%', '%': '%', '6': '^', '^': '^', '7': '&amp;', '&amp;': '&amp;', '8': '*', '*': '*', '9': '(', '(': '(', '0': ')', ')': ')', '-': '_', '_': '_', '=': '+', '+': '+', '[': '{', '{': '{', ']': '}', '}': '}', '\\': '|', '|': '|', ';': ':', ':': ':', "'": '"', '"': '"', '.': '&lt;', '&lt;': '&lt;', ',': '&gt;', '&gt;': '&gt;', '//': '?', '?': '?'});
    if (__in__ ('shift', self.mods) &amp;&amp; __in__ (s, shift_d)) {
        self.mods.remove ('shift');
        var s = shift_d.py_get (s);
    }
    return s;
});},
</t>
<t tx="ekr.20201227092410.560">export var findTestScript = function (c, h, where, warn) {
    if (typeof where == 'undefined' || (where != null &amp;&amp; where.hasOwnProperty ("__kwargtrans__"))) {;
        var where = null;
    };
    if (typeof warn == 'undefined' || (warn != null &amp;&amp; warn.hasOwnProperty ("__kwargtrans__"))) {;
        var warn = true;
    };
    if (where) {
        var p = g.findNodeAnywhere (c, where);
        if (p) {
            var p = g.findNodeInTree (c, p, h);
        }
    }
    else {
        var p = g.findNodeAnywhere (c, h);
    }
    if (p) {
        return g.getScript (c, p);
    }
    if (warn) {
        g.trace ('Not found', h);
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.561">export var getTestVars = function () {
    var d = g.app.unitTestDict;
    var c = d.py_get ('c');
    var p = d.py_get ('p');
    d ['getTestVars'] = true;
    return tuple ([c, p &amp;&amp; p.copy ()]);
};
</t>
<t tx="ekr.20201227092410.562">export var run_unit_test_in_separate_process = function (command) {
    var leo_editor_dir = os.path.join (g.app.loadDir, '..', '..');
    os.chdir (leo_editor_dir);
    var p = subprocess.Popen (shlex.py_split (command), __kwargtrans__ ({stdout: subprocess.PIPE, stderr: subprocess.PIPE, shell: sys.platform.startswith ('win')}));
    var __left0__ = p.communicate ();
    var out = __left0__ [0];
    var err = __left0__ [1];
    var err = g.toUnicode (err);
    var out = g.toUnicode (out);
    print ('');
    print (command);
    if (out.strip ()) {
        print (out.rstrip ());
    }
    print (err.rstrip ());
    var err_lines = g.splitLines (err.rstrip ());
};
</t>
<t tx="ekr.20201227092410.563">export var toEncodedStringWithErrorCode = function (s, encoding, reportErrors) {
    if (typeof reportErrors == 'undefined' || (reportErrors != null &amp;&amp; reportErrors.hasOwnProperty ("__kwargtrans__"))) {;
        var reportErrors = false;
    };
    var ok = true;
    if (g.isUnicode (s)) {
        try {
            var s = s.encode (encoding, 'strict');
        }
        catch (__except0__) {
            if (isinstance (__except0__, UnicodeError)) {
                var s = s.encode (encoding, 'replace');
                if (reportErrors) {
                    g.error ('Error converting {} from unicode to {} encoding'.format (s, encoding));
                }
                var ok = false;
            }
            else {
                throw __except0__;
            }
        }
    }
    return tuple ([s, ok]);
};
</t>
<t tx="ekr.20201227092410.564">export var toUnicodeWithErrorCode = function (s, encoding, reportErrors) {
    if (typeof reportErrors == 'undefined' || (reportErrors != null &amp;&amp; reportErrors.hasOwnProperty ("__kwargtrans__"))) {;
        var reportErrors = false;
    };
    if (s === null) {
        return tuple (['', true]);
    }
    if (isinstance (s, str)) {
        return tuple ([s, true]);
    }
    try {
        var s = str (s, encoding, 'strict');
        return tuple ([s, true]);
    }
    catch (__except0__) {
        if (isinstance (__except0__, UnicodeError)) {
            var s = str (s, encoding, 'replace');
            if (reportErrors) {
                g.error ('Error converting {} from {} encoding to unicode'.format (s, encoding));
            }
            return tuple ([s, false]);
        }
        else {
            throw __except0__;
        }
    }
};
export var unl_regex = re.compile ('\\bunl:.*$');
export var kinds = '(file|ftp|gopher|http|https|mailto|news|nntp|prospero|telnet|wais)';
export var url_regex = re.compile ('{}://[^\\s\'"]+[\\w=/]'.format (kinds));
</t>
<t tx="ekr.20201227092410.565">export var unquoteUrl = function (url) {
    return urllib.parse.unquote (url);
};
</t>
<t tx="ekr.20201227092410.566">export var computeFileUrl = function (fn, c, p) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    var url = urllib.parse.unquote (fn);
    var i = url.find ('~');
    if (i &gt; -(1)) {
        var path = url.__getslice__ (i, null, 1);
        var path = g.os_path_expanduser (path);
        var path = g.os_path_finalize (path);
        var url = url.__getslice__ (0, i, 1) + path;
    }
    else {
        var tag = 'file://';
        var tag2 = 'file:///';
        if (sys.platform.startswith ('win') &amp;&amp; url.startswith (tag2)) {
            var path = url.__getslice__ (len (tag2), null, 1).lstrip ();
        }
        else if (url.startswith (tag)) {
            var path = url.__getslice__ (len (tag), null, 1).lstrip ();
        }
        else {
            var path = url;
        }
        if (c &amp;&amp; c.openDirectory) {
            var base = c.getNodePath (p);
            var path = g.os_path_finalize_join (c.openDirectory, base, path);
        }
        else {
            var path = g.os_path_finalize (path);
        }
        var url = '{}{}'.format (tag, path);
    }
    return url;
};
</t>
<t tx="ekr.20201227092410.567">export var getUrlFromNode = function (p) {
    if (!(p)) {
        return null;
    }
    var c = p.v.context;
    var table = [p.h, (p.b ? g.splitLines (p.b) [0] : '')];
    @others
};
</t>
<t tx="ekr.20201227092410.568">var table = (function () {
    var __accu0__ = [];
    for (var s of table) {
        __accu0__.append ((g.match_word (s, 0, '@url') ? s.__getslice__ (4, null, 1) : s));
    }
    return __accu0__;
}) ();
</t>
<t tx="ekr.20201227092410.569">var table = (function () {
    var __accu0__ = [];
    for (var s of table) {
        if (s.strip ()) {
            __accu0__.append (s.strip ());
        }
    }
    return __accu0__;
}) ();
for (var s of table) {
    if (g.isValidUrl (s)) {
        return s;
    }
}
for (var s of table) {
    var tag = 'file://';
    var url = computeFileUrl (s, __kwargtrans__ ({c: c, p: p}));
    if (url.startswith (tag)) {
        var fn = url.__getslice__ (len (tag), null, 1).lstrip ();
        var fn = fn.py_split ('#', 1) [0];
        if (g.os_path_isfile (fn)) {
            return 'file://' + s;
        }
    }
}
for (var s of table) {
    if (s.startswith ('#')) {
        return s;
    }
}
return null;
</t>
<t tx="ekr.20201227092410.57">get find () {return __get__ (this, function (self, pattern) {
    return self.s.find (pattern);
});},
</t>
<t tx="ekr.20201227092410.570">export var handleUrl = function (url, c, p) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    if (c &amp;&amp; !(p)) {
        var p = c.p;
    }
    var urll = url.lower ();
    if (urll.startswith ('@url')) {
        var url = url.__getslice__ (4, null, 1).lstrip ();
    }
    if (urll.startswith ('unl:' + '//') || urll.startswith ('file://') &amp;&amp; url.find ('--&gt;') &gt; -(1) || urll.startswith ('#')) {
        return g.handleUnl (url, c);
    }
    try {
        return g.handleUrlHelper (url, c, p);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_print ('exception opening', repr (url));
            g.es_exception ();
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.571">export var handleUrlHelper = function (url, c, p) {
    var tag = 'file://';
    var original_url = url;
    if (url.startswith (tag) &amp;&amp; !(url.startswith (tag + '#'))) {
        var url = g.computeFileUrl (url, __kwargtrans__ ({c: c, p: p}));
    }
    var parsed = urlparse.urlparse (url);
    if (parsed.netloc) {
        var leo_path = os.path.join (parsed.netloc, parsed.path);
    }
    else {
        var leo_path = parsed.path;
    }
    if (leo_path.endswith ('\\')) {
        var leo_path = leo_path.__getslice__ (0, -(1), 1);
    }
    if (leo_path.endswith ('/')) {
        var leo_path = leo_path.__getslice__ (0, -(1), 1);
    }
    if (parsed.scheme == 'file' &amp;&amp; leo_path.endswith ('.leo')) {
        g.handleUnl (original_url, c);
    }
    else if (__in__ (parsed.scheme, tuple (['', 'file']))) {
        var unquote_path = g.unquoteUrl (leo_path);
        if (g.unitTesting) {
            g.app.unitTestDict ['os_startfile'] = unquote_path;
        }
        else if (g.os_path_exists (leo_path)) {
            g.os_startfile (unquote_path);
        }
        else {
            g.es ("File '{}' does not exist".format (leo_path));
        }
    }
    else {
    }
};
</t>
<t tx="ekr.20201227092410.572">export var traceUrl = function (c, path, parsed, url) {
    print ();
    g.trace ('url          ', url);
    g.trace ('c.frame.title', c.frame.title);
    g.trace ('path         ', path);
    g.trace ('parsed.fragment', parsed.fragment);
    g.trace ('parsed.netloc', parsed.netloc);
    g.trace ('parsed.path  ', parsed.path);
    g.trace ('parsed.scheme', repr (parsed.scheme));
};
</t>
<t tx="ekr.20201227092410.573">export var handleUnl = function (unl, c) {
    if (!(unl)) {
        return null;
    }
    var unll = unl.lower ();
    if (unll.startswith ('unl:' + '//')) {
        var unl = unl.__getslice__ (6, null, 1);
    }
    else if (unll.startswith ('file://')) {
        var unl = unl.__getslice__ (7, null, 1);
    }
    var unl = unl.strip ();
    if (!(unl)) {
        return null;
    }
    var unl = g.unquoteUrl (unl);
    if (unl.find ('#') == -(1) &amp;&amp; unl.find ('--&gt;') == -(1)) {
        var __left0__ = tuple ([unl, null]);
        var path = __left0__ [0];
        var unl = __left0__ [1];
    }
    else if (unl.find ('#') == -(1)) {
        g.recursiveUNLSearch (unl.py_split ('--&gt;'), c, __kwargtrans__ ({soft_idx: true}));
        return c;
    }
    else {
        var __left0__ = unl.py_split ('#', 1);
        var path = __left0__ [0];
        var unl = __left0__ [1];
    }
    if (!(path)) {
        g.recursiveUNLSearch (unl.py_split ('--&gt;'), c, __kwargtrans__ ({soft_idx: true}));
        return c;
    }
    if (c) {
        var base = g.os_path_dirname (c.fileName ());
        var c_path = g.os_path_finalize_join (base, path);
    }
    else {
        var c_path = null;
    }
    var table = tuple ([c_path, g.os_path_finalize_join (g.app.loadDir, '..', path), g.os_path_finalize_join (g.app.loadDir, '..', '..', path), g.os_path_finalize_join (g.app.loadDir, '..', 'core', path), g.os_path_finalize_join (g.app.loadDir, '..', 'config', path), g.os_path_finalize_join (g.app.loadDir, '..', 'dist', path), g.os_path_finalize_join (g.app.loadDir, '..', 'doc', path), g.os_path_finalize_join (g.app.loadDir, '..', 'test', path), g.app.loadDir, g.app.homeDir]);
    var __break0__ = false;
    for (var path2 of table) {
        if (path2 &amp;&amp; path2.lower ().endswith ('.leo') &amp;&amp; os.path.exists (path2)) {
            var path = path2;
            __break0__ = true;
            break;
        }
    }
    if (!__break0__) {
        g.es_print ('path not found', repr (path));
        return null;
    }
    c.endEditing ();
    c.redraw ();
    if (g.unitTesting) {
        g.app.unitTestDict ['g.recursiveUNLSearch'] = path;
    }
    else {
        var c2 = g.openWithFileName (path, __kwargtrans__ ({old_c: c}));
        if (unl) {
            g.recursiveUNLSearch (unl.py_split ('--&gt;'), c2 || c, __kwargtrans__ ({soft_idx: true}));
        }
        if (c2) {
            c2.bringToFront ();
            return c2;
        }
    }
    return null;
};
</t>
<t tx="ekr.20201227092410.574">export var isValidUrl = function (url) {
    var table = tuple (['file', 'ftp', 'gopher', 'hdl', 'http', 'https', 'imap', 'mailto', 'mms', 'news', 'nntp', 'prospero', 'rsync', 'rtsp', 'rtspu', 'sftp', 'shttp', 'sip', 'sips', 'snews', 'svn', 'svn+ssh', 'telnet', 'wais']);
    if (url.lower ().startswith ('unl:' + '//') || url.startswith ('#')) {
        return true;
    }
    if (url.startswith ('@')) {
        return false;
    }
    var parsed = urlparse.urlparse (url);
    var scheme = parsed.scheme;
    for (var s of table) {
        if (scheme.startswith (s)) {
            return true;
        }
    }
    return false;
};
</t>
<t tx="ekr.20201227092410.575">export var openUrl = function (p) {
    if (p) {
        var url = g.getUrlFromNode (p);
        if (url) {
            var c = p.v.context;
            if (!(g.doHook ('@url1', __kwargtrans__ ({c: c, p: p, url: url})))) {
                g.handleUrl (url, __kwargtrans__ ({c: c, p: p}));
            }
            g.doHook ('@url2', __kwargtrans__ ({c: c, p: p, url: url}));
        }
    }
};
</t>
<t tx="ekr.20201227092410.576">export var openUrlOnClick = function (event, url) {
    if (typeof url == 'undefined' || (url != null &amp;&amp; url.hasOwnProperty ("__kwargtrans__"))) {;
        var url = null;
    };
    try {
        return openUrlHelper (event, url);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_exception ();
            return null;
        }
        else {
            throw __except0__;
        }
    }
};
</t>
<t tx="ekr.20201227092410.577">export var openUrlHelper = function (event, url) {
    if (typeof url == 'undefined' || (url != null &amp;&amp; url.hasOwnProperty ("__kwargtrans__"))) {;
        var url = null;
    };
    var c = getattr (event, 'c', null);
    if (!(c)) {
        return null;
    }
    var w = getattr (event, 'w', c.frame.body.wrapper);
    if (!(g.app.gui.isTextWrapper (w))) {
        g.internalError ('must be a text wrapper', w);
        return null;
    }
    setattr (event, 'widget', w);
    if (url === null) {
        var s = w.getAllText ();
        var ins = w.getInsertPoint ();
        var __left0__ = w.getSelectionRange ();
        var i = __left0__ [0];
        var j = __left0__ [1];
        if (i != j) {
            return null;
        }
        var __left0__ = g.convertPythonIndexToRowCol (s, ins);
        var row = __left0__ [0];
        var col = __left0__ [1];
        var __left0__ = g.getLine (s, ins);
        var i = __left0__ [0];
        var j = __left0__ [1];
        var line = s.__getslice__ (i, j, 1);
        var __break0__ = false;
        for (var match of g.url_regex.finditer (line)) {
            if ((match.start () &lt;= col &amp;&amp; col &lt; match.end ())) {
                var url = match.group ();
                if (g.isValidUrl (url)) {
                    __break0__ = true;
                    break;
                }
            }
        }
        if (!__break0__) {
            for (var match of g.unl_regex.finditer (line)) {
                if ((match.start () &lt;= col &amp;&amp; col &lt; match.end ())) {
                    var unl = match.group ();
                    g.handleUnl (unl, c);
                    return null;
                }
            }
        }
    }
    else if (!(isinstance (url, str))) {
        var url = url.toString ();
        var url = g.toUnicode (url);
    }
    if (url &amp;&amp; g.isValidUrl (url)) {
        var p = c.p;
        if (!(g.doHook ('@url1', __kwargtrans__ ({c: c, p: p, url: url})))) {
            g.handleUrl (url, __kwargtrans__ ({c: c, p: p}));
        }
        g.doHook ('@url2', __kwargtrans__ ({c: c, p: p}));
        return url;
    }
    if (!(w.hasSelection ())) {
        c.editCommands.extendToWord (event, __kwargtrans__ ({select: true}));
    }
    var word = w.getSelectedText ().strip ();
    if (word) {
        c.findCommands.findDef (event);
    }
    return null;
};
export var g = sys.modules.py_get ('leo.core.leoGlobals');
if (__name__ == '__main__') {
    unittest.main ();
}

//# sourceMappingURL=leoGlobals.map
</t>
<t tx="ekr.20201227092410.578">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:07
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as leoFrame from './leo.core.leoFrame.js';
import * as g from './leo.core.leoGlobals.js';
var __name__ = 'leo.core.leoGui';
export var LeoGui =  __class__ ('LeoGui', [object], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092410.579">get __init__ () {return __get__ (this, function (self, guiName) {
    self.active = null;
    self.consoleOnly = true;
    self.globalFindTabManager = null;
    self.globalFindTab = null;
    self.idleTimeClass = null;
    self.isNullGui = false;
    self.lastFrame = null;
    self.leoIcon = null;
    self.mGuiName = guiName;
    self.mainLoop = null;
    self.plainTextWidget = null;
    self.root = null;
    self.script = null;
    self.splashScreen = null;
    self.utils = null;
    self.ScriptingControllerClass = NullScriptingControllerClass;
    self.ignoreChars = [];
    self.FKeys = [];
    self.specialChars = [];
});},
</t>
<t tx="ekr.20201227092410.58">get lower () {return __get__ (this, function (self) {
    return self.s.lower ();
});},
</t>
<t tx="ekr.20201227092410.580">get create_key_event () {return __get__ (this, function (self, c, binding, char, event, w, x, x_root, y, y_root) {
    if (typeof binding == 'undefined' || (binding != null &amp;&amp; binding.hasOwnProperty ("__kwargtrans__"))) {;
        var binding = null;
    };
    if (typeof char == 'undefined' || (char != null &amp;&amp; char.hasOwnProperty ("__kwargtrans__"))) {;
        var char = null;
    };
    if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
        var event = null;
    };
    if (typeof w == 'undefined' || (w != null &amp;&amp; w.hasOwnProperty ("__kwargtrans__"))) {;
        var w = null;
    };
    if (typeof x == 'undefined' || (x != null &amp;&amp; x.hasOwnProperty ("__kwargtrans__"))) {;
        var x = null;
    };
    if (typeof x_root == 'undefined' || (x_root != null &amp;&amp; x_root.hasOwnProperty ("__kwargtrans__"))) {;
        var x_root = null;
    };
    if (typeof y == 'undefined' || (y != null &amp;&amp; y.hasOwnProperty ("__kwargtrans__"))) {;
        var y = null;
    };
    if (typeof y_root == 'undefined' || (y_root != null &amp;&amp; y_root.hasOwnProperty ("__kwargtrans__"))) {;
        var y_root = null;
    };
    return LeoKeyEvent (c, char, event, binding, w, x, y, x_root, y_root);
});},
</t>
<t tx="ekr.20201227092410.581">get guiName () {return __get__ (this, function (self) {
    try {
        return self.mGuiName;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            return 'invalid gui name';
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092410.582">get setScript () {return __get__ (this, function (self, script, scriptFileName) {
    if (typeof script == 'undefined' || (script != null &amp;&amp; script.hasOwnProperty ("__kwargtrans__"))) {;
        var script = null;
    };
    if (typeof scriptFileName == 'undefined' || (scriptFileName != null &amp;&amp; scriptFileName.hasOwnProperty ("__kwargtrans__"))) {;
        var scriptFileName = null;
    };
    self.script = script;
    self.scriptFileName = scriptFileName;
});},
</t>
<t tx="ekr.20201227092410.583">get event_generate () {return __get__ (this, function (self, c, char, shortcut, w) {
    var event = self.create_key_event (c, __kwargtrans__ ({binding: shortcut, char: char, w: w}));
    c.k.masterKeyHandler (event);
    c.outerUpdate ();
});},
</t>
<t tx="ekr.20201227092410.584">get destroySelf () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.585">get runAboutLeoDialog () {return __get__ (this, function (self, c, version, theCopyright, url, email) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.586">get runAskLeoIDDialog () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.587">get runAskOkDialog () {return __get__ (this, function (self, c, title, message, text) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof text == 'undefined' || (text != null &amp;&amp; text.hasOwnProperty ("__kwargtrans__"))) {;
        var text = 'Ok';
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.588">get runAskOkCancelNumberDialog () {return __get__ (this, function (self, c, title, message, cancelButtonText, okButtonText) {
    if (typeof cancelButtonText == 'undefined' || (cancelButtonText != null &amp;&amp; cancelButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelButtonText = null;
    };
    if (typeof okButtonText == 'undefined' || (okButtonText != null &amp;&amp; okButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var okButtonText = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.589">get runAskOkCancelStringDialog () {return __get__ (this, function (self, c, title, message, cancelButtonText, okButtonText, py_default, wide) {
    if (typeof cancelButtonText == 'undefined' || (cancelButtonText != null &amp;&amp; cancelButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelButtonText = null;
    };
    if (typeof okButtonText == 'undefined' || (okButtonText != null &amp;&amp; okButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var okButtonText = null;
    };
    if (typeof py_default == 'undefined' || (py_default != null &amp;&amp; py_default.hasOwnProperty ("__kwargtrans__"))) {;
        var py_default = '';
    };
    if (typeof wide == 'undefined' || (wide != null &amp;&amp; wide.hasOwnProperty ("__kwargtrans__"))) {;
        var wide = false;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.59">get startswith () {return __get__ (this, function (self, s) {
    return self.s.startswith (s);
});},
</t>
<t tx="ekr.20201227092410.590">get runAskYesNoDialog () {return __get__ (this, function (self, c, title, message, yes_all, no_all) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof yes_all == 'undefined' || (yes_all != null &amp;&amp; yes_all.hasOwnProperty ("__kwargtrans__"))) {;
        var yes_all = false;
    };
    if (typeof no_all == 'undefined' || (no_all != null &amp;&amp; no_all.hasOwnProperty ("__kwargtrans__"))) {;
        var no_all = false;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.591">get runAskYesNoCancelDialog () {return __get__ (this, function (self, c, title, message, yesMessage, noMessage, yesToAllMessage, defaultButton, cancelMessage) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof yesMessage == 'undefined' || (yesMessage != null &amp;&amp; yesMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var yesMessage = 'Yes';
    };
    if (typeof noMessage == 'undefined' || (noMessage != null &amp;&amp; noMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var noMessage = 'No';
    };
    if (typeof yesToAllMessage == 'undefined' || (yesToAllMessage != null &amp;&amp; yesToAllMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var yesToAllMessage = null;
    };
    if (typeof defaultButton == 'undefined' || (defaultButton != null &amp;&amp; defaultButton.hasOwnProperty ("__kwargtrans__"))) {;
        var defaultButton = 'Yes';
    };
    if (typeof cancelMessage == 'undefined' || (cancelMessage != null &amp;&amp; cancelMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelMessage = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.592">get runPropertiesDialog () {return __get__ (this, function (self, title, data, callback, buttons) {
    if (typeof title == 'undefined' || (title != null &amp;&amp; title.hasOwnProperty ("__kwargtrans__"))) {;
        var title = 'Properties';
    };
    if (typeof data == 'undefined' || (data != null &amp;&amp; data.hasOwnProperty ("__kwargtrans__"))) {;
        var data = null;
    };
    if (typeof callback == 'undefined' || (callback != null &amp;&amp; callback.hasOwnProperty ("__kwargtrans__"))) {;
        var callback = null;
    };
    if (typeof buttons == 'undefined' || (buttons != null &amp;&amp; buttons.hasOwnProperty ("__kwargtrans__"))) {;
        var buttons = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.593">get runOpenFileDialog () {return __get__ (this, function (self, c, title, filetypes, defaultextension, multiple, startpath) {
    if (typeof multiple == 'undefined' || (multiple != null &amp;&amp; multiple.hasOwnProperty ("__kwargtrans__"))) {;
        var multiple = false;
    };
    if (typeof startpath == 'undefined' || (startpath != null &amp;&amp; startpath.hasOwnProperty ("__kwargtrans__"))) {;
        var startpath = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.594">get runSaveFileDialog () {return __get__ (this, function (self, c, initialfile, title, filetypes, defaultextension) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.595">get createColorPanel () {return __get__ (this, function (self, c) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.596">get createComparePanel () {return __get__ (this, function (self, c) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092410.6">    get __call__ () {return __get__ (this, function (self, func) {
        global_commands_dict [self.py_name] = func;
        if (app) {
            for (var c of app.commanders ()) {
                c.k.registerCommand (self.py_name, func);
            }
        }
        func.__func_name__ = func.__name__;
        func.is_command = true;
        func.command_name = self.py_name;
        return func;
    });}
});
export var command = Command;
</t>
<t tx="ekr.20201227092410.60">get find_mods () {return __get__ (this, function (self, s) {
    var s = s.lower ();
    var table = tuple ([['alt'], ['command', 'cmd'], ['ctrl', 'control'], ['meta'], ['shift', 'shft'], ['keypad', 'key_pad', 'numpad', 'num_pad']]);
    var result = [];
    for (var aList of table) {
        var kind = aList [0];
        for (var mod of aList) {
            for (var suffix of '+-') {
                if (s.find (mod + suffix) &gt; -(1)) {
                    var s = s.py_replace (mod + suffix, '');
                    result.append (kind);
                    break;
                }
            }
        }
    }
    return result;
});},
</t>
<t tx="ekr.20201227092410.61">get isAltCtrl () {return __get__ (this, function (self) {
    var mods = self.find_mods (self.s);
    return __in__ ('alt', mods) &amp;&amp; __in__ ('ctrl', mods);
});},
</t>
<t tx="ekr.20201227092410.62">get isFKey () {return __get__ (this, function (self) {
    return __in__ (self.s, g.app.gui.FKeys);
});},
</t>
<t tx="ekr.20201227092410.63">get isPlainKey () {return __get__ (this, function (self) {
    var s = self.s;
    if (__in__ (s, g.app.gui.ignoreChars)) {
        return false;
    }
    if (s.find ('Keypad+') &gt; -(1)) {
        return false;
    }
    if (self.find_mods (s) || self.isFKey ()) {
        return false;
    }
    if (__in__ (s, g.app.gui.specialChars)) {
        return false;
    }
    if (s == 'BackSpace') {
        return false;
    }
    return true;
});},
</t>
<t tx="ekr.20201227092410.64">get isNumPadKey () {return __get__ (this, function (self) {
    return self.s.find ('Keypad+') &gt; -(1);
});},
</t>
<t tx="ekr.20201227092410.65">get isPlainNumPad () {return __get__ (this, function (self) {
    return self.isNumPadKey () &amp;&amp; len (self.s.py_replace ('Keypad+', '')) == 1;
});},
</t>
<t tx="ekr.20201227092410.66">get removeNumPadModifier () {return __get__ (this, function (self) {
    self.s = self.s.py_replace ('Keypad+', '');
});},
</t>
<t tx="ekr.20201227092410.67">get prettyPrint () {return __get__ (this, function (self) {
    var s = self.s;
    if (!(s)) {
        return '&lt;None&gt;';
    }
    var d = dict ({' ': 'Space', '\t': 'Tab', '\n': 'Return', '\r': 'LineFeed'});
    var ch = s [-(1)];
    return s.__getslice__ (0, -(1), 1) + d.py_get (ch, ch);
});},
</t>
<t tx="ekr.20201227092410.68">get strip_mods () {return __get__ (this, function (self, s) {
    var table = tuple (['alt', 'cmd', 'command', 'control', 'ctrl', 'keypad', 'key_pad', 'meta', 'shift', 'shft']);
    for (var mod of table) {
        for (var suffix of '+-') {
            var target = mod + suffix;
            var i = s.lower ().find (target);
            if (i &gt; -(1)) {
                var s = s.__getslice__ (0, i, 1) + s.__getslice__ (i + len (target), null, 1);
                break;
            }
        }
    }
    return s;
});},
</t>
<t tx="ekr.20201227092410.69">get toGuiChar () {return __get__ (this, function (self) {
    var s = self.s.lower ();
    if (__in__ (s, tuple (['\n', 'return']))) {
        var s = '\n';
    }
    else if (__in__ (s, tuple (['\t', 'tab']))) {
        var s = '\t';
    }
    else if (__in__ (s, tuple (['\x08', 'backspace']))) {
        var s = '\x08';
    }
    else if (__in__ (s, tuple (['.', 'period']))) {
        var s = '.';
    }
    return s;
});},
</t>
<t tx="ekr.20201227092410.7">export var command_alias = function (alias, func) {
    funcToMethod (func, leoCommands.Commands, alias);
};
export var CommanderCommand =  __class__ ('CommanderCommand', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.70">    get toInsertableChar () {return __get__ (this, function (self) {
        var s = self.s;
        if (!(s) || self.find_mods (s)) {
            return '';
        }
        var d = dict ({'BackSpace': '\x08', 'LineFeed': '\n', 'Return': '\n', 'Tab': '\t'});
        if (__in__ (s, d)) {
            return d.py_get (s);
        }
        return (len (s) == 1 ? s : '');
    });}
});
</t>
<t tx="ekr.20201227092410.71">export var isStroke = function (obj) {
    return isinstance (obj, KeyStroke);
};
</t>
<t tx="ekr.20201227092410.72">export var isStrokeOrNone = function (obj) {
    return obj === null || isinstance (obj, KeyStroke);
};
export var MatchBrackets =  __class__ ('MatchBrackets', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.73">get __init__ () {return __get__ (this, function (self, c, p, language) {
    self.c = c;
    self.p = p.copy ();
    self.language = language;
    self.close_brackets = ')]}&gt;';
    self.open_brackets = '([{&lt;';
    self.brackets = self.open_brackets + self.close_brackets;
    self.matching_brackets = self.close_brackets + self.open_brackets;
    var __left0__ = g.set_delims_from_language (language);
    var d1 = __left0__ [0];
    var d2 = __left0__ [1];
    var d3 = __left0__ [2];
    var __left0__ = tuple ([d1, d2, d3]);
    self.single_comment = __left0__ [0];
    self.start_comment = __left0__ [1];
    self.end_comment = __left0__ [2];
    c.user_dict.py_setdefault ('_match_brackets', dict ({'count': 0, 'range': tuple ([0, 0])}));
});},
</t>
<t tx="ekr.20201227092410.74">get is_regex () {return __get__ (this, function (self, s, i) {
    if (__in__ (self.language, tuple (['javascript', 'perl']))) {
        var offset = (self.forward ? 1 : -(1));
        i += offset;
        while ((0 &lt;= i &amp;&amp; i &lt; len (s)) &amp;&amp; s [i] != '\n') {
            if (s [i] == '/') {
                return true;
            }
            i += offset;
        }
        return false;
    }
    return false;
});},
</t>
<t tx="ekr.20201227092410.75">get scan_regex () {return __get__ (this, function (self, s, i) {
    var offset = (self.forward ? 1 : -(1));
    var i1 = i;
    i += offset;
    var found = false;
    while ((0 &lt;= i &amp;&amp; i &lt; len (s)) &amp;&amp; s [i] != '\n') {
        var ch = s [i];
        var i2 = i - 1;
        i += offset;
        if (ch == '/') {
            var n = 0;
            while ((0 &lt;= i2 &amp;&amp; i2 &lt; len (s)) &amp;&amp; s [i2] == '\\') {
                n++;
                i2--;
            }
            if (__mod__ (n, 2) == 0) {
                if (self.language == 'perl' &amp;&amp; found === null) {
                    var found = i;
                }
                else {
                    var found = i;
                    break;
                }
            }
        }
    }
    if (found === null) {
        self.oops ('unmatched regex delim');
        return i1 + offset;
    }
    return found;
});},
</t>
<t tx="ekr.20201227092410.76">get scan_string () {return __get__ (this, function (self, s, i) {
    var delim = s [i];
    var offset = (self.forward ? 1 : -(1));
    i += offset;
    while ((0 &lt;= i &amp;&amp; i &lt; len (s))) {
        var ch = s [i];
        var i2 = i - 1;
        i += offset;
        if (ch == delim) {
            var n = 0;
            while ((0 &lt;= i2 &amp;&amp; i2 &lt; len (s)) &amp;&amp; s [i2] == '\\') {
                n++;
                i2--;
            }
            if (__mod__ (n, 2) == 0) {
                return i;
            }
        }
    }
    return i + offset;
});},
</t>
<t tx="ekr.20201227092410.77">get expand_range () {return __get__ (this, function (self, s, left, right, max_right, expand) {
    if (typeof expand == 'undefined' || (expand != null &amp;&amp; expand.hasOwnProperty ("__kwargtrans__"))) {;
        var expand = false;
    };
    var expanded = false;
    var orig_left = left;
    var orig_right = right;
    while ((!__in__ (s [left], self.brackets) || expand &amp;&amp; !(expanded)) &amp;&amp; (!__in__ (s [right], self.brackets) || expand &amp;&amp; !(expanded)) &amp;&amp; (left &gt; 0 || right &lt; max_right)) {
        var expanded = false;
        if (left &gt; 0) {
            left--;
            if (__in__ (s [left], self.brackets)) {
                var other = self.find_matching_bracket (s [left], s, left);
                if (other !== null &amp;&amp; other &gt;= orig_right) {
                    var expanded = 'left';
                }
            }
        }
        if (right &lt; max_right) {
            right++;
            if (__in__ (s [right], self.brackets)) {
                var other = self.find_matching_bracket (s [right], s, right);
                if (other !== null &amp;&amp; other &lt;= orig_left) {
                    var expanded = 'right';
                }
            }
        }
    }
    if (__in__ (s [left], self.brackets) &amp;&amp; (!(expand) || expanded == 'left')) {
        return tuple ([left, right, s [left], left]);
    }
    if (__in__ (s [right], self.brackets) &amp;&amp; (!(expand) || expanded == 'right')) {
        return tuple ([left, right, s [right], right]);
    }
    return tuple ([null, null, null, null]);
});},
</t>
<t tx="ekr.20201227092410.78">get find_matching_bracket () {return __get__ (this, function (self, ch1, s, i) {
    self.forward = __in__ (ch1, self.open_brackets);
    var __break0__ = false;
    for (var n = 0; n &lt; len (self.brackets); n++) {
        if (ch1 == self.brackets [n]) {
            var target = self.matching_brackets [n];
            __break0__ = true;
            break;
        }
    }
    if (!__break0__) {
        return null;
    }
    var f = (self.forward ? self.scan : self.scan_back);
    return f (ch1, target, s, i);
});},
</t>
<t tx="ekr.20201227092410.79">get scan () {return __get__ (this, function (self, ch1, target, s, i) {
    var level = 0;
    while ((0 &lt;= i &amp;&amp; i &lt; len (s))) {
        var progress = i;
        var ch = s [i];
        if (__in__ (ch, '"\'')) {
            var i = self.scan_string (s, i);
        }
        else if (self.starts_comment (s, i)) {
            var i = self.scan_comment (s, i);
        }
        else if (ch == '/' &amp;&amp; self.is_regex (s, i)) {
            var i = self.scan_regex (s, i);
        }
        else if (ch == ch1) {
            level++;
            i++;
        }
        else if (ch == target) {
            level--;
            if (level &lt;= 0) {
                return i;
            }
            i++;
        }
        else {
            i++;
        }
    }
    return null;
});},
</t>
<t tx="ekr.20201227092410.8">get __init__ () {return __get__ (this, function (self, py_name) {
    self.py_name = py_name;
});},
</t>
<t tx="ekr.20201227092410.80">get scan_comment () {return __get__ (this, function (self, s, i) {
    var i1 = i;
    var start = (self.forward ? self.start_comment : self.end_comment);
    var end = (self.forward ? self.end_comment : self.start_comment);
    var offset = (self.forward ? 1 : -(1));
    if (g.match (s, i, start)) {
        if (!(self.forward)) {
            i1 += len (end);
        }
        i += offset;
        while ((0 &lt;= i &amp;&amp; i &lt; len (s))) {
            if (g.match (s, i, end)) {
                var i = (self.forward ? i + len (end) : i - 1);
                return i;
            }
            i += offset;
        }
        self.oops ('unmatched multiline comment');
    }
    else if (self.forward) {
        var target = '\n';
        while ((0 &lt;= i &amp;&amp; i &lt; len (s))) {
            if (s [i] == '\n') {
                i++;
                return i;
            }
            i++;
        }
    }
    else {
        var target = self.single_comment;
        var found = null;
        i--;
        while ((0 &lt;= i &amp;&amp; i &lt; len (s)) &amp;&amp; s [i] != '\n') {
            if (g.match (s, i, target)) {
                var found = i;
            }
            i--;
        }
        if (found === null) {
            self.oops ('can not happen: unterminated single-line comment');
            var found = 0;
        }
        return found;
    }
    return i;
});},
</t>
<t tx="ekr.20201227092410.81">get starts_comment () {return __get__ (this, function (self, s, i) {
    if (self.forward) {
        if (self.single_comment &amp;&amp; g.match (s, i, self.single_comment)) {
            return true;
        }
        return self.start_comment &amp;&amp; self.end_comment &amp;&amp; g.match (s, i, self.start_comment);
    }
    if (s [i] == '\n') {
        if (self.single_comment) {
            i--;
            while (i &gt;= 0 &amp;&amp; s [i] != '\n') {
                if (g.match (s, i, self.single_comment)) {
                    return true;
                }
                i--;
            }
        }
        return false;
    }
    return self.start_comment &amp;&amp; self.end_comment &amp;&amp; g.match (s, i, self.end_comment);
});},
</t>
<t tx="ekr.20201227092410.82">get scan_back () {return __get__ (this, function (self, ch1, target, s, i) {
    var level = 0;
    while (i &gt;= 0) {
        var progress = i;
        var ch = s [i];
        if (self.ends_comment (s, i)) {
            var i = self.back_scan_comment (s, i);
        }
        else if (__in__ (ch, '"\'')) {
            var i = self.scan_string (s, i);
        }
        else if (ch == '/' &amp;&amp; self.is_regex (s, i)) {
            var i = self.scan_regex (s, i);
        }
        else if (ch == ch1) {
            level++;
            i--;
        }
        else if (ch == target) {
            level--;
            if (level &lt;= 0) {
                return i;
            }
            i--;
        }
        else {
            i--;
        }
    }
    return null;
});},
</t>
<t tx="ekr.20201227092410.83">get back_scan_comment () {return __get__ (this, function (self, s, i) {
    var i1 = i;
    if (g.match (s, i, self.end_comment)) {
        i1 += len (self.end_comment);
        i--;
        while (i &gt;= 0) {
            if (g.match (s, i, self.start_comment)) {
                i--;
                return i;
            }
            i--;
        }
        self.oops ('unmatched multiline comment');
        return i;
    }
    var found = null;
    i--;
    while (i &gt;= 0 &amp;&amp; s [i] != '\n') {
        if (g.match (s, i, self.single_comment)) {
            var found = i - 1;
        }
        i--;
    }
    if (found === null) {
        self.oops ('can not happen: unterminated single-line comment');
        var found = 0;
    }
    return found;
});},
</t>
<t tx="ekr.20201227092410.84">get ends_comment () {return __get__ (this, function (self, s, i) {
    if (s [i] == '\n') {
        if (self.single_comment) {
            var quote = null;
            i--;
            while (i &gt;= 0 &amp;&amp; s [i] != '\n') {
                var progress = i;
                if (quote &amp;&amp; s [i] == quote) {
                    var quote = null;
                    i--;
                }
                else if (__in__ (s [i], '"\'')) {
                    if (!(quote)) {
                        var quote = s [i];
                    }
                    i--;
                }
                else if (g.match (s, i, self.single_comment)) {
                    if (quote) {
                        while (i &gt;= 0 &amp;&amp; s [i] != 'n') {
                            if (s [i] == quote) {
                                return false;
                            }
                            i--;
                        }
                    }
                    return true;
                }
                else {
                    i--;
                }
            }
        }
        return false;
    }
    return self.start_comment &amp;&amp; self.end_comment &amp;&amp; g.match (s, i, self.end_comment);
});},
</t>
<t tx="ekr.20201227092410.85">get oops () {return __get__ (this, function (self, s) {
    g.es (s, __kwargtrans__ ({color: 'red'}));
});},
</t>
<t tx="ekr.20201227092410.86">    get run () {return __get__ (this, function (self) {
        var w = self.c.frame.body.wrapper;
        var s = w.getAllText ();
        var _mb = self.c.user_dict ['_match_brackets'];
        var sel_range = w.getSelectionRange ();
        if (!(w.hasSelection ())) {
            _mb ['count'] = 1;
        }
        if (_mb ['range'] == sel_range &amp;&amp; _mb ['count'] == 1) {
            _mb ['count']++;
            var insert = (w.getInsertPoint () == sel_range [0] ? 1 : 0);
            w.setSelectionRange (sel_range [0], sel_range [1], __kwargtrans__ ({insert: sel_range [insert]}));
            return ;
        }
        var max_right = len (s) - 1;
        var __left0__ = min (max_right, w.getInsertPoint ());
        var left = __left0__;
        var right = __left0__;
        var __left0__ = self.expand_range (s, left, right, max_right);
        var left = __left0__ [0];
        var right = __left0__ [1];
        var ch = __left0__ [2];
        var index = __left0__ [3];
        if (left === null) {
            g.es ('Bracket not found');
            return ;
        }
        var index2 = self.find_matching_bracket (ch, s, index);
        if (index2 === null) {
            g.es ('No matching bracket.');
            return ;
        }
        var minmax = tuple ([min (index, index2), max (index, index2) + 1]);
        if (_mb ['range'] == minmax) {
            _mb ['count']++;
        }
        else {
            _mb ['count'] = 1;
            _mb ['range'] = minmax;
        }
        if (_mb ['count'] &gt;= 3) {
            var __left0__ = self.expand_range (s, max (minmax [0], 0), min (minmax [1], max_right), max_right, __kwargtrans__ ({expand: true}));
            var left = __left0__ [0];
            var right = __left0__ [1];
            var ch = __left0__ [2];
            var index3 = __left0__ [3];
            if (index3 !== null) {
                var index4 = self.find_matching_bracket (ch, s, index3);
                if (index4 !== null) {
                    var __left0__ = tuple ([index3, index4]);
                    var index = __left0__ [0];
                    var index2 = __left0__ [1];
                    _mb ['count'] = 1;
                    _mb ['range'] = tuple ([min (index3, index4), max (index3, index4) + 1]);
                }
            }
        }
        if (index2 !== null) {
            if (index2 &lt; index) {
                w.setSelectionRange (index2, index + 1, __kwargtrans__ ({insert: index2}));
            }
            else {
                w.setSelectionRange (index, index2 + 1, __kwargtrans__ ({insert: min (len (s), index2 + 1)}));
            }
            w.see (index2);
        }
        else {
            g.es ('unmatched', repr (ch));
        }
    });}
});
export var PosList =  __class__ ('PosList', [list], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.87">get __init__ () {return __get__ (this, function (self, c, aList) {
    if (typeof aList == 'undefined' || (aList != null &amp;&amp; aList.hasOwnProperty ("__kwargtrans__"))) {;
        var aList = null;
    };
    self.c = c;
    __super__ (PosList, '__init__') (self);
    if (aList === null) {
        for (var p of c.all_positions ()) {
            self.append (p.copy ());
        }
    }
    else {
        for (var p of aList) {
            self.append (p.copy ());
        }
    }
});},
</t>
<t tx="ekr.20201227092410.88">get dump () {return __get__ (this, function (self, py_sort, verbose) {
    if (typeof py_sort == 'undefined' || (py_sort != null &amp;&amp; py_sort.hasOwnProperty ("__kwargtrans__"))) {;
        var py_sort = false;
    };
    if (typeof verbose == 'undefined' || (verbose != null &amp;&amp; verbose.hasOwnProperty ("__kwargtrans__"))) {;
        var verbose = false;
    };
    if (verbose) {
        return g.listToString (self, __kwargtrans__ ({py_sort: py_sort}));
    }
    return g.listToString ((function () {
        var __accu0__ = [];
        for (var p of self) {
            __accu0__.append (p.h);
        }
        return __accu0__;
    }) (), __kwargtrans__ ({py_sort: py_sort}));
});},
</t>
<t tx="ekr.20201227092410.9">    get __call__ () {return __get__ (this, function (self, func) {
        var commander_command_wrapper = function (event) {
            var c = event.py_get ('c');
            var method = getattr (c, func.__name__, null);
            method (__kwargtrans__ ({event: event}));
        };
        commander_command_wrapper.__func_name__ = func.__name__;
        commander_command_wrapper.__name__ = self.py_name;
        commander_command_wrapper.__doc__ = func.__doc__;
        global_commands_dict [self.py_name] = commander_command_wrapper;
        if (app) {
            funcToMethod (func, leoCommands.Commands);
            for (var c of app.commanders ()) {
                c.k.registerCommand (self.py_name, func);
            }
        }
        func.is_command = true;
        func.command_name = self.py_name;
        return func;
    });}
});
export var commander_command = CommanderCommand;
</t>
<t tx="ekr.20201227092410.90">get select () {return __get__ (this, function (self, pat, regex, removeClones) {
    if (typeof regex == 'undefined' || (regex != null &amp;&amp; regex.hasOwnProperty ("__kwargtrans__"))) {;
        var regex = false;
    };
    if (typeof removeClones == 'undefined' || (removeClones != null &amp;&amp; removeClones.hasOwnProperty ("__kwargtrans__"))) {;
        var removeClones = true;
    };
    var c = self.c;
    var aList = [];
    if (regex) {
        for (var p of self) {
            if (re.match (pat, p.h)) {
                aList.append (p.copy ());
            }
        }
    }
    else {
        for (var p of self) {
            if (p.h.find (pat) != -(1)) {
                aList.append (p.copy ());
            }
        }
    }
    if (removeClones) {
        var aList = self.removeClones (aList);
    }
    return PosList (c, aList);
});},
</t>
<t tx="ekr.20201227092410.91">    get removeClones () {return __get__ (this, function (self, aList) {
        var seen = dict ({});
        var aList2 = [];
        for (var p of aList) {
            if (!__in__ (p.v, seen)) {
                seen [p.v] = p.v;
                aList2.append (p);
            }
        }
        return aList2;
    });}
});
export var ReadLinesClass =  __class__ ('ReadLinesClass', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.92">get __init__ () {return __get__ (this, function (self, s) {
    self.lines = g.splitLines (s);
    self.i = 0;
});},
</t>
<t tx="ekr.20201227092410.93">    get py_next () {return __get__ (this, function (self) {
        if (self.i &lt; len (self.lines)) {
            var line = self.lines [self.i];
            self.i++;
        }
        else {
            var line = '';
        }
        return line;
    });},
    __next__: py_next
});
export var RedirectClass =  __class__ ('RedirectClass', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092410.94">get __init__ () {return __get__ (this, function (self) {
    self.old = null;
    self.encoding = 'utf-8';
});},
</t>
<t tx="ekr.20201227092410.95">get isRedirected () {return __get__ (this, function (self) {
    return self.old !== null;
});},
</t>
<t tx="ekr.20201227092410.96">get flush () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    return ;
});},
</t>
<t tx="ekr.20201227092410.97">get rawPrint () {return __get__ (this, function (self, s) {
    if (self.old) {
        self.old.write (s + '\n');
    }
    else {
        g.pr (s);
    }
});},
</t>
<t tx="ekr.20201227092410.98">get redirect () {return __get__ (this, function (self, stdout) {
    if (typeof stdout == 'undefined' || (stdout != null &amp;&amp; stdout.hasOwnProperty ("__kwargtrans__"))) {;
        var stdout = 1;
    };
    if (g.app.batchMode) {
        return ;
    }
    if (!(self.old)) {
        if (stdout) {
            var __left0__ = tuple ([sys.stdout, self]);
            self.old = __left0__ [0];
            sys.stdout = __left0__ [1];
        }
        else {
            var __left0__ = tuple ([sys.stderr, self]);
            self.old = __left0__ [0];
            sys.stderr = __left0__ [1];
        }
    }
});},
</t>
<t tx="ekr.20201227092410.99">get undirect () {return __get__ (this, function (self, stdout) {
    if (typeof stdout == 'undefined' || (stdout != null &amp;&amp; stdout.hasOwnProperty ("__kwargtrans__"))) {;
        var stdout = 1;
    };
    if (self.old) {
        if (stdout) {
            var __left0__ = tuple ([self.old, null]);
            sys.stdout = __left0__ [0];
            self.old = __left0__ [1];
        }
        else {
            var __left0__ = tuple ([self.old, null]);
            sys.stderr = __left0__ [0];
            self.old = __left0__ [1];
        }
    }
});},
</t>
<t tx="ekr.20201227092411.1">get createFindTab () {return __get__ (this, function (self, c, parentFrame) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.10">get get_window_info () {return __get__ (this, function (self, window) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.100">get canonicalizeTranslatedMenuName () {return __get__ (this, function (self, py_name) {
    if (g.isascii (py_name)) {
        @others
});},
</t>
<t tx="ekr.20201227092411.101">    return ''.join ((function () {
        var __accu0__ = [];
        for (var ch of py_name.lower ()) {
            if (!__in__ (ch, '&amp; \t\n\r')) {
                __accu0__.append (ch);
            }
        }
        return __accu0__;
    }) ());
}
</t>
<t tx="ekr.20201227092411.102">return ''.join ((function () {
    var __accu0__ = [];
    for (var ch of py_name) {
        if (!__in__ (ch, '&amp; \t\n\r')) {
            __accu0__.append (ch);
        }
    }
    return __accu0__;
}) ());
</t>
<t tx="ekr.20201227092411.103">get createMenuEntries () {return __get__ (this, function (self, menu, table) {
    var c = self.c;
    if (g.app.unitTesting) {
        return ;
    }
    if (!(menu)) {
        return ;
    }
    self.traceMenuTable (table);
    for (var data of table) {
        var __left0__ = self.getMenuEntryInfo (data, menu);
        var label = __left0__ [0];
        var command = __left0__ [1];
        var done = __left0__ [2];
        if (done) {
            continue;
        }
        var commandName = self.getMenuEntryBindings (command, label);
        if (!(commandName)) {
            continue;
        }
        var masterMenuCallback = self.createMasterMenuCallback (command, commandName);
        var realLabel = self.getRealMenuName (label);
        var amp_index = realLabel.find ('&amp;');
        var realLabel = realLabel.py_replace ('&amp;', '');
        c.add_command (menu, __kwargtrans__ ({label: realLabel, accelerator: '', command: masterMenuCallback, commandName: commandName, underline: amp_index}));
    }
});},
</t>
<t tx="ekr.20201227092411.104">get createMasterMenuCallback () {return __get__ (this, function (self, command, commandName) {
    var c = self.c;
    @others
});},
</t>
<t tx="ekr.20201227092411.105">var getWidget = function () {
    var w = c.frame.getFocus ();
    if (w &amp;&amp; g.isMac) {
        var wname = c.widget_name (w);
        if (wname.startswith ('head')) {
            var w = c.frame.tree.edit_widget (c.p);
        }
    }
    if (!(g.isTextWrapper (w))) {
        var w = getattr (w, 'wrapper', w);
    }
    return w;
};
if (isinstance (command, str)) {
</t>
<t tx="ekr.20201227092411.106">    var static_menu_callback = function () {
        var event = g.app.gui.create_key_event (c, __kwargtrans__ ({w: getWidget ()}));
        c.doCommandByName (commandName, event);
    };
    return static_menu_callback;
}
if (!(callable (command))) {
</t>
<t tx="ekr.20201227092411.107">    var dummy_menu_callback = function (event) {
        if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
            var event = null;
        };
        // pass;
    };
    g.trace ('bad command: {}'.format (command), __kwargtrans__ ({color: 'red'}));
    return dummy_menu_callback;
}
</t>
<t tx="ekr.20201227092411.108">var dynamic_menu_callback = function () {
    var event = g.app.gui.create_key_event (c, __kwargtrans__ ({w: getWidget ()}));
    return c.doCommand (command, commandName, event);
};
return dynamic_menu_callback;
</t>
<t tx="ekr.20201227092411.109">get getMenuEntryBindings () {return __get__ (this, function (self, command, label) {
    var c = self.c;
    if (isinstance (command, str)) {
        var commandName = command;
    }
    else {
        var commandName = label.strip ();
    }
    var command = c.commandsDict.py_get (commandName);
    return commandName;
});},
</t>
<t tx="ekr.20201227092411.11">get get_focus () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.110">get getMenuEntryInfo () {return __get__ (this, function (self, data, menu) {
    var done = false;
    if (isinstance (data, str)) {
        var s = data;
        var removeHyphens = s &amp;&amp; s [0] == '*';
        if (removeHyphens) {
            var s = s.__getslice__ (1, null, 1);
        }
        var label = self.capitalizeMinibufferMenuName (s, removeHyphens);
        var command = s.py_replace ('&amp;', '').lower ();
        if (label == '-') {
            self.add_separator (menu);
            var done = true;
        }
    }
    else {
        var ok = isinstance (data, tuple ([list, tuple])) &amp;&amp; __in__ (len (data), tuple ([2, 3]));
        if (ok) {
            if (len (data) == 2) {
                var __left0__ = data;
                var label = __left0__ [0];
                var command = __left0__ [1];
            }
            else {
                var __left0__ = data;
                var label = __left0__ [0];
                var junk = __left0__ [1];
                var command = __left0__ [2];
            }
            if (__in__ (label, tuple ([null, '-']))) {
                self.add_separator (menu);
                var done = true;
            }
        }
        else {
            g.trace ('bad data in menu table: {}'.format (repr (data)));
            var done = true;
        }
    }
    return tuple ([label, command, done]);
});},
</t>
<t tx="ekr.20201227092411.111">get traceMenuTable () {return __get__ (this, function (self, table) {
    var trace = false &amp;&amp; !(g.unitTesting);
    if (!(trace)) {
        return ;
    }
    var format = '%40s %s';
    g.trace ('*' * 40);
    for (var data of table) {
        if (isinstance (data, tuple ([list, tuple]))) {
            var n = len (data);
            if (n == 2) {
                print (__mod__ (format, tuple ([data [0], data [1]])));
            }
            else if (n == 3) {
                var __left0__ = data;
                var py_name = __left0__ [0];
                var junk = __left0__ [1];
                var func = __left0__ [2];
                print (__mod__ (format, tuple ([py_name, func &amp;&amp; func.__name__ || '&lt;NO FUNC&gt;'])));
            }
        }
        else {
            print (__mod__ (format, tuple ([data, ''])));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.112">get createMenuItemsFromTable () {return __get__ (this, function (self, menuName, table) {
    if (g.app.gui.isNullGui) {
        return ;
    }
    try {
        var menu = self.getMenu (menuName);
        if (menu === null) {
            return ;
        }
        self.createMenuEntries (menu, table);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es_print ('exception creating items for', menuName, 'menu');
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
    g.app.menuWarningsGiven = true;
});},
</t>
<t tx="ekr.20201227092411.113">get createNewMenu () {return __get__ (this, function (self, menuName, parentName, before) {
    if (typeof parentName == 'undefined' || (parentName != null &amp;&amp; parentName.hasOwnProperty ("__kwargtrans__"))) {;
        var parentName = 'top';
    };
    if (typeof before == 'undefined' || (before != null &amp;&amp; before.hasOwnProperty ("__kwargtrans__"))) {;
        var before = null;
    };
    try {
        var parent = self.getMenu (parentName);
        var menu = self.getMenu (menuName);
        if (menu) {
            return null;
        }
        var menu = self.new_menu (parent, __kwargtrans__ ({tearoff: 0, label: menuName}));
        self.setMenu (menuName, menu);
        var label = self.getRealMenuName (menuName);
        var amp_index = label.find ('&amp;');
        var label = label.py_replace ('&amp;', '');
        if (before) {
            var index_label = self.getRealMenuName (before);
            var amp_index = index_label.find ('&amp;');
            var index_label = index_label.py_replace ('&amp;', '');
            var index = parent.index (index_label);
            self.insert_cascade (parent, __kwargtrans__ ({index: index, label: label, menu: menu, underline: amp_index}));
        }
        else {
            self.add_cascade (parent, __kwargtrans__ ({label: label, menu: menu, underline: amp_index}));
        }
        return menu;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es ('exception creating', menuName, 'menu');
            g.es_exception ();
            return null;
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.114">get createOpenWithMenuFromTable () {return __get__ (this, function (self, table) {
    var k = self.c.k;
    if (!(table)) {
        return ;
    }
    g.app.openWithTable = table;
    var parent = self.getMenu ('File');
    if (!(parent)) {
        if (!(g.app.batchMode)) {
            g.error ('', 'createOpenWithMenuFromTable:', 'no File menu');
        }
        return ;
    }
    var label = self.getRealMenuName ('Open &amp;With...');
    var amp_index = label.find ('&amp;');
    var label = label.py_replace ('&amp;', '');
    try {
        var index = parent.index (label);
        parent.delete (index);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            try {
                var index = parent.index ('Open With...');
                parent.delete (index);
            }
            catch (__except1__) {
                if (isinstance (__except1__, Exception)) {
                    g.trace ('unexpected exception');
                    g.es_exception ();
                    return ;
                }
                else {
                    throw __except1__;
                }
            }
        }
        else {
            throw __except0__;
        }
    }
    var openWithMenu = self.createOpenWithMenu (parent, label, index, amp_index);
    if (!(openWithMenu)) {
        g.trace ('openWithMenu returns None');
        return ;
    }
    self.setMenu ('Open With...', openWithMenu);
    self.createOpenWithMenuItemsFromTable (openWithMenu, table);
    for (var d of table) {
        k.bindOpenWith (d);
    }
});},
</t>
<t tx="ekr.20201227092411.115">get createOpenWithMenuItemsFromTable () {return __get__ (this, function (self, menu, table) {
    var c = self.c;
    if (g.app.unitTesting) {
        return ;
    }
    for (var d of table) {
        var label = d.py_get ('name');
        var args = d.py_get ('args', []);
        var accel = d.py_get ('shortcut') || '';
        if (label &amp;&amp; args) {
            var realLabel = self.getRealMenuName (label);
            var underline = realLabel.find ('&amp;');
            var realLabel = realLabel.py_replace ('&amp;', '');
            var callback = self.defineOpenWithMenuCallback (d);
            c.add_command (menu, __kwargtrans__ ({label: realLabel, accelerator: accel, command: callback, underline: underline}));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.116">get defineOpenWithMenuCallback () {return __get__ (this, function (self, d) {
    var openWithMenuCallback = function (event, self, d) {
        if (typeof event == 'undefined' || (event != null &amp;&amp; event.hasOwnProperty ("__kwargtrans__"))) {;
            var event = null;
        };
        if (typeof self == 'undefined' || (self != null &amp;&amp; self.hasOwnProperty ("__kwargtrans__"))) {;
            var self = self;
        };
        if (typeof d == 'undefined' || (d != null &amp;&amp; d.hasOwnProperty ("__kwargtrans__"))) {;
            var d = d;
        };
        return self.c.openWith (__kwargtrans__ ({d: d}));
    };
    return openWithMenuCallback;
});},
</t>
<t tx="ekr.20201227092411.118">get deleteRecentFilesMenuItems () {return __get__ (this, function (self, menu) {
    var rf = g.app.recentFilesManager;
    var recentFiles = rf.getRecentFiles ();
    var toDrop = len (recentFiles) + len (rf.getRecentFilesTable ());
    self.delete_range (menu, 0, toDrop);
    for (var i of rf.groupedMenus) {
        var menu = self.getMenu (i);
        if (menu) {
            self.destroy (menu);
            self.destroyMenu (i);
        }
    }
});},
</t>
<t tx="ekr.20201227092411.119">get deleteMenu () {return __get__ (this, function (self, menuName) {
    try {
        var menu = self.getMenu (menuName);
        if (menu) {
            self.destroy (menu);
            self.destroyMenu (menuName);
        }
        else {
            g.es ("can't delete menu:", menuName);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es ('exception deleting', menuName, 'menu');
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.12">get set_focus () {return __get__ (this, function (self, commander, widget) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.120">get deleteMenuItem () {return __get__ (this, function (self, itemName, menuName) {
    if (typeof menuName == 'undefined' || (menuName != null &amp;&amp; menuName.hasOwnProperty ("__kwargtrans__"))) {;
        var menuName = 'top';
    };
    try {
        var menu = self.getMenu (menuName);
        if (menu) {
            var realItemName = self.getRealMenuName (itemName);
            self.delete (menu, realItemName);
        }
        else {
            g.es ('menu not found:', menuName);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es ('exception deleting', itemName, 'from', menuName, 'menu');
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.121">get getRealMenuName () {return __get__ (this, function (self, menuName) {
    var cmn = self.canonicalizeTranslatedMenuName (menuName);
    return g.app.realMenuNameDict.py_get (cmn, menuName);
});},
</t>
<t tx="ekr.20201227092411.122">get setRealMenuName () {return __get__ (this, function (self, untrans, trans) {
    var cmn = self.canonicalizeTranslatedMenuName (untrans);
    g.app.realMenuNameDict [cmn] = trans;
});},
</t>
<t tx="ekr.20201227092411.123">get setRealMenuNamesFromTable () {return __get__ (this, function (self, table) {
    try {
        for (var [untrans, trans] of table) {
            self.setRealMenuName (untrans, trans);
        }
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.es ('exception in', 'setRealMenuNamesFromTable');
            g.es_exception ();
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.124">get getMenu () {return __get__ (this, function (self, menuName) {
    var cmn = self.canonicalizeMenuName (menuName);
    return self.menus.py_get (cmn);
});},
</t>
<t tx="ekr.20201227092411.125">get setMenu () {return __get__ (this, function (self, menuName, menu) {
    var cmn = self.canonicalizeMenuName (menuName);
    self.menus [cmn] = menu;
});},
</t>
<t tx="ekr.20201227092411.126">get destroyMenu () {return __get__ (this, function (self, menuName) {
    var cmn = self.canonicalizeMenuName (menuName);
    delete self.menus [cmn];
});},
</t>
<t tx="ekr.20201227092411.127">get add_cascade () {return __get__ (this, function (self, parent, label, menu, underline) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.128">get add_command () {return __get__ (this, function (self, menu) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.129">get add_separator () {return __get__ (this, function (self, menu) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.13">get getFontFromParams () {return __get__ (this, function (self, family, size, slant, weight, defaultSize) {
    if (typeof defaultSize == 'undefined' || (defaultSize != null &amp;&amp; defaultSize.hasOwnProperty ("__kwargtrans__"))) {;
        var defaultSize = 12;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.130">get delete () {return __get__ (this, function (self, menu, realItemName) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.131">get delete_range () {return __get__ (this, function (self, menu, n1, n2) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.132">get destroy () {return __get__ (this, function (self, menu) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.133">get insert () {return __get__ (this, function (self, menuName, position, label, command, underline) {
    if (typeof underline == 'undefined' || (underline != null &amp;&amp; underline.hasOwnProperty ("__kwargtrans__"))) {;
        var underline = null;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.134">get insert_cascade () {return __get__ (this, function (self, parent, index, label, menu, underline) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.135">get new_menu () {return __get__ (this, function (self, parent, tearoff, label) {
    if (typeof tearoff == 'undefined' || (tearoff != null &amp;&amp; tearoff.hasOwnProperty ("__kwargtrans__"))) {;
        var tearoff = 0;
    };
    if (typeof label == 'undefined' || (label != null &amp;&amp; label.hasOwnProperty ("__kwargtrans__"))) {;
        var label = '';
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.136">get activateMenu () {return __get__ (this, function (self, menuName) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.137">get clearAccel () {return __get__ (this, function (self, menu, py_name) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.138">get createMenuBar () {return __get__ (this, function (self, frame) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.139">get createOpenWithMenu () {return __get__ (this, function (self, parent, label, index, amp_index) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.14">get getFullVersion () {return __get__ (this, function (self, c) {
    if (typeof c == 'undefined' || (c != null &amp;&amp; c.hasOwnProperty ("__kwargtrans__"))) {;
        var c = null;
    };
    return 'LeoGui: dummy version';
});},
</t>
<t tx="ekr.20201227092411.140">get disableMenu () {return __get__ (this, function (self, menu, py_name) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.141">get enableMenu () {return __get__ (this, function (self, menu, py_name, val) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.142">get getMacHelpMenu () {return __get__ (this, function (self, table) {
    return null;
});},
</t>
<t tx="ekr.20201227092411.143">get getMenuLabel () {return __get__ (this, function (self, menu, py_name) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.144">    get setMenuLabel () {return __get__ (this, function (self, menu, py_name, label, underline) {
        if (typeof underline == 'undefined' || (underline != null &amp;&amp; underline.hasOwnProperty ("__kwargtrans__"))) {;
            var underline = -(1);
        };
        self.oops ();
    });}
});
export var NullMenu =  __class__ ('NullMenu', [LeoMenu], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.145">get __init__ () {return __get__ (this, function (self, frame) {
    __super__ (NullMenu, '__init__') (self, frame);
    self.isNull = true;
});},
</t>
<t tx="ekr.20201227092411.146">    get oops () {return __get__ (this, function (self) {
        // pass;
    });}
});

//# sourceMappingURL=leo.core.leoMenu.map
</t>
<t tx="ekr.20201227092411.147">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:08
var itertools = {};
var re = {};
var time = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import {signal_manager} from './leo.core.js';
import * as g from './leo.core.leoGlobals.js';
import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
import * as __module_time__ from './time.js';
__nest__ (time, '', __module_time__);
import * as __module_itertools__ from './itertools.js';
__nest__ (itertools, '', __module_itertools__);
var __name__ = 'leo.core.leoNodes';
export var NodeIndices =  __class__ ('NodeIndices', [object], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092411.148">get __init__ () {return __get__ (this, function (self, id_) {
    self.defaultId = id_;
    self.lastIndex = 0;
    self.stack = [];
    self.timeString = '';
    self.userId = id_;
    self.setTimeStamp ();
});},
</t>
<t tx="ekr.20201227092411.149">get check_gnx () {return __get__ (this, function (self, c, gnx, v) {
    var fc = c.fileCommands;
    if (gnx == 'hidden-root-vnode-gnx') {
        return ;
    }
    var v2 = fc.gnxDict.py_get (gnx);
    if (v2 &amp;&amp; v2 != v) {
        g.internalError ('getNewIndex: gnx clash {}\n          v: {}\n         v2: {}'.format (gnx, v, v2));
    }
});},
</t>
<t tx="ekr.20201227092411.15">get makeScriptButton () {return __get__ (this, function (self, c, args, p, script, buttonText, balloonText, shortcut, bg, define_g, define_name, silent) {
    if (typeof args == 'undefined' || (args != null &amp;&amp; args.hasOwnProperty ("__kwargtrans__"))) {;
        var args = null;
    };
    if (typeof p == 'undefined' || (p != null &amp;&amp; p.hasOwnProperty ("__kwargtrans__"))) {;
        var p = null;
    };
    if (typeof script == 'undefined' || (script != null &amp;&amp; script.hasOwnProperty ("__kwargtrans__"))) {;
        var script = null;
    };
    if (typeof buttonText == 'undefined' || (buttonText != null &amp;&amp; buttonText.hasOwnProperty ("__kwargtrans__"))) {;
        var buttonText = null;
    };
    if (typeof balloonText == 'undefined' || (balloonText != null &amp;&amp; balloonText.hasOwnProperty ("__kwargtrans__"))) {;
        var balloonText = 'Script Button';
    };
    if (typeof shortcut == 'undefined' || (shortcut != null &amp;&amp; shortcut.hasOwnProperty ("__kwargtrans__"))) {;
        var shortcut = null;
    };
    if (typeof bg == 'undefined' || (bg != null &amp;&amp; bg.hasOwnProperty ("__kwargtrans__"))) {;
        var bg = 'LightSteelBlue1';
    };
    if (typeof define_g == 'undefined' || (define_g != null &amp;&amp; define_g.hasOwnProperty ("__kwargtrans__"))) {;
        var define_g = true;
    };
    if (typeof define_name == 'undefined' || (define_name != null &amp;&amp; define_name.hasOwnProperty ("__kwargtrans__"))) {;
        var define_name = '__main__';
    };
    if (typeof silent == 'undefined' || (silent != null &amp;&amp; silent.hasOwnProperty ("__kwargtrans__"))) {;
        var silent = false;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.150">get compute_last_index () {return __get__ (this, function (self, c) {
    var ni = self;
    for (var v of c.all_unique_nodes ()) {
        var gnx = v.fileIndex;
        if (gnx) {
            var __left0__ = self.scanGnx (gnx);
            var id_ = __left0__ [0];
            var t = __left0__ [1];
            var n = __left0__ [2];
            if (t == ni.timeString &amp;&amp; n !== null) {
                try {
                    var n = int (n);
                    self.lastIndex = max (self.lastIndex, n);
                }
                catch (__except0__) {
                    if (isinstance (__except0__, Exception)) {
                        g.es_exception ();
                        self.lastIndex++;
                    }
                    else {
                        throw __except0__;
                    }
                }
            }
        }
    }
});},
</t>
<t tx="ekr.20201227092411.151">get computeNewIndex () {return __get__ (this, function (self) {
    var t_s = self.py_update ();
    var gnx = g.toUnicode ('{}.{}.{}'.format (self.userId, t_s, self.lastIndex));
    return gnx;
});},
</t>
<t tx="ekr.20201227092411.152">get getDefaultId () {return __get__ (this, function (self) {
    return self.defaultId;
});},
</t>
<t tx="ekr.20201227092411.153">get setDefaultId () {return __get__ (this, function (self, theId) {
    self.defaultId = theId;
});},
</t>
<t tx="ekr.20201227092411.154">get getNewIndex () {return __get__ (this, function (self, v, cached) {
    if (typeof cached == 'undefined' || (cached != null &amp;&amp; cached.hasOwnProperty ("__kwargtrans__"))) {;
        var cached = false;
    };
    if (v === null) {
        g.internalError ('getNewIndex: v is None');
        return '';
    }
    var c = v.context;
    var fc = c.fileCommands;
    var t_s = self.py_update ();
    var gnx = g.toUnicode ('{}.{}.{}'.format (self.userId, t_s, self.lastIndex));
    v.fileIndex = gnx;
    self.check_gnx (c, gnx, v);
    fc.gnxDict [gnx] = v;
    return gnx;
});},
</t>
<t tx="ekr.20201227092411.155">get new_vnode_helper () {return __get__ (this, function (self, c, gnx, v) {
    var ni = self;
    if (gnx) {
        v.fileIndex = gnx;
        ni.check_gnx (c, gnx, v);
        c.fileCommands.gnxDict [gnx] = v;
    }
    else {
        v.fileIndex = ni.getNewIndex (v);
    }
});},
</t>
<t tx="ekr.20201227092411.156">get scanGnx () {return __get__ (this, function (self, s, i) {
    if (typeof i == 'undefined' || (i != null &amp;&amp; i.hasOwnProperty ("__kwargtrans__"))) {;
        var i = 0;
    };
    if (!(isinstance (s, str))) {
        g.error ('scanGnx: unexpected index type:', py_typeof (s), '', s);
        return tuple ([null, null, null]);
    }
    var s = s.strip ();
    var __left0__ = tuple ([null, null, null]);
    var theId = __left0__ [0];
    var t = __left0__ [1];
    var n = __left0__ [2];
    var __left0__ = g.skip_to_char (s, i, '.');
    var i = __left0__ [0];
    var theId = __left0__ [1];
    if (g.match (s, i, '.')) {
        var __left0__ = g.skip_to_char (s, i + 1, '.');
        var i = __left0__ [0];
        var t = __left0__ [1];
        if (g.match (s, i, '.')) {
            var __left0__ = g.skip_to_char (s, i + 1, '.');
            var i = __left0__ [0];
            var n = __left0__ [1];
        }
    }
    if (!(theId)) {
        var theId = self.defaultId;
    }
    return tuple ([theId, t, n]);
});},
</t>
<t tx="ekr.20201227092411.157">get setTimestamp () {return __get__ (this, function (self) {
    self.timeString = time.strftime ('%Y%m%d%H%M%S', time.localtime ());
});},
setTimeStamp: setTimestamp,
</t>
<t tx="ekr.20201227092411.158">get tupleToString () {return __get__ (this, function (self, aTuple) {
    var __left0__ = aTuple;
    var theId = __left0__ [0];
    var t = __left0__ [1];
    var n = __left0__ [2];
    if (__in__ (n, tuple ([null, 0, '']))) {
        var s = '{}.{}'.format (theId, t);
    }
    else {
        var s = '{}.{}.{}'.format (theId, t, n);
    }
    return g.toUnicode (s);
});},
</t>
<t tx="ekr.20201227092411.159">get py_update () {return __get__ (this, function (self) {
    var t_s = time.strftime ('%Y%m%d%H%M%S', time.localtime ());
    if (self.timeString == t_s) {
        self.lastIndex++;
    }
    else {
        self.lastIndex = 1;
        self.timeString = t_s;
    }
    return t_s;
});},
</t>
<t tx="ekr.20201227092411.16">get dismiss_splash_screen () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.160">    get updateLastIndex () {return __get__ (this, function (self, gnx) {
        var __left0__ = self.scanGnx (gnx);
        var id_ = __left0__ [0];
        var t = __left0__ [1];
        var n = __left0__ [2];
        if (!(id_) || n != 0 &amp;&amp; !(n)) {
            return ;
        }
        if (id_ == self.userId &amp;&amp; t == self.timeString) {
            try {
                var n = int (n);
                if (n &gt; self.lastIndex) {
                    self.lastIndex = n;
                    g.trace (gnx, '--&gt;', n);
                }
            }
            catch (__except0__) {
                if (isinstance (__except0__, Exception)) {
                    g.trace ('can not happen', repr (n));
                }
                else {
                    throw __except0__;
                }
            }
        }
    });}
});
export var Position =  __class__ ('Position', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.161">get __init__ () {return __get__ (this, function (self, v, childIndex, stack) {
    if (typeof childIndex == 'undefined' || (childIndex != null &amp;&amp; childIndex.hasOwnProperty ("__kwargtrans__"))) {;
        var childIndex = 0;
    };
    if (typeof stack == 'undefined' || (stack != null &amp;&amp; stack.hasOwnProperty ("__kwargtrans__"))) {;
        var stack = null;
    };
    self._childIndex = childIndex;
    self.v = v;
    if (stack) {
        self.stack = stack.__getslice__ (0, null, 1);
    }
    else {
        self.stack = [];
    }
    g.app.positions++;
});},
</t>
<t tx="ekr.20201227092411.162">get __eq__ () {return __get__ (this, function (self, p2) {
    var p1 = self;
    if (!(isinstance (p2, Position))) {
        return false;
    }
    if (p2 === null || p2.v === null) {
        return p1.v === null;
    }
    return p1.v == p2.v &amp;&amp; p1._childIndex == p2._childIndex &amp;&amp; p1.stack == p2.stack;
});},
</t>
<t tx="ekr.20201227092411.163">get __ne__ () {return __get__ (this, function (self, p2) {
    return !(self.__eq__ (p2));
});},
</t>
<t tx="ekr.20201227092411.164">get __ge__ () {return __get__ (this, function (self, other) {
    return self.__eq__ (other) || self.__gt__ (other);
});},
</t>
<t tx="ekr.20201227092411.165">get __le__ () {return __get__ (this, function (self, other) {
    return self.__eq__ (other) || self.__lt__ (other);
});},
</t>
<t tx="ekr.20201227092411.166">get __lt__ () {return __get__ (this, function (self, other) {
    return !(self.__eq__ (other)) &amp;&amp; !(self.__gt__ (other));
});},
</t>
<t tx="ekr.20201227092411.167">get __gt__ () {return __get__ (this, function (self, other) {
    var __left0__ = tuple ([self.stack, other.stack]);
    var stack1 = __left0__ [0];
    var stack2 = __left0__ [1];
    var __left0__ = tuple ([len (stack1), len (stack2)]);
    var n1 = __left0__ [0];
    var n2 = __left0__ [1];
    var n = min (n1, n2);
    for (var [item1, item2] of zip (stack1, stack2)) {
        var __left0__ = item1;
        var v1 = __left0__ [0];
        var x1 = __left0__ [1];
        var __left0__ = item2;
        var v2 = __left0__ [0];
        var x2 = __left0__ [1];
        if (x1 &gt; x2) {
            return true;
        }
        if (x1 &lt; x2) {
            return false;
        }
    }
    if (n1 == n2) {
        var __left0__ = tuple ([self._childIndex, other._childIndex]);
        var x1 = __left0__ [0];
        var x2 = __left0__ [1];
        return x1 &gt; x2;
    }
    if (n1 &lt; n2) {
        var x1 = self._childIndex;
        var __left0__ = other.stack [n];
        var v2 = __left0__ [0];
        var x2 = __left0__ [1];
        return x1 &gt; x2;
    }
    var x1 = other._childIndex;
    var __left0__ = self.stack [n];
    var v2 = __left0__ [0];
    var x2 = __left0__ [1];
    return x2 &gt;= x1;
});},
</t>
<t tx="ekr.20201227092411.168">get __bool__ () {return __get__ (this, function (self) {
    return self.v !== null;
});},
</t>
<t tx="ekr.20201227092411.169">get __str__ () {return __get__ (this, function (self) {
    var p = self;
    if (p.v) {
        return '&lt;pos {} childIndex: {} lvl: {} key: {} {}&gt;'.format (id (p), p._childIndex, p.level (), p.key (), p.h);
    }
    return '&lt;pos {} [{}] None&gt;'.format (id (p), len (p.stack));
});},
__repr__: __str__,
</t>
<t tx="ekr.20201227092411.17">get ensure_commander_visible () {return __get__ (this, function (self, c) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.170">get archivedPosition () {return __get__ (this, function (self, root_p) {
    if (typeof root_p == 'undefined' || (root_p != null &amp;&amp; root_p.hasOwnProperty ("__kwargtrans__"))) {;
        var root_p = null;
    };
    var p = self;
    if (root_p === null) {
        var aList = (function () {
            var __accu0__ = [];
            for (var z of p.self_and_parents ()) {
                __accu0__.append (z._childIndex);
            }
            return __accu0__;
        }) ();
    }
    else {
        var aList = [];
        for (var z of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
            if (z == root_p) {
                aList.append (0);
                break;
            }
            else {
                aList.append (z._childIndex);
            }
        }
    }
    aList.reverse ();
    return aList;
});},
</t>
<t tx="ekr.20201227092411.172">get dumpLink () {return __get__ (this, function (self, link) {
    return (link ? link : '&lt;none&gt;');
});},
</t>
<t tx="ekr.20201227092411.173">get dump () {return __get__ (this, function (self, label) {
    if (typeof label == 'undefined' || (label != null &amp;&amp; label.hasOwnProperty ("__kwargtrans__"))) {;
        var label = '';
    };
    var p = self;
    if (p.v) {
        p.v.dump ();
    }
});},
</t>
<t tx="ekr.20201227092411.174">get key () {return __get__ (this, function (self) {
    var p = self;
    var result = [];
    for (var z of p.stack) {
        var __left0__ = z;
        var v = __left0__ [0];
        var childIndex = __left0__ [1];
        result.append ('{}:{}'.format (id (v), childIndex));
    }
    result.append ('{}:{}'.format (id (p.v), p._childIndex));
    return '.'.join (result);
});},
</t>
<t tx="ekr.20201227092411.175">get sort_key () {return __get__ (this, function (self, p) {
    return (function () {
        var __accu0__ = [];
        for (var s of p.key ().py_split ('.')) {
            __accu0__.append (int (s.py_split (':') [1]));
        }
        return __accu0__;
    }) ();
});},
__hash__: null,
</t>
<t tx="ekr.20201227092411.177">get convertTreeToString () {return __get__ (this, function (self) {
    var p = self;
    var level1 = p.level ();
    var array = [];
    for (var p of p.self_and_subtree (__kwargtrans__ ({copy: false}))) {
        array.append (p.moreHead (level1) + '\n');
        var body = p.moreBody ();
        if (body) {
            array.append (body + '\n');
        }
    }
    return ''.join (array);
});},
</t>
<t tx="ekr.20201227092411.178">get moreHead () {return __get__ (this, function (self, firstLevel, useVerticalBar) {
    if (typeof useVerticalBar == 'undefined' || (useVerticalBar != null &amp;&amp; useVerticalBar.hasOwnProperty ("__kwargtrans__"))) {;
        var useVerticalBar = false;
    };
    var p = self;
    var level = self.level () - firstLevel;
    var plusMinus = (p.hasChildren () ? '+' : '-');
    var pad = '\t' * level;
    return '{}{} {}'.format (pad, plusMinus, p.h);
});},
</t>
<t tx="ekr.20201227092411.179">get moreBody () {return __get__ (this, function (self) {
    var p = self;
    var array = [];
    var lines = p.b.py_split ('\n');
    for (var s of lines) {
        var i = g.skip_ws (s, 0);
        if (i &lt; len (s) &amp;&amp; __in__ (s [i], tuple (['+', '-', '\\']))) {
            var s = (s.__getslice__ (0, i, 1) + '\\') + s.__getslice__ (i, null, 1);
        }
        array.append (s);
    }
    return '\n'.join (array);
});},
</t>
<t tx="ekr.20201227092411.18">get finishCreate () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.180">get children () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.firstChild ();
    while (p) {
        yield (copy ? p.copy () : p);
        p.moveToNext ();
    }
    });},
children_iter: children,
</t>
<t tx="ekr.20201227092411.181">get following_siblings () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.py_next ();
    while (p) {
        yield (copy ? p.copy () : p);
        p.moveToNext ();
    }
    });},
following_siblings_iter: following_siblings,
</t>
<t tx="ekr.20201227092411.182">get nearest_roots () {return __get__ (this, function* (self, copy, predicate) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    if (typeof predicate == 'undefined' || (predicate != null &amp;&amp; predicate.hasOwnProperty ("__kwargtrans__"))) {;
        var predicate = null;
    };
    if (predicate === null) {
        var predicate = function (p) {
            return p.isAnyAtFileNode ();
        };
    }
    var p1 = self;
    for (var p of p1.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (predicate (p)) {
            yield (copy ? p.copy () : p);
            return ;
        }
    }
    var after = p1.nodeAfterTree ();
    var p = p1;
    while (p &amp;&amp; p != after) {
        if (predicate (p)) {
            yield (copy ? p.copy () : p);
            p.moveToNodeAfterTree ();
        }
        else {
            p.moveToThreadNext ();
        }
    }
    });},
</t>
<t tx="ekr.20201227092411.184">get nearest_unique_roots () {return __get__ (this, function* (self, copy, predicate) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    if (typeof predicate == 'undefined' || (predicate != null &amp;&amp; predicate.hasOwnProperty ("__kwargtrans__"))) {;
        var predicate = null;
    };
    if (predicate === null) {
        var predicate = function (p) {
            return p.isAnyAtFileNode ();
        };
    }
    var p1 = self;
    for (var p of p1.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (predicate (p)) {
            yield (copy ? p.copy () : p);
            return ;
        }
    }
    var seen = set ();
    var after = p1.nodeAfterTree ();
    var p = p1;
    while (p &amp;&amp; p != after) {
        if (predicate (p)) {
            if (!__in__ (p.v, seen)) {
                seen.add (p.v);
                yield (copy ? p.copy () : p);
            }
            p.moveToNodeAfterTree ();
        }
        else {
            p.moveToThreadNext ();
        }
    }
    });},
nearest: nearest_unique_roots,
</t>
<t tx="ekr.20201227092411.186">get nodes () {return __get__ (this, function* (self) {
    var p = self;
    var p = p.copy ();
    var after = p.nodeAfterTree ();
    while (p &amp;&amp; p != after) {
        yield p.v;
        p.moveToThreadNext ();
    }
    });},
tnodes_iter: nodes,
vnodes_iter: nodes,
</t>
<t tx="ekr.20201227092411.187">get parents () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.parent ();
    while (p) {
        yield (copy ? p.copy () : p);
        p.moveToParent ();
    }
    });},
parents_iter: parents,
</t>
<t tx="ekr.20201227092411.188">get self_and_parents () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.copy ();
    while (p) {
        yield (copy ? p.copy () : p);
        p.moveToParent ();
    }
    });},
self_and_parents_iter: self_and_parents,
</t>
<t tx="ekr.20201227092411.189">get self_and_siblings () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.copy ();
    while (p.hasBack ()) {
        p.moveToBack ();
    }
    while (p) {
        yield (copy ? p.copy () : p);
        p.moveToNext ();
    }
    });},
self_and_siblings_iter: self_and_siblings,
</t>
<t tx="ekr.20201227092411.19">get postPopupMenu () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    // pass;
});},
</t>
<t tx="ekr.20201227092411.190">get self_and_subtree () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.copy ();
    var after = p.nodeAfterTree ();
    while (p &amp;&amp; p != after) {
        yield (copy ? p.copy () : p);
        p.moveToThreadNext ();
    }
    });},
self_and_subtree_iter: self_and_subtree,
</t>
<t tx="ekr.20201227092411.191">get subtree () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var p = p.copy ();
    var after = p.nodeAfterTree ();
    p.moveToThreadNext ();
    while (p &amp;&amp; p != after) {
        yield (copy ? p.copy () : p);
        p.moveToThreadNext ();
    }
    });},
subtree_iter: subtree,
</t>
<t tx="ekr.20201227092411.192">get unique_nodes () {return __get__ (this, function* (self) {
    var p = self;
    var seen = set ();
    for (var p of p.self_and_subtree (__kwargtrans__ ({copy: false}))) {
        if (!__in__ (p.v, seen)) {
            seen.add (p.v);
            yield p.v;
        }
    }
    });},
unique_tnodes_iter: unique_nodes,
unique_vnodes_iter: unique_nodes,
</t>
<t tx="ekr.20201227092411.193">get unique_subtree () {return __get__ (this, function* (self, copy) {
    if (typeof copy == 'undefined' || (copy != null &amp;&amp; copy.hasOwnProperty ("__kwargtrans__"))) {;
        var copy = true;
    };
    var p = self;
    var seen = set ();
    for (var p of p.subtree ()) {
        if (!__in__ (p.v, seen)) {
            seen.add (p.v);
            yield (copy ? p.copy () : p);
        }
    }
    });},
subtree_with_unique_tnodes_iter: unique_subtree,
subtree_with_unique_vnodes_iter: unique_subtree,
</t>
<t tx="ekr.20201227092411.194">get anyAtFileNodeName () {return __get__ (this, function (self) {
    return self.v.anyAtFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.195">get atAutoNodeName () {return __get__ (this, function (self) {
    return self.v.atAutoNodeName ();
});},
</t>
<t tx="ekr.20201227092411.196">get atCleanNodeName () {return __get__ (this, function (self) {
    return self.v.atCleanNodeName ();
});},
</t>
<t tx="ekr.20201227092411.197">get atEditNodeName () {return __get__ (this, function (self) {
    return self.v.atEditNodeName ();
});},
</t>
<t tx="ekr.20201227092411.198">get atFileNodeName () {return __get__ (this, function (self) {
    return self.v.atFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.199">get atNoSentinelsFileNodeName () {return __get__ (this, function (self) {
    return self.v.atNoSentinelsFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.2">get createFontPanel () {return __get__ (this, function (self, c) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.20">get oops () {return __get__ (this, function (self) {
    if (1) {
        g.pr ('LeoGui oops', g.callers (4), 'should be overridden in subclass');
    }
});},
</t>
<t tx="ekr.20201227092411.200">get atShadowFileNodeName () {return __get__ (this, function (self) {
    return self.v.atShadowFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.201">get atSilentFileNodeName () {return __get__ (this, function (self) {
    return self.v.atSilentFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.202">get atThinFileNodeName () {return __get__ (this, function (self) {
    return self.v.atThinFileNodeName ();
});},
atNoSentFileNodeName: atNoSentinelsFileNodeName,
atAsisFileNodeName: atSilentFileNodeName,
</t>
<t tx="ekr.20201227092411.203">get isAnyAtFileNode () {return __get__ (this, function (self) {
    return self.v.isAnyAtFileNode ();
});},
</t>
<t tx="ekr.20201227092411.204">get isAtAllNode () {return __get__ (this, function (self) {
    return self.v.isAtAllNode ();
});},
</t>
<t tx="ekr.20201227092411.205">get isAtAutoNode () {return __get__ (this, function (self) {
    return self.v.isAtAutoNode ();
});},
</t>
<t tx="ekr.20201227092411.206">get isAtAutoRstNode () {return __get__ (this, function (self) {
    return self.v.isAtAutoRstNode ();
});},
</t>
<t tx="ekr.20201227092411.207">get isAtCleanNode () {return __get__ (this, function (self) {
    return self.v.isAtCleanNode ();
});},
</t>
<t tx="ekr.20201227092411.208">get isAtEditNode () {return __get__ (this, function (self) {
    return self.v.isAtEditNode ();
});},
</t>
<t tx="ekr.20201227092411.209">get isAtFileNode () {return __get__ (this, function (self) {
    return self.v.isAtFileNode ();
});},
</t>
<t tx="ekr.20201227092411.21">get put_help () {return __get__ (this, function (self, c, s, short_title) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.210">get isAtIgnoreNode () {return __get__ (this, function (self) {
    return self.v.isAtIgnoreNode ();
});},
</t>
<t tx="ekr.20201227092411.211">get isAtNoSentinelsFileNode () {return __get__ (this, function (self) {
    return self.v.isAtNoSentinelsFileNode ();
});},
</t>
<t tx="ekr.20201227092411.212">get isAtOthersNode () {return __get__ (this, function (self) {
    return self.v.isAtOthersNode ();
});},
</t>
<t tx="ekr.20201227092411.213">get isAtRstFileNode () {return __get__ (this, function (self) {
    return self.v.isAtRstFileNode ();
});},
</t>
<t tx="ekr.20201227092411.214">get isAtSilentFileNode () {return __get__ (this, function (self) {
    return self.v.isAtSilentFileNode ();
});},
</t>
<t tx="ekr.20201227092411.215">get isAtShadowFileNode () {return __get__ (this, function (self) {
    return self.v.isAtShadowFileNode ();
});},
</t>
<t tx="ekr.20201227092411.216">get isAtThinFileNode () {return __get__ (this, function (self) {
    return self.v.isAtThinFileNode ();
});},
isAtNoSentFileNode: isAtNoSentinelsFileNode,
isAtAsisFileNode: isAtSilentFileNode,
</t>
<t tx="ekr.20201227092411.217">get matchHeadline () {return __get__ (this, function (self, pattern) {
    return self.v.matchHeadline (pattern);
});},
</t>
<t tx="ekr.20201227092411.218">get bodyString () {return __get__ (this, function (self) {
    return self.v.bodyString ();
});},
</t>
<t tx="ekr.20201227092411.219">get headString () {return __get__ (this, function (self) {
    return self.v.headString ();
});},
</t>
<t tx="ekr.20201227092411.22">    get widget_name () {return __get__ (this, function (self, w) {
        if (!('w')) {
            return '&lt;no widget&gt;';
        }
        if (hasattr (w, 'getName')) {
            return w.getName ();
        }
        if (hasattr (w, '_name')) {
            return w._name;
        }
        return repr (w);
    });}
});
export var LeoKeyEvent =  __class__ ('LeoKeyEvent', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.220">get cleanHeadString () {return __get__ (this, function (self) {
    return self.v.cleanHeadString ();
});},
</t>
<t tx="ekr.20201227092411.221">get isDirty () {return __get__ (this, function (self) {
    return self.v.isDirty ();
});},
</t>
<t tx="ekr.20201227092411.222">get isMarked () {return __get__ (this, function (self) {
    return self.v.isMarked ();
});},
</t>
<t tx="ekr.20201227092411.223">get isOrphan () {return __get__ (this, function (self) {
    return self.v.isOrphan ();
});},
</t>
<t tx="ekr.20201227092411.224">get isSelected () {return __get__ (this, function (self) {
    return self.v.isSelected ();
});},
</t>
<t tx="ekr.20201227092411.225">get isTopBitSet () {return __get__ (this, function (self) {
    return self.v.isTopBitSet ();
});},
</t>
<t tx="ekr.20201227092411.226">get isVisited () {return __get__ (this, function (self) {
    return self.v.isVisited ();
});},
</t>
<t tx="ekr.20201227092411.227">get status () {return __get__ (this, function (self) {
    return self.v.status ();
});},
</t>
<t tx="ekr.20201227092411.228">get childIndex () {return __get__ (this, function (self) {
    var p = self;
    return p._childIndex;
});},
</t>
<t tx="ekr.20201227092411.229">get directParents () {return __get__ (this, function (self) {
    return self.v.directParents ();
});},
</t>
<t tx="ekr.20201227092411.23">get __init__ () {return __get__ (this, function (self, c, char, event, binding, w, x, y, x_root, y_root) {
    if (typeof x == 'undefined' || (x != null &amp;&amp; x.hasOwnProperty ("__kwargtrans__"))) {;
        var x = null;
    };
    if (typeof y == 'undefined' || (y != null &amp;&amp; y.hasOwnProperty ("__kwargtrans__"))) {;
        var y = null;
    };
    if (typeof x_root == 'undefined' || (x_root != null &amp;&amp; x_root.hasOwnProperty ("__kwargtrans__"))) {;
        var x_root = null;
    };
    if (typeof y_root == 'undefined' || (y_root != null &amp;&amp; y_root.hasOwnProperty ("__kwargtrans__"))) {;
        var y_root = null;
    };
    if (g.isStroke (binding)) {
        g.trace ('***** (LeoKeyEvent) oops: already a stroke', binding, g.callers ());
        var stroke = binding;
    }
    else {
        var stroke = (binding ? g.KeyStroke (binding) : null);
    }
    if (0) {
        if (__in__ ('keys', g.app.debug)) {
            print ('LeoKeyEvent: binding: {}, stroke: {}, char: {}'.format (binding, stroke, char));
        }
    }
    self.c = c;
    self.char = char || '';
    self.event = event;
    self.stroke = stroke;
    var __left0__ = w;
    self.w = __left0__;
    self.widget = __left0__;
    self.x = x;
    self.y = y;
    self.x_root = x_root;
    self.y_root = y_root;
});},
</t>
<t tx="ekr.20201227092411.230">get hasChildren () {return __get__ (this, function (self) {
    var p = self;
    return len (p.v.children) &gt; 0;
});},
hasFirstChild: hasChildren,
</t>
<t tx="ekr.20201227092411.231">get numberOfChildren () {return __get__ (this, function (self) {
    var p = self;
    return len (p.v.children);
});},
</t>
<t tx="ekr.20201227092411.232">get getBack () {return __get__ (this, function (self) {
    return self.copy ().moveToBack ();
});},
</t>
<t tx="ekr.20201227092411.233">get getFirstChild () {return __get__ (this, function (self) {
    return self.copy ().moveToFirstChild ();
});},
</t>
<t tx="ekr.20201227092411.234">get getLastChild () {return __get__ (this, function (self) {
    return self.copy ().moveToLastChild ();
});},
</t>
<t tx="ekr.20201227092411.235">get getLastNode () {return __get__ (this, function (self) {
    return self.copy ().moveToLastNode ();
});},
</t>
<t tx="ekr.20201227092411.236">get getNext () {return __get__ (this, function (self) {
    return self.copy ().moveToNext ();
});},
</t>
<t tx="ekr.20201227092411.237">get getNodeAfterTree () {return __get__ (this, function (self) {
    return self.copy ().moveToNodeAfterTree ();
});},
</t>
<t tx="ekr.20201227092411.238">get getNthChild () {return __get__ (this, function (self, n) {
    return self.copy ().moveToNthChild (n);
});},
</t>
<t tx="ekr.20201227092411.239">get getParent () {return __get__ (this, function (self) {
    return self.copy ().moveToParent ();
});},
</t>
<t tx="ekr.20201227092411.24">get __repr__ () {return __get__ (this, function (self) {
    var d = dict ({'c': self.c.shortFileName ()});
    for (var ivar of tuple (['char', 'event', 'stroke', 'w'])) {
        d [ivar] = getattr (self, ivar);
    }
    return 'LeoKeyEvent:\n{}'.format (g.objToString (d));
});},
</t>
<t tx="ekr.20201227092411.240">get getThreadBack () {return __get__ (this, function (self) {
    return self.copy ().moveToThreadBack ();
});},
</t>
<t tx="ekr.20201227092411.241">get getThreadNext () {return __get__ (this, function (self) {
    return self.copy ().moveToThreadNext ();
});},
</t>
<t tx="ekr.20201227092411.242">get getVisBack () {return __get__ (this, function (self, c) {
    return self.copy ().moveToVisBack (c);
});},
</t>
<t tx="ekr.20201227092411.243">get getVisNext () {return __get__ (this, function (self, c) {
    return self.copy ().moveToVisNext (c);
});},
back: getBack,
firstChild: getFirstChild,
lastChild: getLastChild,
lastNode: getLastNode,
py_next: getNext,
nodeAfterTree: getNodeAfterTree,
nthChild: getNthChild,
parent: getParent,
threadBack: getThreadBack,
threadNext: getThreadNext,
visBack: getVisBack,
visNext: getVisNext,
hasVisBack: visBack,
hasVisNext: visNext,
</t>
<t tx="ekr.20201227092411.244">get get_UNL () {return __get__ (this, function (self, with_file, with_proto, with_index, with_count) {
    if (typeof with_file == 'undefined' || (with_file != null &amp;&amp; with_file.hasOwnProperty ("__kwargtrans__"))) {;
        var with_file = true;
    };
    if (typeof with_proto == 'undefined' || (with_proto != null &amp;&amp; with_proto.hasOwnProperty ("__kwargtrans__"))) {;
        var with_proto = false;
    };
    if (typeof with_index == 'undefined' || (with_index != null &amp;&amp; with_index.hasOwnProperty ("__kwargtrans__"))) {;
        var with_index = true;
    };
    if (typeof with_count == 'undefined' || (with_count != null &amp;&amp; with_count.hasOwnProperty ("__kwargtrans__"))) {;
        var with_count = false;
    };
    var aList = [];
    for (var i of self.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (with_index || with_count) {
            var count = 0;
            var ind = 0;
            var p = i.copy ();
            while (p.hasBack ()) {
                var ind = ind + 1;
                p.moveToBack ();
                if (i.h == p.h) {
                    var count = count + 1;
                }
            }
            aList.append ((i.h.py_replace ('--&gt;', '--%3E') + ':') + str (ind));
            if (count || with_count) {
                aList [-(1)] = (aList [-(1)] + ',') + str (count);
            }
        }
        else {
            aList.append (i.h.py_replace ('--&gt;', '--%3E'));
        }
    }
    var UNL = '--&gt;'.join (py_reversed (aList));
    if (with_proto) {
        var s = 'unl:' + '//{}#{}'.format (self.v.context.fileName (), UNL);
        return s.py_replace (' ', '%20');
    }
    if (with_file) {
        return '{}#{}'.format (self.v.context.fileName (), UNL);
    }
    return UNL;
});},
</t>
<t tx="ekr.20201227092411.245">get hasBack () {return __get__ (this, function (self) {
    var p = self;
    return p.v &amp;&amp; p._childIndex &gt; 0;
});},
</t>
<t tx="ekr.20201227092411.246">get hasNext () {return __get__ (this, function (self) {
    var p = self;
    try {
        var parent_v = p._parentVnode ();
        return p.v &amp;&amp; parent_v &amp;&amp; p._childIndex + 1 &lt; len (parent_v.children);
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            g.trace ('*** Unexpected exception');
            g.es_exception ();
            return null;
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.247">get hasParent () {return __get__ (this, function (self) {
    var p = self;
    return p.v &amp;&amp; p.stack;
});},
</t>
<t tx="ekr.20201227092411.248">get hasThreadBack () {return __get__ (this, function (self) {
    var p = self;
    return p.hasParent () || p.hasBack ();
});},
</t>
<t tx="ekr.20201227092411.249">get hasThreadNext () {return __get__ (this, function (self) {
    var p = self;
    if (!(p.v)) {
        return false;
    }
    if (p.hasChildren () || p.hasNext ()) {
        return true;
    }
    var n = len (p.stack) - 1;
    while (n &gt;= 0) {
        var __left0__ = p.stack [n];
        var v = __left0__ [0];
        var childIndex = __left0__ [1];
        if (n == 0) {
            var parent_v = v.context.hiddenRootNode;
        }
        else {
            var __left0__ = p.stack [n - 1];
            var parent_v = __left0__ [0];
            var junk = __left0__ [1];
        }
        if (len (parent_v.children) &gt; childIndex + 1) {
            return true;
        }
        n--;
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.25">get py_get () {return __get__ (this, function (self, attr) {
    return getattr (self, attr, null);
});},
</t>
<t tx="ekr.20201227092411.250">get findRootPosition () {return __get__ (this, function (self) {
    var p = self;
    var c = p.v.context;
    return c.rootPosition ();
});},
</t>
<t tx="ekr.20201227092411.251">get isAncestorOf () {return __get__ (this, function (self, p2) {
    var p = self;
    var c = p.v.context;
    if (!(c.positionExists (p2))) {
        return false;
    }
    for (var z of p2.stack) {
        var __left0__ = z;
        var parent_v = __left0__ [0];
        var parent_childIndex = __left0__ [1];
        if (parent_v == p.v &amp;&amp; parent_childIndex == p._childIndex) {
            return true;
        }
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.252">get isCloned () {return __get__ (this, function (self) {
    var p = self;
    return p.v.isCloned ();
});},
</t>
<t tx="ekr.20201227092411.253">get isRoot () {return __get__ (this, function (self) {
    var p = self;
    return !(p.hasParent ()) &amp;&amp; !(p.hasBack ());
});},
</t>
<t tx="ekr.20201227092411.254">get isVisible () {return __get__ (this, function (self, c) {
    var p = self;
    var visible = function (p, root) {
        if (typeof root == 'undefined' || (root != null &amp;&amp; root.hasOwnProperty ("__kwargtrans__"))) {;
            var root = null;
        };
        for (var parent of p.parents (__kwargtrans__ ({copy: false}))) {
            if (parent &amp;&amp; parent == root) {
                return true;
            }
            if (!(c.shouldBeExpanded (parent))) {
                return false;
            }
        }
        return true;
    };
    if (c.hoistStack) {
        var root = c.hoistStack [-(1)].p;
        if (p == root) {
            return true;
        }
        return root.isAncestorOf (p) &amp;&amp; visible (p, __kwargtrans__ ({root: root}));
    }
    for (var root of c.rootPosition ().self_and_siblings (__kwargtrans__ ({copy: false}))) {
        if (root == p || root.isAncestorOf (p)) {
            return visible (p);
        }
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.256">get level () {return __get__ (this, function (self) {
    var p = self;
    return (p.v ? len (p.stack) : 0);
});},
simpleLevel: level,
</t>
<t tx="ekr.20201227092411.257">get positionAfterDeletedTree () {return __get__ (this, function (self) {
    var p = self;
    var py_next = p.py_next ();
    if (py_next) {
        var p = p.copy ();
        p.v = py_next.v;
        return p;
    }
    return p.nodeAfterTree ();
});},
</t>
<t tx="ekr.20201227092411.258">get textOffset () {return __get__ (this, function (self) {
    var p = self;
    var __left0__ = tuple ([false, 0]);
    var found = __left0__ [0];
    var offset = __left0__ [1];
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (p.isAnyAtFileNode ()) {
            var found = true;
            break;
        }
        var parent = p.parent ();
        if (!(parent)) {
            break;
        }
        var h = p.h.strip ();
        var i = h.find ('&lt;&lt;');
        var j = h.find ('&gt;&gt;');
        var target = ((-(1) &lt; i &amp;&amp; i &lt; j) ? h.__getslice__ (i, j + 2, 1) : '@others');
        for (var s of parent.b.py_split ('\n')) {
            if (s.find (target) &gt; -(1)) {
                offset += g.skip_ws (s, 0);
                break;
            }
        }
    }
    return (found ? offset : null);
});},
</t>
<t tx="ekr.20201227092411.259">get isOutsideAnyAtFileTree () {return __get__ (this, function (self) {
    var p = self;
    for (var parent of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (parent.isAnyAtFileNode ()) {
            return false;
        }
    }
    return true;
});},
</t>
<t tx="ekr.20201227092411.26">get __getitem__ () {return __get__ (this, function (self, attr) {
    return getattr (self, attr, null);
});},
</t>
<t tx="ekr.20201227092411.260">get _adjustPositionBeforeUnlink () {return __get__ (this, function (self, p2) {
    var p = self;
    var sib = p.copy ();
    while (sib.hasBack ()) {
        sib.moveToBack ();
        if (sib == p2) {
            p._childIndex--;
            return ;
        }
    }
    var stack = [];
    var changed = false;
    var i = 0;
    while (i &lt; len (p.stack)) {
        var __left0__ = p.stack [i];
        var v = __left0__ [0];
        var childIndex = __left0__ [1];
        var p3 = Position (__kwargtrans__ ({v: v, childIndex: childIndex, stack: stack.__getslice__ (0, i, 1)}));
        var __break1__ = false;
        while (p3) {
            if (p2 == p3) {
                stack.append (tuple ([v, childIndex - 1]));
                var changed = true;
                __break1__ = true;
                break;
            }
            p3.moveToBack ();
        }
        if (!__break1__) {
            stack.append (tuple ([v, childIndex]));
        }
        i++;
    }
    if (changed) {
        p.stack = stack;
    }
});},
</t>
<t tx="ekr.20201227092411.261">get _linkAfter () {return __get__ (this, function (self, p_after) {
    var p = self;
    var parent_v = p_after._parentVnode ();
    p.stack = p_after.stack.__getslice__ (0, null, 1);
    p._childIndex = p_after._childIndex + 1;
    var child = p.v;
    var n = p_after._childIndex + 1;
    child._addLink (n, parent_v);
});},
</t>
<t tx="ekr.20201227092411.262">get _linkCopiedAfter () {return __get__ (this, function (self, p_after) {
    var p = self;
    var parent_v = p_after._parentVnode ();
    p.stack = p_after.stack.__getslice__ (0, null, 1);
    p._childIndex = p_after._childIndex + 1;
    var child = p.v;
    var n = p_after._childIndex + 1;
    child._addCopiedLink (n, parent_v);
});},
</t>
<t tx="ekr.20201227092411.263">get _linkAsNthChild () {return __get__ (this, function (self, parent, n) {
    var p = self;
    var parent_v = parent.v;
    p.stack = parent.stack.__getslice__ (0, null, 1);
    p.stack.append (tuple ([parent_v, parent._childIndex]));
    p._childIndex = n;
    var child = p.v;
    child._addLink (n, parent_v);
});},
</t>
<t tx="ekr.20201227092411.264">get _linkCopiedAsNthChild () {return __get__ (this, function (self, parent, n) {
    var p = self;
    var parent_v = parent.v;
    p.stack = parent.stack.__getslice__ (0, null, 1);
    p.stack.append (tuple ([parent_v, parent._childIndex]));
    p._childIndex = n;
    var child = p.v;
    child._addCopiedLink (n, parent_v);
});},
</t>
<t tx="ekr.20201227092411.265">get _linkAsRoot () {return __get__ (this, function (self) {
    var p = self;
    var parent_v = p.v.context.hiddenRootNode;
    p.stack = [];
    p._childIndex = 0;
    p.v._addLink (0, parent_v);
    return p;
});},
</t>
<t tx="ekr.20201227092411.266">get _parentVnode () {return __get__ (this, function (self) {
    var p = self;
    if (p.v) {
        var data = p.stack &amp;&amp; p.stack [-(1)];
        if (data) {
            var __left0__ = data;
            var v = __left0__ [0];
            var junk = __left0__ [1];
            return v;
        }
        return p.v.context.hiddenRootNode;
    }
    return null;
});},
</t>
<t tx="ekr.20201227092411.267">get _relinkAsCloneOf () {return __get__ (this, function (self, p2) {
    var p = self;
    var __left0__ = tuple ([p.v, p2.v]);
    var v = __left0__ [0];
    var v2 = __left0__ [1];
    var parent_v = p._parentVnode ();
    if (!(parent_v)) {
        g.internalError ('no parent_v', p);
        return ;
    }
    if (parent_v.children [p._childIndex] == v) {
        parent_v.children [p._childIndex] = v2;
        v2.parents.append (parent_v);
    }
    else {
        g.internalError ('parent_v.children[childIndex] != v', p, parent_v.children, p._childIndex, v);
    }
});},
</t>
<t tx="ekr.20201227092411.268">get _unlink () {return __get__ (this, function (self) {
    var p = self;
    var n = p._childIndex;
    var parent_v = p._parentVnode ();
    var child = p.v;
    if ((0 &lt;= n &amp;&amp; n &lt; len (parent_v.children)) &amp;&amp; parent_v.children [n] == child) {
        child._cutLink (n, parent_v);
    }
    else {
        self.badUnlink (parent_v, n, child);
    }
});},
</t>
<t tx="ekr.20201227092411.269">get badUnlink () {return __get__ (this, function (self, parent_v, n, child) {
    if ((0 &lt;= n &amp;&amp; n &lt; len (parent_v.children))) {
        g.trace ('**can not happen: children[{}] != p.v'.format (n));
        g.trace ('parent_v.children...\n', g.listToString (parent_v.children));
        g.trace ('parent_v', parent_v);
        g.trace ('parent_v.children[n]', parent_v.children [n]);
        g.trace ('child', child);
        g.trace ('** callers:', g.callers ());
        if (g.app.unitTesting) {
        }
    }
    else {
        g.trace ('**can not happen: bad child index: {}, len(children): {}'.format (n, len (parent_v.children)));
        g.trace ('parent_v.children...\n', g.listToString (parent_v.children));
        g.trace ('parent_v', parent_v, 'child', child);
        g.trace ('** callers:', g.callers ());
        if (g.app.unitTesting) {
        }
    }
});},
</t>
<t tx="ekr.20201227092411.27">    get py_metatype () {return __get__ (this, function (self) {
        return 'LeoKeyEvent';
    });}
});
export var NullGui =  __class__ ('NullGui', [LeoGui], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.270">get moveToBack () {return __get__ (this, function (self) {
    var p = self;
    var n = p._childIndex;
    var parent_v = p._parentVnode ();
    if (parent_v &amp;&amp; p.v &amp;&amp; (0 &lt; n &amp;&amp; n &lt;= len (parent_v.children))) {
        p._childIndex--;
        p.v = parent_v.children [n - 1];
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.271">get moveToFirstChild () {return __get__ (this, function (self) {
    var p = self;
    if (p.v &amp;&amp; p.v.children) {
        p.stack.append (tuple ([p.v, p._childIndex]));
        p.v = p.v.children [0];
        p._childIndex = 0;
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.272">get moveToLastChild () {return __get__ (this, function (self) {
    var p = self;
    if (p.v &amp;&amp; p.v.children) {
        p.stack.append (tuple ([p.v, p._childIndex]));
        var n = len (p.v.children);
        p.v = p.v.children [n - 1];
        p._childIndex = n - 1;
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.273">get moveToLastNode () {return __get__ (this, function (self) {
    var p = self;
    while (p.hasChildren ()) {
        p.moveToLastChild ();
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.274">get moveToNext () {return __get__ (this, function (self) {
    var p = self;
    var n = p._childIndex;
    var parent_v = p._parentVnode ();
    if (!(p.v)) {
        g.trace ('no p.v:', p, g.callers ());
    }
    if (p.v &amp;&amp; parent_v &amp;&amp; len (parent_v.children) &gt; n + 1) {
        p._childIndex = n + 1;
        p.v = parent_v.children [n + 1];
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.275">get moveToNodeAfterTree () {return __get__ (this, function (self) {
    var p = self;
    while (p) {
        if (p.hasNext ()) {
            p.moveToNext ();
            break;
        }
        p.moveToParent ();
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.276">get moveToNthChild () {return __get__ (this, function (self, n) {
    var p = self;
    if (p.v &amp;&amp; len (p.v.children) &gt; n) {
        p.stack.append (tuple ([p.v, p._childIndex]));
        p.v = p.v.children [n];
        p._childIndex = n;
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.277">get moveToParent () {return __get__ (this, function (self) {
    var p = self;
    if (p.v &amp;&amp; p.stack) {
        var __left0__ = p.stack.py_pop ();
        p.v = __left0__ [0];
        p._childIndex = __left0__ [1];
    }
    else {
        p.v = null;
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.278">get moveToThreadBack () {return __get__ (this, function (self) {
    var p = self;
    if (p.hasBack ()) {
        p.moveToBack ();
        p.moveToLastNode ();
    }
    else {
        p.moveToParent ();
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.279">get moveToThreadNext () {return __get__ (this, function (self) {
    var p = self;
    if (p.v) {
        if (p.v.children) {
            p.moveToFirstChild ();
        }
        else if (p.hasNext ()) {
            p.moveToNext ();
        }
        else {
            p.moveToParent ();
            while (p) {
                if (p.hasNext ()) {
                    p.moveToNext ();
                    break;
                }
                p.moveToParent ();
            }
        }
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.28">get __init__ () {return __get__ (this, function (self, guiName) {
    if (typeof guiName == 'undefined' || (guiName != null &amp;&amp; guiName.hasOwnProperty ("__kwargtrans__"))) {;
        var guiName = 'nullGui';
    };
    __super__ (NullGui, '__init__') (self, guiName);
    self.clipboardContents = '';
    self.focusWidget = null;
    self.script = null;
    self.lastFrame = null;
    self.isNullGui = true;
    self.idleTimeClass = g.NullObject;
});},
</t>
<t tx="ekr.20201227092411.280">get moveToVisBack () {return __get__ (this, function (self, c) {
    var p = self;
    var __left0__ = c.visLimit ();
    var limit = __left0__ [0];
    var limitIsVisible = __left0__ [1];
    while (p) {
        var back = p.back ();
        if (back &amp;&amp; back.hasChildren () &amp;&amp; back.isExpanded ()) {
            p.moveToThreadBack ();
        }
        else if (back) {
            p.moveToBack ();
        }
        else {
            p.moveToParent ();
        }
        if (p) {
            if (limit) {
                var __left0__ = self.checkVisBackLimit (limit, limitIsVisible, p);
                var done = __left0__ [0];
                var val = __left0__ [1];
                if (done) {
                    return val;
                }
            }
            if (p.isVisible (c)) {
                return p;
            }
        }
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.281">get checkVisBackLimit () {return __get__ (this, function (self, limit, limitIsVisible, p) {
    var c = p.v.context;
    if (limit == p) {
        if (limitIsVisible &amp;&amp; p.isVisible (c)) {
            return tuple ([true, p]);
        }
        return tuple ([true, null]);
    }
    if (limit.isAncestorOf (p)) {
        return tuple ([false, null]);
    }
    return tuple ([true, null]);
});},
</t>
<t tx="ekr.20201227092411.282">get moveToVisNext () {return __get__ (this, function (self, c) {
    var p = self;
    var __left0__ = c.visLimit ();
    var limit = __left0__ [0];
    var limitIsVisible = __left0__ [1];
    while (p) {
        if (p.hasChildren ()) {
            if (p.isExpanded ()) {
                p.moveToFirstChild ();
            }
            else {
                p.moveToNodeAfterTree ();
            }
        }
        else if (p.hasNext ()) {
            p.moveToNext ();
        }
        else {
            p.moveToThreadNext ();
        }
        if (p) {
            if (limit &amp;&amp; self.checkVisNextLimit (limit, p)) {
                return null;
            }
            if (p.isVisible (c)) {
                return p;
            }
        }
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.283">get checkVisNextLimit () {return __get__ (this, function (self, limit, p) {
    return limit != p &amp;&amp; !(limit.isAncestorOf (p));
});},
</t>
<t tx="ekr.20201227092411.284">get safeMoveToThreadNext () {return __get__ (this, function (self) {
    var p = self;
    if (p.v) {
        var child_v = p.v.children &amp;&amp; p.v.children [0];
        if (child_v) {
            var __break0__ = false;
            for (var parent of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
                if (child_v == parent.v) {
                    g.app.structure_errors++;
                    g.error ('vnode: {} is its own parent'.format (child_v));
                    parent.v.children = (function () {
                        var __accu0__ = [];
                        for (var v2 of parent.v.children) {
                            if (!(v2 == child_v)) {
                                __accu0__.append (v2);
                            }
                        }
                        return __accu0__;
                    }) ();
                    if (__in__ (parent.v, child_v.parents)) {
                        child_v.parents.remove (parent.v);
                    }
                    p.moveToParent ();
                    __break0__ = true;
                    break;
                }
                else if (child_v.fileIndex == parent.v.fileIndex) {
                    g.app.structure_errors++;
                    g.error ('duplicate gnx: {} v: {} parent: {}'.format (child_v.fileIndex, child_v, parent.v));
                    child_v.fileIndex = g.app.nodeIndices.getNewIndex (__kwargtrans__ ({v: child_v}));
                    p.moveToFirstChild ();
                    __break0__ = true;
                    break;
                }
            }
            if (!__break0__) {
                p.moveToFirstChild ();
            }
        }
        else if (p.hasNext ()) {
            p.moveToNext ();
        }
        else {
            p.moveToParent ();
            while (p) {
                if (p.hasNext ()) {
                    p.moveToNext ();
                    break;
                }
                p.moveToParent ();
            }
        }
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.286">get clone () {return __get__ (this, function (self) {
    var p = self;
    var p2 = p.copy ();
    p2._linkAfter (p);
    return p2;
});},
</t>
<t tx="ekr.20201227092411.287">get copy () {return __get__ (this, function (self) {
    return Position (self.v, self._childIndex, self.stack);
});},
</t>
<t tx="ekr.20201227092411.288">get copyTreeAfter () {return __get__ (this, function (self, copyGnxs) {
    if (typeof copyGnxs == 'undefined' || (copyGnxs != null &amp;&amp; copyGnxs.hasOwnProperty ("__kwargtrans__"))) {;
        var copyGnxs = false;
    };
    var p = self;
    var p2 = p.insertAfter ();
    p.copyTreeFromSelfTo (p2, __kwargtrans__ ({copyGnxs: copyGnxs}));
    return p2;
});},
</t>
<t tx="ekr.20201227092411.289">get copyTreeFromSelfTo () {return __get__ (this, function (self, p2, copyGnxs) {
    if (typeof copyGnxs == 'undefined' || (copyGnxs != null &amp;&amp; copyGnxs.hasOwnProperty ("__kwargtrans__"))) {;
        var copyGnxs = false;
    };
    var p = self;
    p2.v._headString = g.toUnicode (p.h, __kwargtrans__ ({reportErrors: true}));
    p2.v._bodyString = g.toUnicode (p.b, __kwargtrans__ ({reportErrors: true}));
    if (copyGnxs) {
        p2.v.fileIndex = p.v.fileIndex;
    }
    for (var child of p.children ()) {
        var child2 = p2.insertAsLastChild ();
        child.copyTreeFromSelfTo (child2, __kwargtrans__ ({copyGnxs: copyGnxs}));
    }
});},
</t>
<t tx="ekr.20201227092411.29">get runAboutLeoDialog () {return __get__ (this, function (self, c, version, theCopyright, url, email) {
    return self.simulateDialog ('aboutLeoDialog', null);
});},
</t>
<t tx="ekr.20201227092411.290">get copyWithNewVnodes () {return __get__ (this, function (self, copyMarked) {
    if (typeof copyMarked == 'undefined' || (copyMarked != null &amp;&amp; copyMarked.hasOwnProperty ("__kwargtrans__"))) {;
        var copyMarked = false;
    };
    var p = self;
    return Position (__kwargtrans__ ({v: p.v.copyTree (copyMarked)}));
});},
</t>
<t tx="ekr.20201227092411.291">get createNodeHierarchy () {return __get__ (this, function (self, heads, forcecreate) {
    if (typeof forcecreate == 'undefined' || (forcecreate != null &amp;&amp; forcecreate.hasOwnProperty ("__kwargtrans__"))) {;
        var forcecreate = false;
    };
    var c = self.v.context;
    return c.createNodeHierarchy (heads, __kwargtrans__ ({parent: self, forcecreate: forcecreate}));
});},
</t>
<t tx="ekr.20201227092411.292">get deleteAllChildren () {return __get__ (this, function (self) {
    var p = self;
    p.setDirty ();
    while (p.hasChildren ()) {
        p.firstChild ().doDelete ();
    }
});},
</t>
<t tx="ekr.20201227092411.293">get doDelete () {return __get__ (this, function (self, newNode) {
    if (typeof newNode == 'undefined' || (newNode != null &amp;&amp; newNode.hasOwnProperty ("__kwargtrans__"))) {;
        var newNode = null;
    };
    var p = self;
    p.setDirty ();
    var sib = p.copy ();
    while (sib.hasNext ()) {
        sib.moveToNext ();
        if (sib == newNode) {
            newNode._childIndex--;
            break;
        }
    }
    p._unlink ();
});},
</t>
<t tx="ekr.20201227092411.294">get insertAfter () {return __get__ (this, function (self) {
    var p = self;
    var context = p.v.context;
    var p2 = self.copy ();
    p2.v = VNode (__kwargtrans__ ({context: context}));
    p2.v.iconVal = 0;
    p2._linkAfter (p);
    return p2;
});},
</t>
<t tx="ekr.20201227092411.295">get insertAsLastChild () {return __get__ (this, function (self) {
    var p = self;
    var n = p.numberOfChildren ();
    return p.insertAsNthChild (n);
});},
</t>
<t tx="ekr.20201227092411.296">get insertAsNthChild () {return __get__ (this, function (self, n) {
    var p = self;
    var context = p.v.context;
    var p2 = self.copy ();
    p2.v = VNode (__kwargtrans__ ({context: context}));
    p2.v.iconVal = 0;
    p2._linkAsNthChild (p, n);
    return p2;
});},
</t>
<t tx="ekr.20201227092411.297">get insertBefore () {return __get__ (this, function (self) {
    var p = self;
    var parent = p.parent ();
    if (p.hasBack ()) {
        var back = p.getBack ();
        var p = back.insertAfter ();
    }
    else if (parent) {
        var p = parent.insertAsNthChild (0);
    }
    else {
        var p = p.insertAfter ();
        p.moveToRoot ();
    }
    return p;
});},
</t>
<t tx="ekr.20201227092411.298">get invalidOutline () {return __get__ (this, function (self, message) {
    var p = self;
    if (p.hasParent ()) {
        var node = p.parent ();
    }
    else {
        var node = p;
    }
    p.v.context.alert ('invalid outline: {}\n{}'.format (message, node));
});},
</t>
<t tx="ekr.20201227092411.299">get moveAfter () {return __get__ (this, function (self, a) {
    var p = self;
    a._adjustPositionBeforeUnlink (p);
    p._unlink ();
    p._linkAfter (a);
    return p;
});},
</t>
<t tx="ekr.20201227092411.3">get createLeoFrame () {return __get__ (this, function (self, c, title) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.30">get runAskLeoIDDialog () {return __get__ (this, function (self) {
    return self.simulateDialog ('leoIDDialog', null);
});},
</t>
<t tx="ekr.20201227092411.300">get moveToFirstChildOf () {return __get__ (this, function (self, parent) {
    var p = self;
    return p.moveToNthChildOf (parent, 0);
});},
</t>
<t tx="ekr.20201227092411.301">get moveToLastChildOf () {return __get__ (this, function (self, parent) {
    var p = self;
    var n = parent.numberOfChildren ();
    if (p.parent () == parent) {
        n--;
    }
    return p.moveToNthChildOf (parent, n);
});},
</t>
<t tx="ekr.20201227092411.302">get moveToNthChildOf () {return __get__ (this, function (self, parent, n) {
    var p = self;
    parent._adjustPositionBeforeUnlink (p);
    p._unlink ();
    p._linkAsNthChild (parent, n);
    return p;
});},
</t>
<t tx="ekr.20201227092411.303">get moveToRoot () {return __get__ (this, function (self) {
    var p = self;
    p._unlink ();
    p._linkAsRoot ();
    return p;
});},
</t>
<t tx="ekr.20201227092411.304">get promote () {return __get__ (this, function (self) {
    var p = self;
    var parent_v = p._parentVnode ();
    var children = p.v.children;
    var n = p.childIndex () + 1;
    var z = parent_v.children.__getslice__ (0, null, 1);
    parent_v.children = z.__getslice__ (0, n, 1);
    parent_v.children.extend (children);
    parent_v.children.extend (z.__getslice__ (n, null, 1));
    p.v.children = [];
    for (var child of children) {
        child.parents.remove (p.v);
        child.parents.append (parent_v);
    }
});},
</t>
<t tx="ekr.20201227092411.305">get validateOutlineWithParent () {return __get__ (this, function (self, pv) {
    var p = self;
    var result = true;
    var parent = p.getParent ();
    var childIndex = p._childIndex;
    if (parent != pv) {
        p.invalidOutline ('Invalid parent link: ' + repr (parent));
    }
    if (pv) {
        if (childIndex &lt; 0) {
            p.invalidOutline ('missing childIndex' + childIndex);
        }
        else if (childIndex &gt;= pv.numberOfChildren ()) {
            p.invalidOutline ('missing children entry for index: ' + childIndex);
        }
    }
    else if (childIndex &lt; 0) {
        p.invalidOutline ('negative childIndex' + childIndex);
    }
    if (!(p.v) &amp;&amp; pv) {
        self.invalidOutline ('Empty t');
    }
    for (var child of p.children ()) {
        var r = child.validateOutlineWithParent (p);
        if (!(r)) {
            var result = false;
        }
    }
    return result;
});},
</t>
<t tx="ekr.20201227092411.306">get __get_b () {return __get__ (this, function (self) {
    var p = self;
    return p.bodyString ();
});},
</t>
<t tx="ekr.20201227092411.307">get __set_b () {return __get__ (this, function (self, val) {
    var p = self;
    var c = p.v &amp;&amp; p.v.context;
    if (c) {
        c.setBodyString (p, val);
    }
});},
</t>
<t tx="ekr.20201227092411.308">get __get_h () {return __get__ (this, function (self) {
    var p = self;
    return p.headString ();
});},
</t>
<t tx="ekr.20201227092411.309">get __set_h () {return __get__ (this, function (self, val) {
    var p = self;
    var c = p.v &amp;&amp; p.v.context;
    if (c) {
        c.setHeadString (p, val);
    }
});},
</t>
<t tx="ekr.20201227092411.31">get runAskOkDialog () {return __get__ (this, function (self, c, title, message, text) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof text == 'undefined' || (text != null &amp;&amp; text.hasOwnProperty ("__kwargtrans__"))) {;
        var text = 'Ok';
    };
    return self.simulateDialog ('okDialog', 'Ok');
});},
</t>
<t tx="ekr.20201227092411.310">get __get_gnx () {return __get__ (this, function (self) {
    var p = self;
    return p.v.fileIndex;
});},
</t>
<t tx="ekr.20201227092411.311">get __get_script () {return __get__ (this, function (self) {
    var p = self;
    return g.getScript (p.v.context, p, __kwargtrans__ ({useSelectedText: false, forcePythonSentinels: true, useSentinels: false}));
});},
</t>
<t tx="ekr.20201227092411.312">get __get_nosentinels () {return __get__ (this, function (self) {
    var p = self;
    return ''.join ((function () {
        var __accu0__ = [];
        for (var z of g.splitLines (p.b)) {
            if (!(g.isDirective (z))) {
                __accu0__.append (z);
            }
        }
        return __accu0__;
    }) ());
});},
</t>
<t tx="ekr.20201227092411.314">get __get_u () {return __get__ (this, function (self) {
    var p = self;
    return p.v.u;
});},
</t>
<t tx="ekr.20201227092411.315">get __set_u () {return __get__ (this, function (self, val) {
    var p = self;
    p.v.u = val;
});},
</t>
<t tx="ekr.20201227092411.316">get contract () {return __get__ (this, function (self) {
    var __left0__ = tuple ([self, self.v]);
    var p = __left0__ [0];
    var v = __left0__ [1];
    v.expandedPositions = (function () {
        var __accu0__ = [];
        for (var z of v.expandedPositions) {
            if (z != p) {
                __accu0__.append (z);
            }
        }
        return __accu0__;
    }) ();
    v.contract ();
});},
</t>
<t tx="ekr.20201227092411.318">get expand () {return __get__ (this, function (self) {
    var p = self;
    var v = self.v;
    v.expandedPositions = (function () {
        var __accu0__ = [];
        for (var z of v.expandedPositions) {
            if (z != p) {
                __accu0__.append (z);
            }
        }
        return __accu0__;
    }) ();
    var __break0__ = false;
    for (var p2 of v.expandedPositions) {
        if (p == p2) {
            __break0__ = true;
            break;
        }
    }
    if (!__break0__) {
        v.expandedPositions.append (p.copy ());
    }
    v.expand ();
});},
</t>
<t tx="ekr.20201227092411.32">get runAskOkCancelNumberDialog () {return __get__ (this, function (self, c, title, message, cancelButtonText, okButtonText) {
    if (typeof cancelButtonText == 'undefined' || (cancelButtonText != null &amp;&amp; cancelButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelButtonText = null;
    };
    if (typeof okButtonText == 'undefined' || (okButtonText != null &amp;&amp; okButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var okButtonText = null;
    };
    return self.simulateDialog ('numberDialog', -(1));
});},
</t>
<t tx="ekr.20201227092411.320">get isExpanded () {return __get__ (this, function (self) {
    var p = self;
    if (p.isCloned ()) {
        var c = p.v.context;
        return c.shouldBeExpanded (p);
    }
    return p.v.isExpanded ();
});},
</t>
<t tx="ekr.20201227092411.321">get clearMarked () {return __get__ (this, function (self) {
    return self.v.clearMarked ();
});},
</t>
<t tx="ekr.20201227092411.322">get clearOrphan () {return __get__ (this, function (self) {
    return self.v.clearOrphan ();
});},
</t>
<t tx="ekr.20201227092411.323">get clearVisited () {return __get__ (this, function (self) {
    return self.v.clearVisited ();
});},
</t>
<t tx="ekr.20201227092411.324">get initExpandedBit () {return __get__ (this, function (self) {
    return self.v.initExpandedBit ();
});},
</t>
<t tx="ekr.20201227092411.325">get initMarkedBit () {return __get__ (this, function (self) {
    return self.v.initMarkedBit ();
});},
</t>
<t tx="ekr.20201227092411.326">get initStatus () {return __get__ (this, function (self, status) {
    return self.v.initStatus (status);
});},
</t>
<t tx="ekr.20201227092411.327">get setMarked () {return __get__ (this, function (self) {
    return self.v.setMarked ();
});},
</t>
<t tx="ekr.20201227092411.328">get setOrphan () {return __get__ (this, function (self) {
    return self.v.setOrphan ();
});},
</t>
<t tx="ekr.20201227092411.329">get setSelected () {return __get__ (this, function (self) {
    return self.v.setSelected ();
});},
</t>
<t tx="ekr.20201227092411.33">get runAskOkCancelStringDialog () {return __get__ (this, function (self, c, title, message, cancelButtonText, okButtonText, py_default, wide) {
    if (typeof cancelButtonText == 'undefined' || (cancelButtonText != null &amp;&amp; cancelButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelButtonText = null;
    };
    if (typeof okButtonText == 'undefined' || (okButtonText != null &amp;&amp; okButtonText.hasOwnProperty ("__kwargtrans__"))) {;
        var okButtonText = null;
    };
    if (typeof py_default == 'undefined' || (py_default != null &amp;&amp; py_default.hasOwnProperty ("__kwargtrans__"))) {;
        var py_default = '';
    };
    if (typeof wide == 'undefined' || (wide != null &amp;&amp; wide.hasOwnProperty ("__kwargtrans__"))) {;
        var wide = false;
    };
    return self.simulateDialog ('stringDialog', '');
});},
</t>
<t tx="ekr.20201227092411.330">get setVisited () {return __get__ (this, function (self) {
    return self.v.setVisited ();
});},
</t>
<t tx="ekr.20201227092411.331">get computeIcon () {return __get__ (this, function (self) {
    return self.v.computeIcon ();
});},
</t>
<t tx="ekr.20201227092411.332">get setIcon () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.333">get setSelection () {return __get__ (this, function (self, start, length) {
    return self.v.setSelection (start, length);
});},
</t>
<t tx="ekr.20201227092411.334">get restoreCursorAndScroll () {return __get__ (this, function (self) {
    self.v.restoreCursorAndScroll ();
});},
</t>
<t tx="ekr.20201227092411.335">get saveCursorAndScroll () {return __get__ (this, function (self) {
    self.v.saveCursorAndScroll ();
});},
</t>
<t tx="ekr.20201227092411.336">get setBodyString () {return __get__ (this, function (self, s) {
    var p = self;
    return p.v.setBodyString (s);
});},
initBodyString: setBodyString,
setTnodeText: setBodyString,
scriptSetBodyString: setBodyString,
</t>
<t tx="ekr.20201227092411.337">get initHeadString () {return __get__ (this, function (self, s) {
    var p = self;
    p.v.initHeadString (s);
});},
</t>
<t tx="ekr.20201227092411.338">get setHeadString () {return __get__ (this, function (self, s) {
    var p = self;
    p.v.initHeadString (s);
    p.setDirty ();
});},
</t>
<t tx="ekr.20201227092411.339">get clearVisitedInTree () {return __get__ (this, function (self) {
    for (var p of self.self_and_subtree (__kwargtrans__ ({copy: false}))) {
        p.clearVisited ();
    }
});},
</t>
<t tx="ekr.20201227092411.34">get runCompareDialog () {return __get__ (this, function (self, c) {
    return self.simulateDialog ('compareDialog', '');
});},
</t>
<t tx="ekr.20201227092411.340">get clearAllVisitedInTree () {return __get__ (this, function (self) {
    for (var p of self.self_and_subtree (__kwargtrans__ ({copy: false}))) {
        p.v.clearVisited ();
        p.v.clearWriteBit ();
    }
});},
</t>
<t tx="ekr.20201227092411.341">get clearDirty () {return __get__ (this, function (self) {
    var p = self;
    p.v.clearDirty ();
});},
</t>
<t tx="ekr.20201227092411.342">get inAtIgnoreRange () {return __get__ (this, function (self) {
    var p = self;
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (p.isAtIgnoreNode ()) {
            return true;
        }
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.343">get setAllAncestorAtFileNodesDirty () {return __get__ (this, function (self) {
    var p = self;
    p.v.setAllAncestorAtFileNodesDirty ();
});},
</t>
<t tx="ekr.20201227092411.344">get setDirty () {return __get__ (this, function (self) {
    var p = self;
    p.v.setAllAncestorAtFileNodesDirty ();
    p.v.setDirty ();
});},
</t>
<t tx="ekr.20201227092411.345">get is_at_all () {return __get__ (this, function (self) {
    var p = self;
    return p.isAnyAtFileNode () &amp;&amp; any ((function () {
        var __accu0__ = [];
        for (var s of g.splitLines (p.b)) {
            __accu0__.append (g.match_word (s, 0, '@all'));
        }
        return __accu0__;
    }) ());
});},
</t>
<t tx="ekr.20201227092411.347">get in_at_all_tree () {return __get__ (this, function (self) {
    var p = self;
    for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
        if (p.is_at_all ()) {
            return true;
        }
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.348">get is_at_ignore () {return __get__ (this, function (self) {
    var p = self;
    return g.match_word (p.h, 0, '@ignore');
});},
</t>
<t tx="ekr.20201227092411.349">    get in_at_ignore_tree () {return __get__ (this, function (self) {
        var p = self;
        for (var p of p.self_and_parents (__kwargtrans__ ({copy: false}))) {
            if (g.match_word (p.h, 0, '@ignore')) {
                return true;
            }
        }
        return false;
    });}
});
Object.defineProperty (Position, 'b', property.call (Position, Position.__get_b, Position.__set_b));
Object.defineProperty (Position, 'h', property.call (Position, Position.__get_h, Position.__set_h));
Object.defineProperty (Position, 'gnx', property.call (Position, Position.__get_gnx));
Object.defineProperty (Position, 'script', property.call (Position, Position.__get_script));
Object.defineProperty (Position, 'nosentinels', property.call (Position, Position.__get_nosentinels));
Object.defineProperty (Position, 'u', property.call (Position, Position.__get_u, Position.__set_u));
export var position = Position;
export var PosList =  __class__ ('PosList', [list], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.35">get runOpenFileDialog () {return __get__ (this, function (self, c, title, filetypes, defaultextension, multiple, startpath) {
    if (typeof multiple == 'undefined' || (multiple != null &amp;&amp; multiple.hasOwnProperty ("__kwargtrans__"))) {;
        var multiple = false;
    };
    if (typeof startpath == 'undefined' || (startpath != null &amp;&amp; startpath.hasOwnProperty ("__kwargtrans__"))) {;
        var startpath = null;
    };
    return self.simulateDialog ('openFileDialog', null);
});},
</t>
<t tx="ekr.20201227092411.350">get children () {return __get__ (this, function (self) {
    var res = PosList ();
    for (var p of self) {
        for (var child_p of p.children ()) {
            res.append (child_p.copy ());
        }
    }
    return res;
});},
</t>
<t tx="ekr.20201227092411.351">get filter_h () {return __get__ (this, function (self, regex, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = re.IGNORECASE;
    };
    var pat = re.compile (regex, flags);
    var res = PosList ();
    for (var p of self) {
        var mo = re.match (pat, p.h);
        if (mo) {
            var pc = p.copy ();
            pc.mo = mo;
            res.append (pc);
        }
    }
    return res;
});},
</t>
<t tx="ekr.20201227092411.352">    get filter_b () {return __get__ (this, function (self, regex, flags) {
        if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
            var flags = re.IGNORECASE;
        };
        var pat = re.compile (regex, flags);
        var res = PosList ();
        for (var p of self) {
            var m = re.finditer (pat, p.b);
            var __left0__ = itertools.tee (m, 2);
            var t1 = __left0__ [0];
            var t2 = __left0__ [1];
            try {
                t1.__next__ ();
                var pc = p.copy ();
                pc.matchiter = t2;
                res.append (pc);
            }
            catch (__except0__) {
                if (isinstance (__except0__, StopIteration)) {
                    // pass;
                }
                else {
                    throw __except0__;
                }
            }
        }
        return res;
    });}
});
export var Poslist = PosList;
export var VNode =  __class__ ('VNode', [object], {
    __module__: __name__,
    clonedBit: 1,
    expandedBit: 4,
    markedBit: 8,
    selectedBit: 32,
    topBit: 64,
    richTextBit: 128,
    visitedBit: 256,
    dirtyBit: 512,
    writeBit: 1024,
    orphanBit: 2048,
</t>
<t tx="ekr.20201227092411.353">get __init__ () {return __get__ (this, function (self, context, gnx) {
    if (typeof gnx == 'undefined' || (gnx != null &amp;&amp; gnx.hasOwnProperty ("__kwargtrans__"))) {;
        var gnx = null;
    };
    self._headString = 'newHeadline';
    self._bodyString = '';
    self.children = [];
    self.parents = [];
    self.fileIndex = null;
    self.iconVal = 0;
    self.statusBits = 0;
    self.context = context;
    self.expandedPositions = [];
    self.insertSpot = null;
    self.scrollBarSpot = null;
    self.selectionLength = 0;
    self.selectionStart = 0;
    g.app.nodeIndices.new_vnode_helper (context, gnx, self);
});},
</t>
<t tx="ekr.20201227092411.354">get __repr__ () {return __get__ (this, function (self) {
    return '&lt;VNode {} {}&gt;'.format (self.gnx, self.headString ());
});},
__str__: __repr__,
</t>
<t tx="ekr.20201227092411.355">get dumpLink () {return __get__ (this, function (self, link) {
    return (link ? link : '&lt;none&gt;');
});},
</t>
<t tx="ekr.20201227092411.356">get dump () {return __get__ (this, function (self, label) {
    if (typeof label == 'undefined' || (label != null &amp;&amp; label.hasOwnProperty ("__kwargtrans__"))) {;
        var label = '';
    };
    var v = self;
    var s = '-' * 10;
    print ('{} {} {}'.format (s, label, v));
    print ('len(parents): {}'.format (len (v.parents)));
    print ('len(children): {}'.format (len (v.children)));
    print ('parents: {}'.format (g.listToString (v.parents)));
    print ('children: {}'.format (g.listToString (v.children)));
});},
</t>
<t tx="ekr.20201227092411.357">get findAtFileName () {return __get__ (this, function (self, names, h) {
    if (typeof h == 'undefined' || (h != null &amp;&amp; h.hasOwnProperty ("__kwargtrans__"))) {;
        var h = '';
    };
    if (!(h)) {
        var h = self.headString ();
    }
    if (!(g.match (h, 0, '@'))) {
        return '';
    }
    var i = g.skip_id (h, 1, '-');
    var word = h.__getslice__ (0, i, 1);
    if (__in__ (word, names) &amp;&amp; g.match_word (h, 0, word)) {
        var py_name = h.__getslice__ (i, null, 1).strip ();
        return py_name;
    }
    return '';
});},
</t>
<t tx="ekr.20201227092411.358">get anyAtFileNodeName () {return __get__ (this, function (self) {
    return self.findAtFileName (g.app.atAutoNames) || self.findAtFileName (g.app.atFileNames);
});},
</t>
<t tx="ekr.20201227092411.359">get atAutoNodeName () {return __get__ (this, function (self, h) {
    if (typeof h == 'undefined' || (h != null &amp;&amp; h.hasOwnProperty ("__kwargtrans__"))) {;
        var h = null;
    };
    return self.findAtFileName (g.app.atAutoNames, __kwargtrans__ ({h: h}));
});},
</t>
<t tx="ekr.20201227092411.36">get runSaveFileDialog () {return __get__ (this, function (self, c, initialfile, title, filetypes, defaultextension) {
    return self.simulateDialog ('saveFileDialog', null);
});},
</t>
<t tx="ekr.20201227092411.360">get atAutoRstNodeName () {return __get__ (this, function (self, h) {
    if (typeof h == 'undefined' || (h != null &amp;&amp; h.hasOwnProperty ("__kwargtrans__"))) {;
        var h = null;
    };
    var names = tuple (['@auto-rst']);
    return self.findAtFileName (names, __kwargtrans__ ({h: h}));
});},
</t>
<t tx="ekr.20201227092411.361">get atCleanNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@clean']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.362">get atEditNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@edit']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.363">get atFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@file', '@thin']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.364">get atNoSentinelsFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@nosent', '@file-nosent']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.365">get atRstFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@rst']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.366">get atShadowFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@shadow']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.367">get atSilentFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@asis', '@file-asis']);
    return self.findAtFileName (names);
});},
</t>
<t tx="ekr.20201227092411.368">get atThinFileNodeName () {return __get__ (this, function (self) {
    var names = tuple (['@thin', '@file-thin']);
    return self.findAtFileName (names);
});},
atNoSentFileNodeName: atNoSentinelsFileNodeName,
atAsisFileNodeName: atSilentFileNodeName,
</t>
<t tx="ekr.20201227092411.369">get isAtAllNode () {return __get__ (this, function (self) {
    var __left0__ = g.is_special (self._bodyString, '@all');
    var flag = __left0__ [0];
    var i = __left0__ [1];
    return flag;
});},
</t>
<t tx="ekr.20201227092411.37">get runAskYesNoDialog () {return __get__ (this, function (self, c, title, message, yes_all, no_all) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof yes_all == 'undefined' || (yes_all != null &amp;&amp; yes_all.hasOwnProperty ("__kwargtrans__"))) {;
        var yes_all = false;
    };
    if (typeof no_all == 'undefined' || (no_all != null &amp;&amp; no_all.hasOwnProperty ("__kwargtrans__"))) {;
        var no_all = false;
    };
    return self.simulateDialog ('yesNoDialog', 'no');
});},
</t>
<t tx="ekr.20201227092411.370">get isAnyAtFileNode () {return __get__ (this, function (self) {
    var h = self.headString ();
    return h &amp;&amp; h [0] == '@' &amp;&amp; self.anyAtFileNodeName ();
});},
</t>
<t tx="ekr.20201227092411.371">get isAtAutoNode () {return __get__ (this, function (self) {
    return bool (self.atAutoNodeName ());
});},
</t>
<t tx="ekr.20201227092411.372">get isAtAutoRstNode () {return __get__ (this, function (self) {
    return bool (self.atAutoRstNodeName ());
});},
</t>
<t tx="ekr.20201227092411.373">get isAtCleanNode () {return __get__ (this, function (self) {
    return bool (self.atCleanNodeName ());
});},
</t>
<t tx="ekr.20201227092411.374">get isAtEditNode () {return __get__ (this, function (self) {
    return bool (self.atEditNodeName ());
});},
</t>
<t tx="ekr.20201227092411.375">get isAtFileNode () {return __get__ (this, function (self) {
    return bool (self.atFileNodeName ());
});},
</t>
<t tx="ekr.20201227092411.376">get isAtRstFileNode () {return __get__ (this, function (self) {
    return bool (self.atRstFileNodeName ());
});},
</t>
<t tx="ekr.20201227092411.377">get isAtNoSentinelsFileNode () {return __get__ (this, function (self) {
    return bool (self.atNoSentinelsFileNodeName ());
});},
</t>
<t tx="ekr.20201227092411.378">get isAtSilentFileNode () {return __get__ (this, function (self) {
    return bool (self.atSilentFileNodeName ());
});},
</t>
<t tx="ekr.20201227092411.379">get isAtShadowFileNode () {return __get__ (this, function (self) {
    return bool (self.atShadowFileNodeName ());
});},
</t>
<t tx="ekr.20201227092411.38">get runAskYesNoCancelDialog () {return __get__ (this, function (self, c, title, message, yesMessage, noMessage, yesToAllMessage, defaultButton, cancelMessage) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = null;
    };
    if (typeof yesMessage == 'undefined' || (yesMessage != null &amp;&amp; yesMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var yesMessage = 'Yes';
    };
    if (typeof noMessage == 'undefined' || (noMessage != null &amp;&amp; noMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var noMessage = 'No';
    };
    if (typeof yesToAllMessage == 'undefined' || (yesToAllMessage != null &amp;&amp; yesToAllMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var yesToAllMessage = null;
    };
    if (typeof defaultButton == 'undefined' || (defaultButton != null &amp;&amp; defaultButton.hasOwnProperty ("__kwargtrans__"))) {;
        var defaultButton = 'Yes';
    };
    if (typeof cancelMessage == 'undefined' || (cancelMessage != null &amp;&amp; cancelMessage.hasOwnProperty ("__kwargtrans__"))) {;
        var cancelMessage = null;
    };
    return self.simulateDialog ('yesNoCancelDialog', 'cancel');
});},
</t>
<t tx="ekr.20201227092411.380">get isAtThinFileNode () {return __get__ (this, function (self) {
    return bool (self.atThinFileNodeName ());
});},
isAtNoSentFileNode: isAtNoSentinelsFileNode,
isAtAsisFileNode: isAtSilentFileNode,
</t>
<t tx="ekr.20201227092411.381">get isAtIgnoreNode () {return __get__ (this, function (self) {
    if (g.match_word (self._headString, 0, '@ignore')) {
        return true;
    }
    var __left0__ = g.is_special (self._bodyString, '@ignore');
    var flag = __left0__ [0];
    var i = __left0__ [1];
    return flag;
});},
</t>
<t tx="ekr.20201227092411.382">get isAtOthersNode () {return __get__ (this, function (self) {
    var __left0__ = g.is_special (self._bodyString, '@others');
    var flag = __left0__ [0];
    var i = __left0__ [1];
    return flag;
});},
</t>
<t tx="ekr.20201227092411.383">get matchHeadline () {return __get__ (this, function (self, pattern) {
    var v = self;
    var h = g.toUnicode (v.headString ());
    var h = h.lower ().py_replace (' ', '').py_replace ('\t', '');
    var h = h.lstrip ('.');
    var pattern = g.toUnicode (pattern);
    var pattern = pattern.lower ().py_replace (' ', '').py_replace ('\t', '');
    return h.startswith (pattern);
});},
</t>
<t tx="ekr.20201227092411.384">get copyTree () {return __get__ (this, function (self, copyMarked) {
    if (typeof copyMarked == 'undefined' || (copyMarked != null &amp;&amp; copyMarked.hasOwnProperty ("__kwargtrans__"))) {;
        var copyMarked = false;
    };
    var v = self;
    var v2 = VNode (__kwargtrans__ ({context: v.context, gnx: null}));
    v2._headString = g.toUnicode (v._headString, __kwargtrans__ ({reportErrors: true}));
    v2._bodyString = g.toUnicode (v._bodyString, __kwargtrans__ ({reportErrors: true}));
    if (copyMarked &amp;&amp; v.isMarked ()) {
        v2.setMarked ();
    }
    for (var child of v.children) {
        v2.children.append (child.copyTree (copyMarked));
    }
    return v2;
});},
body_unicode_warning: false,
</t>
<t tx="ekr.20201227092411.385">get bodyString () {return __get__ (this, function (self) {
    if (isinstance (self._bodyString, str)) {
        return self._bodyString;
    }
    if (!(self.body_unicode_warning)) {
        self.body_unicode_warning = true;
        g.internalError ('not unicode:', repr (self._bodyString), self._headString);
    }
    return g.toUnicode (self._bodyString);
});},
getBody: bodyString,
</t>
<t tx="ekr.20201227092411.386">get firstChild () {return __get__ (this, function (self) {
    var v = self;
    return v.children &amp;&amp; v.children [0];
});},
</t>
<t tx="ekr.20201227092411.387">get hasChildren () {return __get__ (this, function (self) {
    var v = self;
    return len (v.children) &gt; 0;
});},
hasFirstChild: hasChildren,
</t>
<t tx="ekr.20201227092411.388">get lastChild () {return __get__ (this, function (self) {
    var v = self;
    return (v.children ? v.children [-(1)] : null);
});},
</t>
<t tx="ekr.20201227092411.389">get nthChild () {return __get__ (this, function (self, n) {
    var v = self;
    if ((0 &lt;= n &amp;&amp; n &lt; len (v.children))) {
        return v.children [n];
    }
    return null;
});},
</t>
<t tx="ekr.20201227092411.39">get simulateDialog () {return __get__ (this, function (self, key, defaultVal) {
    return defaultVal;
});},
</t>
<t tx="ekr.20201227092411.390">get numberOfChildren () {return __get__ (this, function (self) {
    var v = self;
    return len (v.children);
});},
</t>
<t tx="ekr.20201227092411.391">get directParents () {return __get__ (this, function (self) {
    var v = self;
    return v.parents;
});},
</t>
<t tx="ekr.20201227092411.392">get hasBody () {return __get__ (this, function (self) {
    var s = self._bodyString;
    return s &amp;&amp; len (s) &gt; 0;
});},
head_unicode_warning: false,
</t>
<t tx="ekr.20201227092411.393">get headString () {return __get__ (this, function (self) {
    if (isinstance (self._headString, str)) {
        return self._headString;
    }
    if (!(self.head_unicode_warning)) {
        self.head_unicode_warning = true;
        g.internalError ('not a string', repr (self._headString));
    }
    return g.toUnicode (self._headString);
});},
</t>
<t tx="ekr.20201227092411.394">get isNthChildOf () {return __get__ (this, function (self, n, parent_v) {
    var v = self;
    var children = parent_v &amp;&amp; parent_v.children;
    return children &amp;&amp; (0 &lt;= n &amp;&amp; n &lt; len (children)) &amp;&amp; children [n] == v;
});},
</t>
<t tx="ekr.20201227092411.395">get isCloned () {return __get__ (this, function (self) {
    return len (self.parents) &gt; 1;
});},
</t>
<t tx="ekr.20201227092411.396">get isDirty () {return __get__ (this, function (self) {
    return (self.statusBits &amp; self.dirtyBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.397">get isMarked () {return __get__ (this, function (self) {
    return (self.statusBits &amp; VNode.markedBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.398">get isOrphan () {return __get__ (this, function (self) {
    return (self.statusBits &amp; VNode.orphanBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.399">get isSelected () {return __get__ (this, function (self) {
    return (self.statusBits &amp; VNode.selectedBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.4">get runMainLoop () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.40">get get_focus () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    return self.focusWidget;
});},
</t>
<t tx="ekr.20201227092411.400">get isTopBitSet () {return __get__ (this, function (self) {
    return (self.statusBits &amp; self.topBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.401">get isVisited () {return __get__ (this, function (self) {
    return (self.statusBits &amp; VNode.visitedBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.402">get isWriteBit () {return __get__ (this, function (self) {
    var v = self;
    return (v.statusBits &amp; v.writeBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.403">get status () {return __get__ (this, function (self) {
    return self.statusBits;
});},
</t>
<t tx="ekr.20201227092411.404">get clearDirty () {return __get__ (this, function (self) {
    var v = self;
    v.statusBits &amp;= ~(v.dirtyBit);
});},
</t>
<t tx="ekr.20201227092411.405">get setDirty () {return __get__ (this, function (self) {
    self.statusBits |= self.dirtyBit;
});},
</t>
<t tx="ekr.20201227092411.406">get clearClonedBit () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.clonedBit);
});},
</t>
<t tx="ekr.20201227092411.407">get clearMarked () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.markedBit);
});},
</t>
<t tx="ekr.20201227092411.408">get clearWriteBit () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.writeBit);
});},
</t>
<t tx="ekr.20201227092411.409">get clearOrphan () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.orphanBit);
});},
</t>
<t tx="ekr.20201227092411.41">get getTextFromClipboard () {return __get__ (this, function (self) {
    return self.clipboardContents;
});},
</t>
<t tx="ekr.20201227092411.410">get clearVisited () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.visitedBit);
});},
</t>
<t tx="ekr.20201227092411.411">get contract () {return __get__ (this, function (self) {
    self.statusBits &amp;= ~(self.expandedBit);
});},
</t>
<t tx="ekr.20201227092411.412">get expand () {return __get__ (this, function (self) {
    self.statusBits |= self.expandedBit;
});},
</t>
<t tx="ekr.20201227092411.413">get initExpandedBit () {return __get__ (this, function (self) {
    self.statusBits |= self.expandedBit;
});},
</t>
<t tx="ekr.20201227092411.414">get isExpanded () {return __get__ (this, function (self) {
    return (self.statusBits &amp; self.expandedBit) != 0;
});},
</t>
<t tx="ekr.20201227092411.415">get initStatus () {return __get__ (this, function (self, status) {
    self.statusBits = status;
});},
</t>
<t tx="ekr.20201227092411.416">get setClonedBit () {return __get__ (this, function (self) {
    self.statusBits |= self.clonedBit;
});},
</t>
<t tx="ekr.20201227092411.417">get initClonedBit () {return __get__ (this, function (self, val) {
    if (val) {
        self.statusBits |= self.clonedBit;
    }
    else {
        self.statusBits &amp;= ~(self.clonedBit);
    }
});},
</t>
<t tx="ekr.20201227092411.418">get setMarked () {return __get__ (this, function (self) {
    self.statusBits |= self.markedBit;
});},
</t>
<t tx="ekr.20201227092411.419">get initMarkedBit () {return __get__ (this, function (self) {
    self.statusBits |= self.markedBit;
});},
</t>
<t tx="ekr.20201227092411.42">get replaceClipboardWith () {return __get__ (this, function (self, s) {
    self.clipboardContents = s;
});},
</t>
<t tx="ekr.20201227092411.420">get setOrphan () {return __get__ (this, function (self) {
    self.statusBits |= self.orphanBit;
});},
</t>
<t tx="ekr.20201227092411.421">get setSelected () {return __get__ (this, function (self) {
    self.statusBits |= self.selectedBit;
});},
</t>
<t tx="ekr.20201227092411.422">get setVisited () {return __get__ (this, function (self) {
    self.statusBits |= self.visitedBit;
});},
</t>
<t tx="ekr.20201227092411.423">get setWriteBit () {return __get__ (this, function (self) {
    self.statusBits |= self.writeBit;
});},
</t>
<t tx="ekr.20201227092411.424">get childrenModified () {return __get__ (this, function (self) {
    g.childrenModifiedSet.add (self);
});},
</t>
<t tx="ekr.20201227092411.425">get computeIcon () {return __get__ (this, function (self) {
    var val = 0;
    var v = self;
    if (v.hasBody ()) {
        val++;
    }
    if (v.isMarked ()) {
        val += 2;
    }
    if (v.isCloned ()) {
        val += 4;
    }
    if (v.isDirty ()) {
        val += 8;
    }
    return val;
});},
</t>
<t tx="ekr.20201227092411.426">get setIcon () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.427">get contentModified () {return __get__ (this, function (self) {
    g.contentModifiedSet.add (self);
});},
</t>
<t tx="ekr.20201227092411.428">get restoreCursorAndScroll () {return __get__ (this, function (self) {
    var traceTime = false &amp;&amp; !(g.unitTesting);
    var v = self;
    var ins = v.insertSpot;
    var spot = v.scrollBarSpot;
    var body = self.context.frame.body;
    var w = body.wrapper;
    if (ins === null) {
        var ins = 0;
    }
    if (traceTime) {
        var t1 = time.time ();
    }
    if (hasattr (body.wrapper, 'setInsertPoint')) {
        w.setInsertPoint (ins);
    }
    if (traceTime) {
        var delta_t = time.time () - t1;
        if (delta_t &gt; 0.1) {
            g.trace ('{} sec'.format (delta_t));
        }
    }
    if (spot !== null) {
        w.setYScrollPosition (spot);
        v.scrollBarSpot = spot;
    }
});},
</t>
<t tx="ekr.20201227092411.429">get saveCursorAndScroll () {return __get__ (this, function (self) {
    var v = self;
    var c = v.context;
    var w = c.frame.body;
    if (!(w)) {
        return ;
    }
    try {
        v.scrollBarSpot = w.getYScrollPosition ();
        v.insertSpot = w.getInsertPoint ();
    }
    catch (__except0__) {
        if (isinstance (__except0__, AttributeError)) {
            // pass;
        }
        else {
            throw __except0__;
        }
    }
});},
unicode_warning_given: false,
</t>
<t tx="ekr.20201227092411.43">get set_focus () {return __get__ (this, function (self, commander, widget) {
    self.focusWidget = widget;
});},
</t>
<t tx="ekr.20201227092411.430">get setBodyString () {return __get__ (this, function (self, s) {
    var v = self;
    if (isinstance (s, str)) {
        v._bodyString = s;
        return ;
    }
    try {
        v._bodyString = g.toUnicode (s, __kwargtrans__ ({reportErrors: true}));
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            if (!(self.unicode_warning_given)) {
                self.unicode_warning_given = true;
                g.internalError (s);
                g.es_exception ();
            }
        }
        else {
            throw __except0__;
        }
    }
    self.contentModified ();
    signal_manager.emit (self.context, 'body_changed', self);
});},
</t>
<t tx="ekr.20201227092411.431">get setHeadString () {return __get__ (this, function (self, s) {
    var v = self;
    if (g.isUnicode (s)) {
        v._headString = s.py_replace ('\n', '');
        return ;
    }
    var s = g.toUnicode (s, __kwargtrans__ ({reportErrors: true}));
    v._headString = s.py_replace ('\n', '');
    self.contentModified ();
});},
initBodyString: setBodyString,
initHeadString: setHeadString,
setHeadText: setHeadString,
setTnodeText: setBodyString,
</t>
<t tx="ekr.20201227092411.432">get setSelection () {return __get__ (this, function (self, start, length) {
    var v = self;
    v.selectionStart = start;
    v.selectionLength = length;
});},
</t>
<t tx="ekr.20201227092411.433">get setAllAncestorAtFileNodesDirty () {return __get__ (this, function (self) {
    var v = self;
    var hiddenRootVnode = v.context.hiddenRootNode;
    var v_and_parents = function* (v) {
        if (v != hiddenRootVnode) {
            yield v;
            for (var parent_v of v.parents) {
                yield* v_and_parents (parent_v);
            }
        }
        };
    for (var v2 of v_and_parents (v)) {
        if (v2.isAnyAtFileNode ()) {
            v2.setDirty ();
        }
    }
});},
</t>
<t tx="ekr.20201227092411.435">get cloneAsNthChild () {return __get__ (this, function (self, parent_v, n) {
    var v = self;
    v._linkAsNthChild (parent_v, n);
    return v;
});},
</t>
<t tx="ekr.20201227092411.436">get insertAsFirstChild () {return __get__ (this, function (self) {
    var v = self;
    return v.insertAsNthChild (0);
});},
</t>
<t tx="ekr.20201227092411.437">get insertAsLastChild () {return __get__ (this, function (self) {
    var v = self;
    return v.insertAsNthChild (len (v.children));
});},
</t>
<t tx="ekr.20201227092411.438">get insertAsNthChild () {return __get__ (this, function (self, n) {
    var v = self;
    var v2 = VNode (v.context);
    v2._linkAsNthChild (v, n);
    return v2;
});},
</t>
<t tx="ekr.20201227092411.439">get _addCopiedLink () {return __get__ (this, function (self, childIndex, parent_v) {
    var v = self;
    v.context.frame.tree.generation++;
    parent_v.childrenModified ();
    parent_v.children.insert (childIndex, v);
    v.parents.append (parent_v);
    v._p_changed = 1;
    parent_v._p_changed = 1;
});},
</t>
<t tx="ekr.20201227092411.44">get alert () {return __get__ (this, function (self, c, message) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.440">get _addLink () {return __get__ (this, function (self, childIndex, parent_v) {
    var v = self;
    v.context.frame.tree.generation++;
    parent_v.childrenModified ();
    parent_v.children.insert (childIndex, v);
    v.parents.append (parent_v);
    v._p_changed = 1;
    parent_v._p_changed = 1;
    if (len (v.parents) == 1) {
        for (var child of v.children) {
            child._addParentLinks (__kwargtrans__ ({parent: v}));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.441">get _addParentLinks () {return __get__ (this, function (self, parent) {
    var v = self;
    v.parents.append (parent);
    if (len (v.parents) == 1) {
        for (var child of v.children) {
            child._addParentLinks (__kwargtrans__ ({parent: v}));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.442">get _cutLink () {return __get__ (this, function (self, childIndex, parent_v) {
    var v = self;
    v.context.frame.tree.generation++;
    parent_v.childrenModified ();
    delete parent_v.children [childIndex];
    if (__in__ (parent_v, v.parents)) {
        try {
            v.parents.remove (parent_v);
        }
        catch (__except0__) {
            if (isinstance (__except0__, ValueError)) {
                g.internalError ('{} not in parents of {}'.format (parent_v, v));
                g.trace ('v.parents:');
                g.printObj (v.parents);
            }
            else {
                throw __except0__;
            }
        }
    }
    v._p_changed = 1;
    parent_v._p_changed = 1;
    if (!(v.parents)) {
        for (var child of v.children) {
            child._cutParentLinks (__kwargtrans__ ({parent: v}));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.443">get _cutParentLinks () {return __get__ (this, function (self, parent) {
    var v = self;
    v.parents.remove (parent);
    if (!(v.parents)) {
        for (var child of v.children) {
            child._cutParentLinks (__kwargtrans__ ({parent: v}));
        }
    }
});},
</t>
<t tx="ekr.20201227092411.444">get _deleteAllChildren () {return __get__ (this, function (self) {
    var v = self;
    for (var v2 of v.children) {
        try {
            v2.parents.remove (v);
        }
        catch (__except0__) {
            if (isinstance (__except0__, ValueError)) {
                g.internalError ('{} not in parents of {}'.format (v, v2));
                g.trace ('v2.parents:');
                g.printObj (v2.parents);
            }
            else {
                throw __except0__;
            }
        }
    }
    v.children = [];
});},
</t>
<t tx="ekr.20201227092411.445">get _linkAsNthChild () {return __get__ (this, function (self, parent_v, n) {
    var v = self;
    v._addLink (n, parent_v);
});},
</t>
<t tx="ekr.20201227092411.446">get __get_b () {return __get__ (this, function (self) {
    var v = self;
    return v.bodyString ();
});},
</t>
<t tx="ekr.20201227092411.447">get __set_b () {return __get__ (this, function (self, val) {
    var v = self;
    v.setBodyString (val);
});},
</t>
<t tx="ekr.20201227092411.448">get __get_h () {return __get__ (this, function (self) {
    var v = self;
    return v.headString ();
});},
</t>
<t tx="ekr.20201227092411.449">get __set_h () {return __get__ (this, function (self, val) {
    var v = self;
    v.setHeadString (val);
});},
</t>
<t tx="ekr.20201227092411.45">get attachLeoIcon () {return __get__ (this, function (self, window) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.450">get __get_u () {return __get__ (this, function (self) {
    var v = self;
    if (!(hasattr (v, 'unknownAttributes'))) {
        v.unknownAttributes = dict ({});
    }
    return v.unknownAttributes;
});},
</t>
<t tx="ekr.20201227092411.451">get __set_u () {return __get__ (this, function (self, val) {
    var v = self;
    if (val === null) {
        if (hasattr (v, 'unknownAttributes')) {
            delattr (v, 'unknownAttributes');
        }
    }
    else if (isinstance (val, dict)) {
        v.unknownAttributes = val;
    }
    else {
        var __except0__ = ValueError;
        __except0__.__cause__ = null;
        throw __except0__;
    }
});},
</t>
<t tx="ekr.20201227092411.452">    get __get_gnx () {return __get__ (this, function (self) {
        var v = self;
        return v.fileIndex;
    });}
});
Object.defineProperty (VNode, 'b', property.call (VNode, VNode.__get_b, VNode.__set_b));
Object.defineProperty (VNode, 'h', property.call (VNode, VNode.__get_h, VNode.__set_h));
Object.defineProperty (VNode, 'u', property.call (VNode, VNode.__get_u, VNode.__set_u));
Object.defineProperty (VNode, 'gnx', property.call (VNode, VNode.__get_gnx));
export var vnode = VNode;

//# sourceMappingURL=leo.core.leoNodes.map
</t>
<t tx="ekr.20201227092411.453">@path c:/vs-code-devel/leojs4/src/
const g = require('./dummyLeoGlobals')
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092411.454">var test = function () {
    g.trace ('=====');
};
</t>
<t tx="ekr.20201227092411.455">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:01
var time = {};
var warnings = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as __module_warnings__ from './warnings.js';
__nest__ (warnings, '', __module_warnings__);
import * as __module_time__ from './time.js';
__nest__ (time, '', __module_time__);
var __name__ = 'logging';
export var __author__ = 'Vinay Sajip &lt;vinay_sajip@red-dove.com&gt;, Carl Allendorph';
export var __status__ = 'experimental';
export var __version__ = '0.5.1.2';
export var __date__ = '15 November 2016';
export var _startTime = time.time ();
export var raiseExceptions = true;
export var logThreads = true;
export var logMultiprocessing = true;
export var logProcesses = true;
export var CRITICAL = 50;
export var FATAL = CRITICAL;
export var ERROR = 40;
export var WARNING = 30;
export var WARN = WARNING;
export var INFO = 20;
export var DEBUG = 10;
export var NOTSET = 0;
export var _levelToName = dict ([[CRITICAL, 'CRITICAL'], [ERROR, 'ERROR'], [WARNING, 'WARNING'], [INFO, 'INFO'], [DEBUG, 'DEBUG'], [NOTSET, 'NOTSET']]);
export var _nameToLevel = dict ({'CRITICAL': CRITICAL, 'FATAL': FATAL, 'ERROR': ERROR, 'WARN': WARNING, 'WARNING': WARNING, 'INFO': INFO, 'DEBUG': DEBUG, 'NOTSET': NOTSET});
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092411.456">export var getLevelName = function (level) {
    return _levelToName.py_get (level) || _nameToLevel.py_get (level) || 'Level {}'.format (level);
};
</t>
<t tx="ekr.20201227092411.457">export var addLevelName = function (level, levelName) {
    _acquireLock ();
    try {
        _levelToName [level] = levelName;
        _nameToLevel [levelName] = level;
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            var exc = __except0__;
            var __except1__ = exc;
            __except1__.__cause__ = null;
            throw __except1__;
        }
        else {
            throw __except0__;
        }
    }
    finally {
        _releaseLock ();
    }
};
</t>
<t tx="ekr.20201227092411.458">export var currentframe = function () {
    return null;
};
export var _srcfile = null;
</t>
<t tx="ekr.20201227092411.459">export var _checkLevel = function (level) {
    if (isinstance (level, int)) {
        var rv = level;
    }
    else if (str (level) == level) {
        if (!__in__ (level, _nameToLevel)) {
            var __except0__ = ValueError ('Unknown level: {}'.format (level));
            __except0__.__cause__ = null;
            throw __except0__;
        }
        var rv = _nameToLevel [level];
    }
    else {
        var __except0__ = py_TypeError ('Level not an integer or a valid string: {}'.format (level));
        __except0__.__cause__ = null;
        throw __except0__;
    }
    return rv;
};
export var _lock = null;
</t>
<t tx="ekr.20201227092411.46">get destroySelf () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.460">export var _acquireLock = function () {
    if (_lock) {
        _lock.acquire ();
    }
};
</t>
<t tx="ekr.20201227092411.461">export var _releaseLock = function () {
    if (_lock) {
        _lock.release ();
    }
};
export var LogRecord =  __class__ ('LogRecord', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.462">get __init__ () {return __get__ (this, function (self, py_name, level, pathname, lineno, msg, args, exc_info, func, sinfo) {
    if (typeof func == 'undefined' || (func != null &amp;&amp; func.hasOwnProperty ("__kwargtrans__"))) {;
        var func = null;
    };
    if (typeof sinfo == 'undefined' || (sinfo != null &amp;&amp; sinfo.hasOwnProperty ("__kwargtrans__"))) {;
        var sinfo = null;
    };
    var ct = time.time ();
    self.py_name = py_name;
    self.msg = msg;
    if (args &amp;&amp; len (args) == 1 &amp;&amp; isinstance (args [0], collections.Mapping) &amp;&amp; args [0]) {
        if (raiseExceptions) {
            var __except0__ = NotImplementedError ('No Dict Args to Log Record');
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    self.args = args;
    self.levelname = getLevelName (level);
    self.levelno = level;
    self.pathname = pathname;
    self.filename = pathname;
    self.module = 'Unknown module';
    self.exc_info = exc_info;
    self.exc_text = null;
    self.stack_info = sinfo;
    self.lineno = lineno;
    self.funcName = func;
    self.created = ct;
    self.msecs = (ct - int (ct)) * 1000;
    self.relativeCreated = (self.created - _startTime) * 1000;
    self.thread = null;
    self.threadName = null;
    self.processName = null;
    self.process = null;
});},
</t>
<t tx="ekr.20201227092411.463">get getMessage () {return __get__ (this, function (self) {
    var msg = str (self.msg);
    if (self.args) {
        var msg = msg.format (...self.args);
    }
    return msg;
});},
</t>
<t tx="ekr.20201227092411.464">get toDict () {return __get__ (this, function (self) {
    var keysToPick = ['name', 'msg', 'levelname', 'levelno', 'pathname', 'filename', 'module', 'lineno', 'funcName', 'created', 'asctime', 'msecs', 'relativeCreated', 'thread', 'threadName', 'process'];
    var ret = dict ({});
    for (var k of keysToPick) {
        if (k == 'name') {
            ret [k] = getattr (self, 'py_name', null);
        }
        else {
            ret [k] = getattr (self, k, null);
        }
    }
    ret ['message'] = self.getMessage ();
    return ret;
});},
</t>
<t tx="ekr.20201227092411.465">get __str__ () {return __get__ (this, function (self) {
    return '&lt;LogRecord: {}, {}, {}, {}, "{}"&gt;'.format (self.py_name, self.levelno, self.pathname, self.lineno, self.msg);
});},
</t>
<t tx="ekr.20201227092411.466">    get __repr__ () {return __get__ (this, function (self) {
        return str (self);
    });}
});
export var _logRecordFactory = LogRecord;
</t>
<t tx="ekr.20201227092411.467">export var setLogRecordFactory = function (factory) {
    _logRecordFactory = factory;
};
</t>
<t tx="ekr.20201227092411.468">export var getLogRecordFactory = function () {
    return _logRecordFactory;
};
</t>
<t tx="ekr.20201227092411.469">export var makeLogRecord = function (dict) {
    var rv = _logRecordFactory (null, null, '', 0, '', tuple ([]), null, null);
    rv.__dict__.py_update (dict);
    return rv;
};
export var PercentStyle =  __class__ ('PercentStyle', [object], {
    __module__: __name__,
    default_format: '%(message)s',
    asctime_format: '%(asctime)s',
    asctime_search: '%(asctime)',
</t>
<t tx="ekr.20201227092411.47">get finishCreate () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.470">get __init__ () {return __get__ (this, function (self, fmt) {
    self._fmt = fmt || self.default_format;
});},
</t>
<t tx="ekr.20201227092411.471">get usesTime () {return __get__ (this, function (self) {
    return self._fmt.find (self.asctime_search) &gt;= 0;
});},
</t>
<t tx="ekr.20201227092411.472">    get format () {return __get__ (this, function (self, record) {
        return __mod__ (self._fmt, record.__dict__);
    });}
});
export var StrFormatStyle =  __class__ ('StrFormatStyle', [PercentStyle], {
    __module__: __name__,
    default_format: '{message}',
    asctime_format: '{asctime}',
    asctime_search: '{asctime',
</t>
<t tx="ekr.20201227092411.473">    get format () {return __get__ (this, function (self, record) {
        if (arguments.length) {
            var __ilastarg0__ = arguments.length - 1;
            if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
                var __allkwargs0__ = arguments [__ilastarg0__--];
                for (var __attrib0__ in __allkwargs0__) {
                    switch (__attrib0__) {
                        case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                        case 'record': var record = __allkwargs0__ [__attrib0__]; break;
                    }
                }
            }
        }
        else {
        }
        return self._fmt.format (__kwargtrans__ (record.toDict ()));
    });}
});
export var StringTemplateStyle =  __class__ ('StringTemplateStyle', [PercentStyle], {
    __module__: __name__,
    default_format: '${message}',
    asctime_format: '${asctime}',
    asctime_search: '${asctime}',
</t>
<t tx="ekr.20201227092411.474">get __init__ () {return __get__ (this, function (self, fmt) {
    self._fmt = fmt || self.default_format;
    self._tpl = Template (self._fmt);
});},
</t>
<t tx="ekr.20201227092411.475">get usesTime () {return __get__ (this, function (self) {
    var fmt = self._fmt;
    return fmt.find ('$asctime') &gt;= 0 || fmt.find (self.asctime_format) &gt;= 0;
});},
</t>
<t tx="ekr.20201227092411.476">    get format () {return __get__ (this, function (self, record) {
        if (arguments.length) {
            var __ilastarg0__ = arguments.length - 1;
            if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
                var __allkwargs0__ = arguments [__ilastarg0__--];
                for (var __attrib0__ in __allkwargs0__) {
                    switch (__attrib0__) {
                        case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                        case 'record': var record = __allkwargs0__ [__attrib0__]; break;
                    }
                }
            }
        }
        else {
        }
        return self._tpl.substitute (__kwargtrans__ (record.__dict__));
    });}
});
export var BASIC_FORMAT = '{levelname}:{name}:{message}';
export var _STYLES = dict ({'{': tuple ([StrFormatStyle, BASIC_FORMAT])});
export var Formatter =  __class__ ('Formatter', [object], {
    __module__: __name__,
    converter: time.localtime,
</t>
<t tx="ekr.20201227092411.477">get __init__ () {return __get__ (this, function (self, format, datefmt, style) {
    if (typeof format == 'undefined' || (format != null &amp;&amp; format.hasOwnProperty ("__kwargtrans__"))) {;
        var format = null;
    };
    if (typeof datefmt == 'undefined' || (datefmt != null &amp;&amp; datefmt.hasOwnProperty ("__kwargtrans__"))) {;
        var datefmt = null;
    };
    if (typeof style == 'undefined' || (style != null &amp;&amp; style.hasOwnProperty ("__kwargtrans__"))) {;
        var style = '{';
    };
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'format': var format = __allkwargs0__ [__attrib0__]; break;
                    case 'datefmt': var datefmt = __allkwargs0__ [__attrib0__]; break;
                    case 'style': var style = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
    }
    else {
    }
    if (style != '{') {
        var __except0__ = NotImplementedError ('{} format only');
        __except0__.__cause__ = null;
        throw __except0__;
    }
    self._style = _STYLES [style] [0] (format);
    self._fmt = self._style._fmt;
    self.datefmt = datefmt;
});},
default_time_format: '%Y-%m-%d %H:%M:%S',
default_msec_format: '{},{:03d}',
</t>
<t tx="ekr.20201227092411.478">get formatTime () {return __get__ (this, function (self, record, datefmt) {
    if (typeof datefmt == 'undefined' || (datefmt != null &amp;&amp; datefmt.hasOwnProperty ("__kwargtrans__"))) {;
        var datefmt = null;
    };
    var ct = self.converter (record.created);
    if (datefmt) {
        var s = time.strftime (datefmt, ct);
    }
    else {
        var t = time.strftime (self.default_time_format, ct);
        var s = __mod__ (self.default_msec_format, tuple ([t, record.msecs]));
    }
    return s;
});},
</t>
<t tx="ekr.20201227092411.479">get formatException () {return __get__ (this, function (self, ei) {
    return str (ei);
});},
</t>
<t tx="ekr.20201227092411.48">get getFontFromParams () {return __get__ (this, function (self, family, size, slant, weight, defaultSize) {
    if (typeof defaultSize == 'undefined' || (defaultSize != null &amp;&amp; defaultSize.hasOwnProperty ("__kwargtrans__"))) {;
        var defaultSize = 12;
    };
    return g.app.config.defaultFont;
});},
</t>
<t tx="ekr.20201227092411.480">get usesTime () {return __get__ (this, function (self) {
    return self._style.usesTime ();
});},
</t>
<t tx="ekr.20201227092411.481">get formatMessage () {return __get__ (this, function (self, record) {
    return self._style.format (record);
});},
</t>
<t tx="ekr.20201227092411.482">get formatStack () {return __get__ (this, function (self, stack_info) {
    return stack_info;
});},
</t>
<t tx="ekr.20201227092411.483">    get format () {return __get__ (this, function (self, record) {
        record.message = record.getMessage ();
        if (self.usesTime ()) {
            record.asctime = self.formatTime (record, self.datefmt);
        }
        var s = self.formatMessage (record);
        if (record.exc_info) {
            if (!(record.exc_text)) {
                record.exc_text = self.formatException (record.exc_info);
            }
        }
        if (record.exc_text) {
            if (s [len (s) - 1] != '\n') {
                var s = s + '\n';
                var s = s + record.exc_text;
            }
        }
        if (record.stack_info) {
            if (s [len (s) - 1] != '\n') {
                var s = s + '\n';
                var s = s + self.formatStack (record.stack_info);
            }
        }
        return s;
    });}
});
export var _defaultFormatter = Formatter ();
export var BufferingFormatter =  __class__ ('BufferingFormatter', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.484">get __init__ () {return __get__ (this, function (self, linefmt) {
    if (typeof linefmt == 'undefined' || (linefmt != null &amp;&amp; linefmt.hasOwnProperty ("__kwargtrans__"))) {;
        var linefmt = null;
    };
    if (linefmt) {
        self.linefmt = linefmt;
    }
    else {
        self.linefmt = _defaultFormatter;
    }
});},
</t>
<t tx="ekr.20201227092411.485">get formatHeader () {return __get__ (this, function (self, records) {
    return '';
});},
</t>
<t tx="ekr.20201227092411.486">get formatFooter () {return __get__ (this, function (self, records) {
    return '';
});},
</t>
<t tx="ekr.20201227092411.487">    get format () {return __get__ (this, function (self, records) {
        var rv = '';
        if (len (records) &gt; 0) {
            var rv = rv + self.formatHeader (records);
            for (var record of records) {
                var rv = rv + self.linefmt.format (record);
                var rv = rv + self.formatFooter (records);
            }
        }
        return rv;
    });}
});
export var Filter =  __class__ ('Filter', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.488">get __init__ () {return __get__ (this, function (self, py_name) {
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = '';
    };
    self.py_name = py_name;
    self.nlen = len (py_name);
});},
</t>
<t tx="ekr.20201227092411.489">    get filter () {return __get__ (this, function (self, record) {
        if (self.nlen == 0) {
            return true;
        }
        else if (self.py_name == record.py_name) {
            return true;
        }
        else if (record.py_name.find (self.py_name, 0, self.nlen) != 0) {
            return false;
        }
        return record.py_name [self.nlen] == '.';
    });}
});
export var Filterer =  __class__ ('Filterer', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.49">get getIconImage () {return __get__ (this, function (self, py_name) {
    return null;
});},
</t>
<t tx="ekr.20201227092411.490">get __init__ () {return __get__ (this, function (self) {
    self.filters = [];
});},
</t>
<t tx="ekr.20201227092411.491">get addFilter () {return __get__ (this, function (self, filt) {
    if (!(__in__ (filt, self.filters))) {
        self.filters.append (filt);
    }
});},
</t>
<t tx="ekr.20201227092411.492">get removeFilter () {return __get__ (this, function (self, filt) {
    if (__in__ (filt, self.filters)) {
        self.filters.remove (filt);
    }
});},
</t>
<t tx="ekr.20201227092411.493">    get filter () {return __get__ (this, function (self, record) {
        var rv = true;
        for (var f of self.filters) {
            if (hasattr (f, 'filter')) {
                var result = f.filter (record);
            }
            else {
                var result = f (record);
            }
            if (!(result)) {
                var rv = false;
                break;
            }
        }
        return rv;
    });}
});
export var ConsoleLogStream =  __class__ ('ConsoleLogStream', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.494">get __init__ () {return __get__ (this, function (self) {
    self.py_name = 'console';
});},
</t>
<t tx="ekr.20201227092411.495">    get write () {return __get__ (this, function (self, msg) {
        var msg = msg.rstrip ('\n\r');
        if (len (msg) &gt; 0) {
            console.log (msg);
        }
    });}
});
export var _consoleStream = ConsoleLogStream ();
export var _handlers = dict ({});
export var _handlerList = [];
</t>
<t tx="ekr.20201227092411.496">export var _removeHandlerRef = function (wr) {
    var __left0__ = tuple ([_acquireLock, _releaseLock, _handlerList]);
    var acquire = __left0__ [0];
    var release = __left0__ [1];
    var handlers = __left0__ [2];
    if (acquire &amp;&amp; release &amp;&amp; handlers) {
        acquire ();
        try {
            if (__in__ (wr, handlers)) {
                handlers.remove (wr);
            }
        }
        finally {
            release ();
        }
    }
};
</t>
<t tx="ekr.20201227092411.497">export var _addHandlerRef = function (handler) {
    _acquireLock ();
    try {
        _handlerList.append (handler);
    }
    finally {
        _releaseLock ();
    }
};
export var Handler =  __class__ ('Handler', [Filterer], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.498">get __init__ () {return __get__ (this, function (self, level) {
    if (typeof level == 'undefined' || (level != null &amp;&amp; level.hasOwnProperty ("__kwargtrans__"))) {;
        var level = NOTSET;
    };
    Filterer.__init__ (self);
    self._name = null;
    self.level = _checkLevel (level);
    self.formatter = null;
    _addHandlerRef (self);
    self.createLock ();
});},
</t>
<t tx="ekr.20201227092411.499">get get_name () {return __get__ (this, function (self) {
    return self._name;
});},
</t>
<t tx="ekr.20201227092411.5">get replaceClipboardWith () {return __get__ (this, function (self, s) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.50">get getImageImage () {return __get__ (this, function (self, py_name) {
    return null;
});},
</t>
<t tx="ekr.20201227092411.500">get set_name () {return __get__ (this, function (self, py_name) {
    _acquireLock ();
    try {
        if (__in__ (self._name, _handlers)) {
            delete _handlers [self._name];
        }
        self._name = py_name;
        if (py_name) {
            _handlers [py_name] = self;
        }
    }
    finally {
        _releaseLock ();
    }
});},
</t>
<t tx="ekr.20201227092411.501">get createLock () {return __get__ (this, function (self) {
    self.lock = null;
});},
</t>
<t tx="ekr.20201227092411.502">get acquire () {return __get__ (this, function (self) {
    if (self.lock) {
        self.lock.acquire ();
    }
});},
</t>
<t tx="ekr.20201227092411.503">get release () {return __get__ (this, function (self) {
    if (self.lock) {
        self.lock.release ();
    }
});},
</t>
<t tx="ekr.20201227092411.504">get setLevel () {return __get__ (this, function (self, level) {
    self.level = _checkLevel (level);
});},
</t>
<t tx="ekr.20201227092411.505">get format () {return __get__ (this, function (self, record) {
    if (self.formatter) {
        var fmt = self.formatter;
    }
    else {
        var fmt = _defaultFormatter;
    }
    return fmt.format (record);
});},
</t>
<t tx="ekr.20201227092411.506">get emit () {return __get__ (this, function (self, record) {
    var __except0__ = NotImplementedError ('Must be implemented by handler');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092411.507">get handle () {return __get__ (this, function (self, record) {
    var rv = self.filter (record);
    if (rv) {
        self.acquire ();
        try {
            self.emit (record);
        }
        finally {
            self.release ();
        }
    }
    return rv;
});},
</t>
<t tx="ekr.20201227092411.508">get setFormatter () {return __get__ (this, function (self, fmt) {
    self.formatter = fmt;
});},
</t>
<t tx="ekr.20201227092411.509">get flush () {return __get__ (this, function (self) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.51">get getTreeImage () {return __get__ (this, function (self, c, path) {
    return null;
});},
</t>
<t tx="ekr.20201227092411.510">get close () {return __get__ (this, function (self) {
    _acquireLock ();
    try {
        if (self._name &amp;&amp; __in__ (self._name, _handlers)) {
            delete _handlers [self._name];
        }
    }
    finally {
        _releaseLock ();
    }
});},
</t>
<t tx="ekr.20201227092411.511">get handleError () {return __get__ (this, function (self, record) {
    if (raiseExceptions) {
        var __except0__ = Exception ('Failed to log: {}'.format (record));
        __except0__.__cause__ = null;
        throw __except0__;
    }
    else {
        _consoleStream.write ('--- Logging Error ---\n');
    }
});},
</t>
<t tx="ekr.20201227092411.512">    get __repr__ () {return __get__ (this, function (self) {
        var level = getLevelName (self.level);
        return '&lt;{} ({})&gt;'.format (self.__class__.__name__, level);
    });}
});
Object.defineProperty (Handler, 'name', property.call (Handler, Handler.get_name, Handler.set_name));
export var StreamHandler =  __class__ ('StreamHandler', [Handler], {
    __module__: __name__,
    terminator: '\n',
</t>
<t tx="ekr.20201227092411.513">get __init__ () {return __get__ (this, function (self, stream, level) {
    if (typeof stream == 'undefined' || (stream != null &amp;&amp; stream.hasOwnProperty ("__kwargtrans__"))) {;
        var stream = null;
    };
    if (typeof level == 'undefined' || (level != null &amp;&amp; level.hasOwnProperty ("__kwargtrans__"))) {;
        var level = NOTSET;
    };
    Handler.__init__ (self, level);
    if (stream === null) {
        var stream = _consoleStream;
    }
    self.stream = stream;
});},
</t>
<t tx="ekr.20201227092411.514">get flush () {return __get__ (this, function (self) {
    self.acquire ();
    try {
        if (self.stream &amp;&amp; hasattr (self.stream, 'flush')) {
            self.stream.flush ();
        }
    }
    finally {
        self.release ();
    }
});},
</t>
<t tx="ekr.20201227092411.515">get emit () {return __get__ (this, function (self, record) {
    try {
        var msg = self.format (record);
        var stream = self.stream;
        stream.write (msg);
        stream.write (self.terminator);
        self.flush ();
    }
    catch (__except0__) {
        if (isinstance (__except0__, Exception)) {
            self.handleError (record);
        }
        else {
            throw __except0__;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.516">    get __repr__ () {return __get__ (this, function (self) {
        var level = getLevelName (self.level);
        var py_name = getattr (self.stream, 'name', '');
        if (py_name) {
            py_name += ' ';
        }
        return '&lt;{} {}({})&gt;'.format (self.__class__.__name__, py_name, level);
    });}
});
export var FileHandler =  __class__ ('FileHandler', [StreamHandler], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.517">    get __init__ () {return __get__ (this, function (self, filename, mode, encoding, delay) {
        if (typeof mode == 'undefined' || (mode != null &amp;&amp; mode.hasOwnProperty ("__kwargtrans__"))) {;
            var mode = 'a';
        };
        if (typeof encoding == 'undefined' || (encoding != null &amp;&amp; encoding.hasOwnProperty ("__kwargtrans__"))) {;
            var encoding = null;
        };
        if (typeof delay == 'undefined' || (delay != null &amp;&amp; delay.hasOwnProperty ("__kwargtrans__"))) {;
            var delay = false;
        };
        var __except0__ = NotImplementedError ('No Filesystem for FileHandler');
        __except0__.__cause__ = null;
        throw __except0__;
    });}
});
export var _StderrHandler =  __class__ ('_StderrHandler', [StreamHandler], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.518">get __init__ () {return __get__ (this, function (self, level) {
    if (typeof level == 'undefined' || (level != null &amp;&amp; level.hasOwnProperty ("__kwargtrans__"))) {;
        var level = NOTSET;
    };
    StreamHandler.__init__ (self, null, level);
});},
</t>
<t tx="ekr.20201227092411.519">    get _getStream () {return __get__ (this, function (self) {
        return _consoleStream;
    });}
});
Object.defineProperty (_StderrHandler, 'stream', property.call (_StderrHandler, _StderrHandler._getStream));
export var _defaultLastResort = _StderrHandler (WARNING);
export var lastResort = _defaultLastResort;
export var PlaceHolder =  __class__ ('PlaceHolder', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.52">get get_window_info () {return __get__ (this, function (self, window) {
    return tuple ([600, 500, 20, 20]);
});},
</t>
<t tx="ekr.20201227092411.520">get __init__ () {return __get__ (this, function (self, alogger) {
    var n = alogger.py_name;
    self.loggerMap = dict ([[n, alogger]]);
});},
</t>
<t tx="ekr.20201227092411.521">    get append () {return __get__ (this, function (self, alogger) {
        var n = alogger.py_name;
        if (!__in__ (n, self.loggerMap.py_keys ())) {
            self.loggerMap [n] = alogger;
        }
    });}
});
</t>
<t tx="ekr.20201227092411.522">export var setLoggerClass = function (klass) {
    if (klass != Logger) {
        if (!(issubclass (klass, Logger))) {
            var __except0__ = py_TypeError ('logger not derived from logging.Logger: ' + klass.__name__);
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    _loggerClass = klass;
};
</t>
<t tx="ekr.20201227092411.523">export var getLoggerClass = function () {
    return _loggerClass;
};
export var Manager =  __class__ ('Manager', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.524">get __init__ () {return __get__ (this, function (self, rootnode) {
    self.root = rootnode;
    self.disable = 0;
    self.emittedNoHandlerWarning = false;
    self.loggerDict = dict ({});
    self.loggerClass = null;
    self.logRecordFactory = null;
});},
</t>
<t tx="ekr.20201227092411.525">get getLogger () {return __get__ (this, function (self, py_name) {
    var rv = null;
    if (!(isinstance (py_name, str))) {
        var __except0__ = py_TypeError ('A logger name must be a string');
        __except0__.__cause__ = null;
        throw __except0__;
    }
    _acquireLock ();
    try {
        if (__in__ (py_name, self.loggerDict)) {
            var rv = self.loggerDict [py_name];
            if (isinstance (rv, PlaceHolder)) {
                var ph = rv;
                var rv = self.loggerClass || _loggerClass (py_name);
                rv.manager = self;
                self.loggerDict [py_name] = rv;
                self._fixupChildren (ph, rv);
                self._fixupParents (rv);
            }
        }
        else {
            var rv = self.loggerClass || _loggerClass (py_name);
            rv.manager = self;
            self.loggerDict [py_name] = rv;
            self._fixupParents (rv);
        }
    }
    finally {
        _releaseLock ();
    }
    return rv;
});},
</t>
<t tx="ekr.20201227092411.526">get setLoggerClass () {return __get__ (this, function (self, klass) {
    if (klass != Logger) {
        if (!(issubclass (klass, Logger))) {
            var __except0__ = py_TypeError ('logger not derived from logging.Logger: ' + klass.__name__);
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    self.loggerClass = klass;
});},
</t>
<t tx="ekr.20201227092411.527">get setLogRecordFactory () {return __get__ (this, function (self, factory) {
    self.logRecordFactory = factory;
});},
</t>
<t tx="ekr.20201227092411.528">get _fixupParents () {return __get__ (this, function (self, alogger) {
    var py_name = alogger.py_name;
    var i = py_name.rfind ('.');
    var rv = null;
    while (i &gt; 0 &amp;&amp; !(rv)) {
        var substr = py_name.__getslice__ (0, i, 1);
        if (!__in__ (substr, self.loggerDict)) {
            self.loggerDict [substr] = PlaceHolder (alogger);
        }
        else {
            var obj = self.loggerDict [substr];
            if (isinstance (obj, Logger)) {
                var rv = obj;
            }
            else {
                obj.append (alogger);
            }
        }
        var i = py_name.rfind ('.', 0, i - 1);
    }
    if (!(rv)) {
        var rv = self.root;
    }
    alogger.parent = rv;
});},
</t>
<t tx="ekr.20201227092411.529">    get _fixupChildren () {return __get__ (this, function (self, ph, alogger) {
        var py_name = alogger.py_name;
        var namelen = len (py_name);
        for (var c of ph.loggerMap.py_keys ()) {
            var log = ph.loggerMap [c];
            if (!(log.parent.py_name.startswith (py_name))) {
                alogger.parent = log.parent;
                log.parent = alogger;
            }
        }
    });}
});
export var Logger =  __class__ ('Logger', [Filterer], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.53">get onActivateEvent () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    // pass;
});},
</t>
<t tx="ekr.20201227092411.530">get __init__ () {return __get__ (this, function (self, py_name, level) {
    if (typeof level == 'undefined' || (level != null &amp;&amp; level.hasOwnProperty ("__kwargtrans__"))) {;
        var level = NOTSET;
    };
    Filterer.__init__ (self);
    self.py_name = py_name;
    self.level = _checkLevel (level);
    self.parent = null;
    self.propagate = true;
    self.handlers = [];
    self.disabled = false;
});},
</t>
<t tx="ekr.20201227092411.531">get setLevel () {return __get__ (this, function (self, level) {
    self.level = _checkLevel (level);
});},
</t>
<t tx="ekr.20201227092411.532">get debug () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (DEBUG)) {
        self._log (DEBUG, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.533">get info () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (INFO)) {
        self._log (INFO, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.534">get warning () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (WARNING)) {
        self._log (WARNING, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.535">get warn () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    warnings.warn_explicit ('The `warn` method is deprecated - use `warning`', DeprecationWarning, 'logging/__init__.py', 1388, 'logging');
    self.warning (msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.536">get error () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (ERROR)) {
        self._log (ERROR, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.537">get exception () {return __get__ (this, function (self, msg) {
    var exc_info = true;
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    case 'exc_info': var exc_info = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.error (msg, ...args, __kwargtrans__ (__mergekwargtrans__ ({exc_info: exc_info}, kwargs)));
});},
</t>
<t tx="ekr.20201227092411.538">get critical () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (CRITICAL)) {
        self._log (CRITICAL, msg, args, __kwargtrans__ (kwargs));
    }
    var fatal = critical;
});},
</t>
<t tx="ekr.20201227092411.539">get log () {return __get__ (this, function (self, level, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'level': var level = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (3, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (!(isinstance (level, int))) {
        if (raiseExceptions) {
            var __except0__ = py_TypeError ('level must be an integer');
            __except0__.__cause__ = null;
            throw __except0__;
        }
        else {
            return ;
        }
    }
    if (self.isEnabledFor (level)) {
        self._log (level, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.54">get onDeactivateEvent () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    // pass;
});},
</t>
<t tx="ekr.20201227092411.540">get findCaller () {return __get__ (this, function (self, stack_info) {
    if (typeof stack_info == 'undefined' || (stack_info != null &amp;&amp; stack_info.hasOwnProperty ("__kwargtrans__"))) {;
        var stack_info = false;
    };
    var f = currentframe ();
    var rv = tuple (['(unknown file)', 0, '(unknown function)', null]);
    return rv;
});},
</t>
<t tx="ekr.20201227092411.541">get makeRecord () {return __get__ (this, function (self, py_name, level, fn, lno, msg, args, exc_info, func, extra, sinfo) {
    if (typeof func == 'undefined' || (func != null &amp;&amp; func.hasOwnProperty ("__kwargtrans__"))) {;
        var func = null;
    };
    if (typeof extra == 'undefined' || (extra != null &amp;&amp; extra.hasOwnProperty ("__kwargtrans__"))) {;
        var extra = null;
    };
    if (typeof sinfo == 'undefined' || (sinfo != null &amp;&amp; sinfo.hasOwnProperty ("__kwargtrans__"))) {;
        var sinfo = null;
    };
    var rv = _logRecordFactory (py_name, level, fn, lno, msg, args, exc_info, func, sinfo);
    if (extra !== null) {
        for (var key of extra) {
            if (__in__ (key, ['message', 'asctime']) || __in__ (key, rv.__dict__)) {
                var __except0__ = KeyError (__mod__ ('Attempt to overwrite %r in LogRecord', key));
                __except0__.__cause__ = null;
                throw __except0__;
            }
            rv.__dict__ [key] = extra [key];
        }
    }
    return rv;
});},
</t>
<t tx="ekr.20201227092411.542">get _log () {return __get__ (this, function (self, level, msg, args, exc_info, extra, stack_info) {
    if (typeof exc_info == 'undefined' || (exc_info != null &amp;&amp; exc_info.hasOwnProperty ("__kwargtrans__"))) {;
        var exc_info = null;
    };
    if (typeof extra == 'undefined' || (extra != null &amp;&amp; extra.hasOwnProperty ("__kwargtrans__"))) {;
        var extra = null;
    };
    if (typeof stack_info == 'undefined' || (stack_info != null &amp;&amp; stack_info.hasOwnProperty ("__kwargtrans__"))) {;
        var stack_info = false;
    };
    var sinfo = null;
    if (_srcfile) {
        try {
            var __left0__ = self.findCaller (stack_info);
            var fn = __left0__ [0];
            var lno = __left0__ [1];
            var func = __left0__ [2];
            var sinfo = __left0__ [3];
        }
        catch (__except0__) {
            if (isinstance (__except0__, ValueError)) {
                var __left0__ = tuple (['(unknown file)', 0, '(unknown function)']);
                var fn = __left0__ [0];
                var lno = __left0__ [1];
                var func = __left0__ [2];
            }
            else {
                throw __except0__;
            }
        }
    }
    else {
        var __left0__ = tuple (['(unknown file)', 0, '(unknown function)']);
        var fn = __left0__ [0];
        var lno = __left0__ [1];
        var func = __left0__ [2];
    }
    var record = self.makeRecord (self.py_name, level, fn, lno, msg, args, exc_info, func, extra, sinfo);
    self.handle (record);
});},
</t>
<t tx="ekr.20201227092411.543">get handle () {return __get__ (this, function (self, record) {
    if (!(self.disabled) &amp;&amp; self.filter (record)) {
        self.callHandlers (record);
    }
});},
</t>
<t tx="ekr.20201227092411.544">get addHandler () {return __get__ (this, function (self, hdlr) {
    _acquireLock ();
    try {
        if (!(__in__ (hdlr, self.handlers))) {
            self.handlers.append (hdlr);
        }
    }
    finally {
        _releaseLock ();
    }
});},
</t>
<t tx="ekr.20201227092411.545">get removeHandler () {return __get__ (this, function (self, hdlr) {
    _acquireLock ();
    try {
        if (__in__ (hdlr, self.handlers)) {
            self.handlers.remove (hdlr);
        }
    }
    finally {
        _releaseLock ();
    }
});},
</t>
<t tx="ekr.20201227092411.546">get hasHandlers () {return __get__ (this, function (self) {
    var c = self;
    var rv = false;
    while (c) {
        if (len (c.handlers) &gt; 0) {
            var rv = true;
            break;
        }
        if (!(c.propagate)) {
            break;
        }
        else {
            var c = c.parent;
        }
    }
    return rv;
});},
</t>
<t tx="ekr.20201227092411.547">get callHandlers () {return __get__ (this, function (self, record) {
    var c = self;
    var found = 0;
    while (c) {
        for (var hdlr of c.handlers) {
            var found = found + 1;
            if (record.levelno &gt;= hdlr.level) {
                hdlr.handle (record);
            }
        }
        if (!(c.propagate)) {
            var c = null;
        }
        else {
            var c = c.parent;
        }
    }
    if (found == 0) {
        if (lastResort) {
            if (record.levelno &gt;= lastResort.level) {
                lastResort.handle (record);
            }
        }
        else if (raiseExceptions &amp;&amp; !(self.manager.emittedNoHandlerWarning)) {
            _consoleStream.write ('No handlers could be found for logger "{}"'.format (self.py_name));
            self.manager.emittedNoHandlerWarning = true;
        }
    }
});},
</t>
<t tx="ekr.20201227092411.548">get getEffectiveLevel () {return __get__ (this, function (self) {
    var logger = self;
    while (logger) {
        if (logger.level) {
            return logger.level;
        }
        var logger = logger.parent;
    }
    return NOTSET;
});},
</t>
<t tx="ekr.20201227092411.549">get isEnabledFor () {return __get__ (this, function (self, level) {
    if (self.manager.disable &gt;= level) {
        return false;
    }
    return level &gt;= self.getEffectiveLevel ();
});},
</t>
<t tx="ekr.20201227092411.55">get set_top_geometry () {return __get__ (this, function (self, w, h, x, y) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.550">get getChild () {return __get__ (this, function (self, suffix) {
    if (self.root !== self) {
        var suffix = '.'.join (tuple ([self.py_name, suffix]));
    }
    return self.manager.getLogger (suffix);
});},
</t>
<t tx="ekr.20201227092411.551">    get __repr__ () {return __get__ (this, function (self) {
        var level = getLevelName (self.getEffectiveLevel ());
        return '&lt;{} {} ({})&gt;'.format (self.__class__.__name__, self.py_name, level);
    });}
});
export var RootLogger =  __class__ ('RootLogger', [Logger], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.552">    get __init__ () {return __get__ (this, function (self, level) {
        Logger.__init__ (self, 'root', level);
    });}
});
export var _loggerClass = Logger;
export var LoggerAdapter =  __class__ ('LoggerAdapter', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.553">get __init__ () {return __get__ (this, function (self, logger, extra) {
    self.logger = logger;
    self.extra = extra;
});},
</t>
<t tx="ekr.20201227092411.554">get process () {return __get__ (this, function (self, msg, kwargs) {
    kwargs ['extra'] = self.extra;
    return tuple ([msg, kwargs]);
});},
</t>
<t tx="ekr.20201227092411.555">get debug () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (DEBUG, msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.556">get info () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (INFO, msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.557">get warning () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (WARNING, msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.558">get warn () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    warnings.warn_explicit ('The `warn` method is deprecated - use `warning`', DeprecationWarning, 'logging/__init__.py', 1719, 'logging');
    self.warning (msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.559">get error () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (ERROR, msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.56">get isTextWidget () {return __get__ (this, function (self, w) {
    return true;
});},
</t>
<t tx="ekr.20201227092411.560">get exception () {return __get__ (this, function (self, msg) {
    var exc_info = true;
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    case 'exc_info': var exc_info = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (ERROR, msg, ...args, __kwargtrans__ (__mergekwargtrans__ ({exc_info: exc_info}, kwargs)));
});},
</t>
<t tx="ekr.20201227092411.561">get critical () {return __get__ (this, function (self, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.log (CRITICAL, msg, ...args, __kwargtrans__ (kwargs));
});},
</t>
<t tx="ekr.20201227092411.562">get log () {return __get__ (this, function (self, level, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'level': var level = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (3, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (self.isEnabledFor (level)) {
        var __left0__ = self.process (msg, kwargs);
        var msg = __left0__ [0];
        var kwargs = __left0__ [1];
        self.logger._log (level, msg, args, __kwargtrans__ (kwargs));
    }
});},
</t>
<t tx="ekr.20201227092411.563">get isEnabledFor () {return __get__ (this, function (self, level) {
    if (self.logger.manager.disable &gt;= level) {
        return false;
    }
    return level &gt;= self.getEffectiveLevel ();
});},
</t>
<t tx="ekr.20201227092411.564">get setLevel () {return __get__ (this, function (self, level) {
    self.logger.setLevel (level);
});},
</t>
<t tx="ekr.20201227092411.565">get getEffectiveLevel () {return __get__ (this, function (self) {
    return self.logger.getEffectiveLevel ();
});},
</t>
<t tx="ekr.20201227092411.566">get hasHandlers () {return __get__ (this, function (self) {
    return self.logger.hasHandlers ();
});},
</t>
<t tx="ekr.20201227092411.567">    get __repr__ () {return __get__ (this, function (self) {
        var logger = self.logger;
        var level = getLevelName (logger.getEffectiveLevel ());
        return '&lt;{} {} ({})&gt;'.format (self.__class__.__name__, logger.py_name, level);
    });}
});
export var root = RootLogger (WARNING);
Logger.root = root;
Logger.manager = Manager (Logger.root);
root.manager = Logger.manager;
</t>
<t tx="ekr.20201227092411.568">export var _resetLogging = function () {
    var _handlerList = [];
    var _handlers = dict ({});
    root = RootLogger (WARNING);
    Logger.root = root;
    Logger.manager = Manager (Logger.root);
    root.manager = Logger.manager;
};
</t>
<t tx="ekr.20201227092411.569">export var basicConfig = function () {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
    }
    else {
    }
    _acquireLock ();
    try {
        if (len (root.handlers) == 0) {
            var handlers = kwargs.py_pop ('handlers', null);
            if (handlers !== null) {
                if (__in__ ('stream', kwargs)) {
                    var __except0__ = ValueError ("'stream' should not be specified together with 'handlers'");
                    __except0__.__cause__ = null;
                    throw __except0__;
                }
            }
            if (handlers === null) {
                var stream = kwargs.py_pop ('stream', null);
                var h = StreamHandler (stream);
                var handlers = [h];
            }
            var dfs = kwargs.py_pop ('datefmt', null);
            var style = kwargs.py_pop ('style', '{');
            if (!__in__ (style, _STYLES)) {
                var __except0__ = ValueError ('Style must be one of: {}'.format (','.join (_STYLES.py_keys ())));
                __except0__.__cause__ = null;
                throw __except0__;
            }
            var fs = kwargs.py_pop ('format', _STYLES [style] [1]);
            var fmt = Formatter (fs, dfs, style);
            for (var h of handlers) {
                if (h.formatter === null) {
                    h.setFormatter (fmt);
                }
                root.addHandler (h);
            }
            var level = kwargs.py_pop ('level', null);
            if (level !== null) {
                root.setLevel (level);
            }
            if (len (kwargs) &gt; 0) {
                var py_keys = ', '.join (kwargs.py_keys ());
                var __except0__ = ValueError ('Unrecognised argument(s): {}'.format (py_keys));
                __except0__.__cause__ = null;
                throw __except0__;
            }
        }
    }
    finally {
        _releaseLock ();
    }
};
</t>
<t tx="ekr.20201227092411.57">get isTextWrapper () {return __get__ (this, function (self, w) {
    return w &amp;&amp; getattr (w, 'supportsHighLevelInterface', null);
});},
</t>
<t tx="ekr.20201227092411.570">export var getLogger = function (py_name) {
    if (typeof py_name == 'undefined' || (py_name != null &amp;&amp; py_name.hasOwnProperty ("__kwargtrans__"))) {;
        var py_name = null;
    };
    if (py_name) {
        return Logger.manager.getLogger (py_name);
    }
    else {
        return root;
    }
};
</t>
<t tx="ekr.20201227092411.571">export var critical = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.critical (msg, ...args, __kwargtrans__ (kwargs));
};
export var fatal = critical;
</t>
<t tx="ekr.20201227092411.572">export var error = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.error (msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.573">export var exception = function (msg) {
    var exc_info = true;
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    case 'exc_info': var exc_info = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    error (msg, ...args, __kwargtrans__ (__mergekwargtrans__ ({exc_info: exc_info}, kwargs)));
};
</t>
<t tx="ekr.20201227092411.574">export var warning = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.warning (msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.575">export var warn = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    warnings.warn_explicit ('The `warn` method is deprecated - use `warning`', DeprecationWarning, 'logging/__init__.py', 1944, 'logging');
    warning (msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.576">export var info = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.info (msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.577">export var debug = function (msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.debug (msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.578">export var log = function (level, msg) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'level': var level = __allkwargs0__ [__attrib0__]; break;
                    case 'msg': var msg = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (2, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    if (len (root.handlers) == 0) {
        basicConfig ();
    }
    root.log (level, msg, ...args, __kwargtrans__ (kwargs));
};
</t>
<t tx="ekr.20201227092411.579">export var disable = function (level) {
    root.manager.disable = level;
};
</t>
<t tx="ekr.20201227092411.58">get oops () {return __get__ (this, function (self) {
    g.trace ('NullGui', g.callers (4));
});},
</t>
<t tx="ekr.20201227092411.580">export var shutdown = function (handlerList) {
    if (typeof handlerList == 'undefined' || (handlerList != null &amp;&amp; handlerList.hasOwnProperty ("__kwargtrans__"))) {;
        var handlerList = _handlerList;
    };
    for (var wr of py_reversed (handlerList.__getslice__ (0, null, 1))) {
        try {
            var h = wr ();
            if (h) {
                try {
                    h.acquire ();
                    h.flush ();
                    h.close ();
                }
                catch (__except0__) {
                    if (isinstance (__except0__, tuple ([OSError, ValueError]))) {
                        // pass;
                    }
                    else {
                        throw __except0__;
                    }
                }
                finally {
                    h.release ();
                }
            }
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                var exc = __except0__;
                if (raiseExceptions) {
                    var __except1__ = exc;
                    __except1__.__cause__ = null;
                    throw __except1__;
                }
            }
            else {
                throw __except0__;
            }
        }
    }
};
export var NullHandler =  __class__ ('NullHandler', [Handler], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.581">get handle () {return __get__ (this, function (self, record) {
});},
</t>
<t tx="ekr.20201227092411.582">get emit () {return __get__ (this, function (self, record) {
});},
</t>
<t tx="ekr.20201227092411.583">    get createLock () {return __get__ (this, function (self) {
        self.lock = null;
    });}
});
export var _warnings_showwarning = null;
</t>
<t tx="ekr.20201227092411.584">export var _showwarning = function (message, category, filename, lineno, file, line) {
    if (typeof file == 'undefined' || (file != null &amp;&amp; file.hasOwnProperty ("__kwargtrans__"))) {;
        var file = null;
    };
    if (typeof line == 'undefined' || (line != null &amp;&amp; line.hasOwnProperty ("__kwargtrans__"))) {;
        var line = null;
    };
    if (file !== null) {
        if (_warnings_showwarning !== null) {
            _warnings_showwarning (message, category, filename, lineno, file, line);
        }
    }
    else {
        var s = warnings.formatwarning (message, category, filename, lineno, line);
        var logger = getLogger ('py.warnings');
        if (!(logger.handlers)) {
            logger.addHandler (NullHandler ());
        }
        logger.warning (s);
    }
};
</t>
<t tx="ekr.20201227092411.585">export var captureWarnings = function (capture) {
    if (capture) {
        if (_warnings_showwarning === null) {
            _warnings_showwarning = warnings.showwarning;
            warnings.setShowWarning (_showwarning);
        }
    }
    else if (_warnings_showwarning !== null) {
        warnings.setShowWarnings (_warnings_showwarning);
        _warnings_showwarning = null;
    }
};

//# sourceMappingURL=logging.map
</t>
<t tx="ekr.20201227092411.586">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:09:55
var __name__ = 'org.transcrypt.__runtime__';
export var __envir__ = {};
__envir__.interpreter_name = 'python';
__envir__.transpiler_name = 'transcrypt';
__envir__.executor_name = __envir__.transpiler_name;
__envir__.transpiler_version = '3.7.16';

export function __nest__ (headObject, tailNames, value) {
    var current = headObject;
    if (tailNames != '') {
        var tailChain = tailNames.split ('.');
        var firstNewIndex = tailChain.length;
        for (var index = 0; index &lt; tailChain.length; index++) {
            if (!current.hasOwnProperty (tailChain [index])) {
                firstNewIndex = index;
                break;
            }
            current = current [tailChain [index]];
        }
        for (var index = firstNewIndex; index &lt; tailChain.length; index++) {
            current [tailChain [index]] = {};
            current = current [tailChain [index]];
        }
    }
    for (let attrib of Object.getOwnPropertyNames (value)) {
        Object.defineProperty (current, attrib, {
            get () {return value [attrib];},
            enumerable: true,
            configurable: true
        });
    }
};
export function __init__ (module) {
    if (!module.__inited__) {
        module.__all__.__init__ (module.__all__);
        module.__inited__ = true;
    }
    return module.__all__;
};
export var __proxy__ = false;
export function __get__ (self, func, quotedFuncName) {
    if (self) {
        if (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {
            if (quotedFuncName) {
                Object.defineProperty (self, quotedFuncName, {
                    value: function () {
                        var args = [] .slice.apply (arguments);
                        return func.apply (null, [self] .concat (args));
                    },
                    writable: true,
                    enumerable: true,
                    configurable: true
                });
            }
            return function () {
                var args = [] .slice.apply (arguments);
                return func.apply (null, [self] .concat (args));
            };
        }
        else {
            return func;
        }
    }
    else {
        return func;
    }
};
export function __getcm__ (self, func, quotedFuncName) {
    if (self.hasOwnProperty ('__class__')) {
        return function () {
            var args = [] .slice.apply (arguments);
            return func.apply (null, [self.__class__] .concat (args));
        };
    }
    else {
        return function () {
            var args = [] .slice.apply (arguments);
            return func.apply (null, [self] .concat (args));
        };
    }
};
export function __getsm__ (self, func, quotedFuncName) {
    return func;
};
export var py_metatype = {
    __name__: 'type',
    __bases__: [],
    __new__: function (meta, name, bases, attribs) {
        @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092411.587">        var cls = function () {
            var args = [] .slice.apply (arguments);
            return cls.__new__ (args);
        };
        for (var index = bases.length - 1; index &gt;= 0; index--) {
            var base = bases [index];
            for (var attrib in base) {
                var descrip = Object.getOwnPropertyDescriptor (base, attrib);
                Object.defineProperty (cls, attrib, descrip);
            }
            for (let symbol of Object.getOwnPropertySymbols (base)) {
                let descrip = Object.getOwnPropertyDescriptor (base, symbol);
                Object.defineProperty (cls, symbol, descrip);
            }
        }
        cls.__metaclass__ = meta;
        cls.__name__ = name.startsWith ('py_') ? name.slice (3) : name;
        cls.__bases__ = bases;
        for (var attrib in attribs) {
            var descrip = Object.getOwnPropertyDescriptor (attribs, attrib);
            Object.defineProperty (cls, attrib, descrip);
        }
        for (let symbol of Object.getOwnPropertySymbols (attribs)) {
            let descrip = Object.getOwnPropertyDescriptor (attribs, symbol);
            Object.defineProperty (cls, symbol, descrip);
        }
        return cls;
    }
};
py_metatype.__metaclass__ = py_metatype;
export var object = {
    __init__: function (self) {},
    __metaclass__: py_metatype,
    __name__: 'object',
    __bases__: [],
    __new__: function (args) {
        var instance = Object.create (this, {__class__: {value: this, enumerable: true}});
        if ('__getattr__' in this || '__setattr__' in this) {
            instance = new Proxy (instance, {
                get: function (target, name) {
                    let result = target [name];
                    if (result == undefined) {
                        return target.__getattr__ (name);
                    }
                    else {
                        return result;
                    }
                },
                set: function (target, name, value) {
                    try {
                        target.__setattr__ (name, value);
                    }
                    catch (exception) {
                        target [name] = value;
                    }
                    return true;
                }
            })
        }
        this.__init__.apply (null, [instance] .concat (args));
        return instance;
    }
};
export function __class__ (name, bases, attribs, meta) {
    if (meta === undefined) {
        meta = bases [0] .__metaclass__;
    }
    return meta.__new__ (meta, name, bases, attribs);
};
export function __pragma__ () {};
export function __call__ (/* &lt;callee&gt;, &lt;this&gt;, &lt;params&gt;* */) {
    var args = [] .slice.apply (arguments);
    if (typeof args [0] == 'object' &amp;&amp; '__call__' in args [0]) {
        return args [0] .__call__ .apply (args [1], args.slice (2));
    }
    else {
        return args [0] .apply (args [1], args.slice (2));
    }
};
__envir__.executor_name = __envir__.transpiler_name;
var __main__ = {__file__: ''};
var __except__ = null;
export function __kwargtrans__ (anObject) {
    anObject.__kwargtrans__ = null;
    anObject.constructor = Object;
    return anObject;
}
export function __super__ (aClass, methodName) {
    for (let base of aClass.__bases__) {
        if (methodName in base) {
           return base [methodName];
        }
    }
    throw new Exception ('Superclass method not found');
}
export function property (getter, setter) {
    if (!setter) {
        setter = function () {};
    }
    return {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};
}
export function __setproperty__ (anObject, name, descriptor) {
    if (!anObject.hasOwnProperty (name)) {
        Object.defineProperty (anObject, name, descriptor);
    }
}
export function assert (condition, message) {
    if (!condition) {
        throw AssertionError (message, new Error ());
    }
}
export function __mergekwargtrans__ (object0, object1) {
    var result = {};
    for (var attrib in object0) {
        result [attrib] = object0 [attrib];
    }
    for (var attrib in object1) {
        result [attrib] = object1 [attrib];
    }
    return result;
};
export function __mergefields__ (targetClass, sourceClass) {
    let fieldNames = ['__reprfields__', '__comparefields__', '__initfields__']
    if (sourceClass [fieldNames [0]]) {
        if (targetClass [fieldNames [0]]) {
            for (let fieldName of fieldNames) {
                targetClass [fieldName] = new Set ([...targetClass [fieldName], ...sourceClass [fieldName]]);
            }
        }
        else {
            for (let fieldName of fieldNames) {
                targetClass [fieldName] = new Set (sourceClass [fieldName]);
            }
        }
    }
}
export function __withblock__ (manager, statements) {
    if (hasattr (manager, '__enter__')) {
        try {
            manager.__enter__ ();
            statements ();
            manager.__exit__ ();
        }
        catch (exception) {
            if (! (manager.__exit__ (exception.name, exception, exception.stack))) {
                throw exception;
            }
        }
    }
    else {
        statements ();
        manager.close ();
    }
};
export function dir (obj) {
    var aList = [];
    for (var aKey in obj) {
        aList.push (aKey.startsWith ('py_') ? aKey.slice (3) : aKey);
    }
    aList.sort ();
    return aList;
};
export function setattr (obj, name, value) {
    obj [name] = value;
};
export function getattr (obj, name) {
    return name in obj ? obj [name] : obj ['py_' + name];
};
export function hasattr (obj, name) {
    try {
        return name in obj || 'py_' + name in obj;
    }
    catch (exception) {
        return false;
    }
};
export function delattr (obj, name) {
    if (name in obj) {
        delete obj [name];
    }
    else {
        delete obj ['py_' + name];
    }
};
export function __in__ (element, container) {
    if (container === undefined || container === null) {
        return false;
    }
    if (container.__contains__ instanceof Function) {
        return container.__contains__ (element);
    }
    else {
        return (
            container.indexOf ?
            container.indexOf (element) &gt; -1 :
            container.hasOwnProperty (element)
        );
    }
};
export function __specialattrib__ (attrib) {
    return (attrib.startswith ('__') &amp;&amp; attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');
};
export function len (anObject) {
    if (anObject === undefined || anObject === null) {
        return 0;
    }
    if (anObject.__len__ instanceof Function) {
        return anObject.__len__ ();
    }
    if (anObject.length !== undefined) {
        return anObject.length;
    }
    var length = 0;
    for (var attr in anObject) {
        if (!__specialattrib__ (attr)) {
            length++;
        }
    }
    return length;
};
export function __i__ (any) {
    return py_typeof (any) == dict ? any.py_keys () : any;
}
export function __k__ (keyed, key) {
    var result = keyed [key];
    if (typeof result == 'undefined') {
        if (keyed instanceof Array)
            if (key == +key &amp;&amp; key &gt;= 0 &amp;&amp; keyed.length &gt; key)
                return result;
            else
                throw IndexError (key, new Error());
        else
            throw KeyError (key, new Error());
    }
    return result;
}
export function __t__ (target) {
    return (
        target === undefined || target === null ? false :
        ['boolean', 'number'] .indexOf (typeof target) &gt;= 0 ? target :
        target.__bool__ instanceof Function ? (target.__bool__ () ? target : false) :
        target.__len__ instanceof Function ?  (target.__len__ () !== 0 ? target : false) :
        target instanceof Function ? target :
        len (target) !== 0 ? target :
        false
    );
}
export function float (any) {
    if (any == 'inf') {
        return Infinity;
    }
    else if (any == '-inf') {
        return -Infinity;
    }
    else if (any == 'nan') {
        return NaN;
    }
    else if (isNaN (parseFloat (any))) {
        if (any === false) {
            return 0;
        }
        else if (any === true) {
            return 1;
        }
        else {
            throw ValueError ("could not convert string to float: '" + str(any) + "'", new Error ());
        }
    }
    else {
        return +any;
    }
};
float.__name__ = 'float';
float.__bases__ = [object];
export function int (any) {
    return float (any) | 0
};
int.__name__ = 'int';
int.__bases__ = [object];
export function bool (any) {
    return !!__t__ (any);
};
bool.__name__ = 'bool';
bool.__bases__ = [int];
export function py_typeof (anObject) {
    var aType = typeof anObject;
    if (aType == 'object') {
        try {
            return '__class__' in anObject ? anObject.__class__ : object;
        }
        catch (exception) {
            return aType;
        }
    }
    else {
        return (
            aType == 'boolean' ? bool :
            aType == 'string' ? str :
            aType == 'number' ? (anObject % 1 == 0 ? int : float) :
            null
        );
    }
};
export function issubclass (aClass, classinfo) {
    if (classinfo instanceof Array) {
        for (let aClass2 of classinfo) {
            if (issubclass (aClass, aClass2)) {
                return true;
            }
        }
        return false;
    }
    try {
        var aClass2 = aClass;
        if (aClass2 == classinfo) {
            return true;
        }
        else {
            var bases = [].slice.call (aClass2.__bases__);
            while (bases.length) {
                aClass2 = bases.shift ();
                if (aClass2 == classinfo) {
                    return true;
                }
                if (aClass2.__bases__.length) {
                    bases = [].slice.call (aClass2.__bases__).concat (bases);
                }
            }
            return false;
        }
    }
    catch (exception) {
        return aClass == classinfo || classinfo == object;
    }
};
export function isinstance (anObject, classinfo) {
    try {
        return '__class__' in anObject ? issubclass (anObject.__class__, classinfo) : issubclass (py_typeof (anObject), classinfo);
    }
    catch (exception) {
        return issubclass (py_typeof (anObject), classinfo);
    }
};
export function callable (anObject) {
    return anObject &amp;&amp; typeof anObject == 'object' &amp;&amp; '__call__' in anObject ? true : typeof anObject === 'function';
};
export function repr (anObject) {
    try {
        return anObject.__repr__ ();
    }
    catch (exception) {
        try {
            return anObject.__str__ ();
        }
        catch (exception) {
            try {
                if (anObject == null) {
                    return 'None';
                }
                else if (anObject.constructor == Object) {
                    var result = '{';
                    var comma = false;
                    for (var attrib in anObject) {
                        if (!__specialattrib__ (attrib)) {
                            if (attrib.isnumeric ()) {
                                var attribRepr = attrib;
                            }
                            else {
                                var attribRepr = '\'' + attrib + '\'';
                            }
                            if (comma) {
                                result += ', ';
                            }
                            else {
                                comma = true;
                            }
                            result += attribRepr + ': ' + repr (anObject [attrib]);
                        }
                    }
                    result += '}';
                    return result;
                }
                else {
                    return typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();
                }
            }
            catch (exception) {
                return '&lt;object of type: ' + typeof anObject + '&gt;';
            }
        }
    }
};
export function chr (charCode) {
    return String.fromCharCode (charCode);
};
export function ord (aChar) {
    return aChar.charCodeAt (0);
};
export function max (nrOrSeq) {
    return arguments.length == 1 ? Math.max (...nrOrSeq) : Math.max (...arguments);
};
export function min (nrOrSeq) {
    return arguments.length == 1 ? Math.min (...nrOrSeq) : Math.min (...arguments);
};
export var abs = Math.abs;
export function round (number, ndigits) {
    if (ndigits) {
        var scale = Math.pow (10, ndigits);
        number *= scale;
    }
    var rounded = Math.round (number);
    if (rounded - number == 0.5 &amp;&amp; rounded % 2) {
        rounded -= 1;
    }
    if (ndigits) {
        rounded /= scale;
    }
    return rounded;
};
export function __jsUsePyNext__ () {
    try {
        var result = this.__next__ ();
        return {value: result, done: false};
    }
    catch (exception) {
        return {value: undefined, done: true};
    }
}
export function __pyUseJsNext__ () {
    var result = this.next ();
    if (result.done) {
        throw StopIteration (new Error ());
    }
    else {
        return result.value;
    }
}
export function py_iter (iterable) {
    if (typeof iterable == 'string' || '__iter__' in iterable) {
        var result = iterable.__iter__ ();
        result.next = __jsUsePyNext__;
    }
    else if ('selector' in iterable) {
        var result = list (iterable) .__iter__ ();
        result.next = __jsUsePyNext__;
    }
    else if ('next' in iterable) {
        var result = iterable
        if (! ('__next__' in result)) {
            result.__next__ = __pyUseJsNext__;
        }
    }
    else if (Symbol.iterator in iterable) {
        var result = iterable [Symbol.iterator] ();
        result.__next__ = __pyUseJsNext__;
    }
    else {
        throw IterableError (new Error ());
    }
    result [Symbol.iterator] = function () {return result;};
    return result;
}
export function py_next (iterator) {
    try {
        var result = iterator.__next__ ();
    }
    catch (exception) {
        var result = iterator.next ();
        if (result.done) {
            throw StopIteration (new Error ());
        }
        else {
            return result.value;
        }
    }
    if (result == undefined) {
        throw StopIteration (new Error ());
    }
    else {
        return result;
    }
}
export function __PyIterator__ (iterable) {
    this.iterable = iterable;
    this.index = 0;
}
</t>
<t tx="ekr.20201227092411.588">__PyIterator__.prototype.__next__ = function() {
    if (this.index &lt; this.iterable.length) {
        return this.iterable [this.index++];
    }
    else {
        throw StopIteration (new Error ());
    }
};
export function __JsIterator__ (iterable) {
    this.iterable = iterable;
    this.index = 0;
}
</t>
<t tx="ekr.20201227092411.589">__JsIterator__.prototype.next = function () {
    if (this.index &lt; this.iterable.py_keys.length) {
        return {value: this.index++, done: false};
    }
    else {
        return {value: undefined, done: true};
    }
};
export function py_reversed (iterable) {
    iterable = iterable.slice ();
    iterable.reverse ();
    return iterable;
};
export function zip () {
    var args = [] .slice.call (arguments);
    for (var i = 0; i &lt; args.length; i++) {
        if (typeof args [i] == 'string') {
            args [i] = args [i] .split ('');
        }
        else if (!Array.isArray (args [i])) {
            args [i] = Array.from (args [i]);
        }
    }
    var shortest = args.length == 0 ? [] : args.reduce (
</t>
<t tx="ekr.20201227092411.59">get createComparePanel () {return __get__ (this, function (self, c) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.590">    function (array0, array1) {
        return array0.length &lt; array1.length ? array0 : array1;
    }
);
return shortest.map (
</t>
<t tx="ekr.20201227092411.591">        function (current, index) {
            return args.map (
                function (current) {
                    return current [index];
                }
            );
        }
    );
};
export function range (start, stop, step) {
    if (stop == undefined) {
        stop = start;
        start = 0;
    }
    if (step == undefined) {
        step = 1;
    }
    if ((step &gt; 0 &amp;&amp; start &gt;= stop) || (step &lt; 0 &amp;&amp; start &lt;= stop)) {
        return [];
    }
    var result = [];
    for (var i = start; step &gt; 0 ? i &lt; stop : i &gt; stop; i += step) {
        result.push(i);
    }
    return result;
};
export function any (iterable) {
    for (let item of iterable) {
        if (bool (item)) {
            return true;
        }
    }
    return false;
}
export function all (iterable) {
    for (let item of iterable) {
        if (! bool (item)) {
            return false;
        }
    }
    return true;
}
export function sum (iterable) {
    let result = 0;
    for (let item of iterable) {
        result += item;
    }
    return result;
}
export function enumerate (iterable) {
    return zip (range (len (iterable)), iterable);
}
export function copy (anObject) {
    if (anObject == null || typeof anObject == "object") {
        return anObject;
    }
    else {
        var result = {};
        for (var attrib in obj) {
            if (anObject.hasOwnProperty (attrib)) {
                result [attrib] = anObject [attrib];
            }
        }
        return result;
    }
}
export function deepcopy (anObject) {
    if (anObject == null || typeof anObject == "object") {
        return anObject;
    }
    else {
        var result = {};
        for (var attrib in obj) {
            if (anObject.hasOwnProperty (attrib)) {
                result [attrib] = deepcopy (anObject [attrib]);
            }
        }
        return result;
    }
}
export function list (iterable) {
    let instance = iterable ? Array.from (iterable) : [];
    return instance;
}
Array.prototype.__class__ = list;
list.__name__ = 'list';
list.__bases__ = [object];
Array.prototype.__iter__ = function () {return new __PyIterator__ (this);};
</t>
<t tx="ekr.20201227092411.593">Array.prototype.__getslice__ = function (start, stop, step) {
    if (start &lt; 0) {
        start = this.length + start;
    }
    if (stop == null) {
        stop = this.length;
    }
    else if (stop &lt; 0) {
        stop = this.length + stop;
    }
    else if (stop &gt; this.length) {
        stop = this.length;
    }
    if (step == 1) {
        return Array.prototype.slice.call(this, start, stop);
    }
    let result = list ([]);
    for (let index = start; index &lt; stop; index += step) {
        result.push (this [index]);
    }
    return result;
};
</t>
<t tx="ekr.20201227092411.594">Array.prototype.__setslice__ = function (start, stop, step, source) {
    if (start &lt; 0) {
        start = this.length + start;
    }
    if (stop == null) {
        stop = this.length;
    }
    else if (stop &lt; 0) {
        stop = this.length + stop;
    }
    if (step == null) {
        Array.prototype.splice.apply (this, [start, stop - start] .concat (source));
    }
    else {
        let sourceIndex = 0;
        for (let targetIndex = start; targetIndex &lt; stop; targetIndex += step) {
            this [targetIndex] = source [sourceIndex++];
        }
    }
};
</t>
<t tx="ekr.20201227092411.595">Array.prototype.__repr__ = function () {
    if (this.__class__ == set &amp;&amp; !this.length) {
        return 'set()';
    }
    let result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';
    for (let index = 0; index &lt; this.length; index++) {
        if (index) {
            result += ', ';
        }
        result += repr (this [index]);
    }
    if (this.__class__ == tuple &amp;&amp; this.length == 1) {
        result += ',';
    }
    result += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;
    return result;
};
Array.prototype.__str__ = Array.prototype.__repr__;
</t>
<t tx="ekr.20201227092411.596">Array.prototype.append = function (element) {
    this.push (element);
};
</t>
<t tx="ekr.20201227092411.597">Array.prototype.py_clear = function () {
    this.length = 0;
};
</t>
<t tx="ekr.20201227092411.598">Array.prototype.extend = function (aList) {
    this.push.apply (this, aList);
};
</t>
<t tx="ekr.20201227092411.599">Array.prototype.insert = function (index, element) {
    this.splice (index, 0, element);
};
</t>
<t tx="ekr.20201227092411.6">get getTextFromClipboard () {return __get__ (this, function (self) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.60">get createFindTab () {return __get__ (this, function (self, c, parentFrame) {
    // pass;
});},
</t>
<t tx="ekr.20201227092411.600">Array.prototype.remove = function (element) {
    let index = this.indexOf (element);
    if (index == -1) {
        throw ValueError ("list.remove(x): x not in list", new Error ());
    }
    this.splice (index, 1);
};
</t>
<t tx="ekr.20201227092411.601">Array.prototype.index = function (element) {
    return this.indexOf (element);
};
</t>
<t tx="ekr.20201227092411.602">Array.prototype.py_pop = function (index) {
    if (index == undefined) {
        return this.pop ();
    }
    else {
        return this.splice (index, 1) [0];
    }
};
</t>
<t tx="ekr.20201227092411.603">Array.prototype.py_sort = function () {
    __sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));
};
</t>
<t tx="ekr.20201227092411.604">Array.prototype.__add__ = function (aList) {
    return list (this.concat (aList));
};
</t>
<t tx="ekr.20201227092411.605">Array.prototype.__mul__ = function (scalar) {
    let result = this;
    for (let i = 1; i &lt; scalar; i++) {
        result = result.concat (this);
    }
    return result;
};
Array.prototype.__rmul__ = Array.prototype.__mul__;
export function tuple (iterable) {
    let instance = iterable ? [] .slice.apply (iterable) : [];
    instance.__class__ = tuple;
    return instance;
}
tuple.__name__ = 'tuple';
tuple.__bases__ = [object];
export function set (iterable) {
    let instance = [];
    if (iterable) {
        for (let index = 0; index &lt; iterable.length; index++) {
            instance.add (iterable [index]);
        }
    }
    instance.__class__ = set;
    return instance;
}
set.__name__ = 'set';
set.__bases__ = [object];
</t>
<t tx="ekr.20201227092411.606">Array.prototype.__bindexOf__ = function (element) {
    element += '';
    let mindex = 0;
    let maxdex = this.length - 1;
    while (mindex &lt;= maxdex) {
        let index = (mindex + maxdex) / 2 | 0;
        let middle = this [index] + '';
        if (middle &lt; element) {
            mindex = index + 1;
        }
        else if (middle &gt; element) {
            maxdex = index - 1;
        }
        else {
            return index;
        }
    }
    return -1;
};
</t>
<t tx="ekr.20201227092411.607">Array.prototype.add = function (element) {
    if (this.indexOf (element) == -1) {
        this.push (element);
    }
};
</t>
<t tx="ekr.20201227092411.608">Array.prototype.discard = function (element) {
    var index = this.indexOf (element);
    if (index != -1) {
        this.splice (index, 1);
    }
};
</t>
<t tx="ekr.20201227092411.609">Array.prototype.isdisjoint = function (other) {
    this.sort ();
    for (let i = 0; i &lt; other.length; i++) {
        if (this.__bindexOf__ (other [i]) != -1) {
            return false;
        }
    }
    return true;
};
</t>
<t tx="ekr.20201227092411.61">get createLeoFrame () {return __get__ (this, function (self, c, title) {
    var gui = self;
    self.lastFrame = leoFrame.NullFrame (c, title, gui);
    return self.lastFrame;
});},
</t>
<t tx="ekr.20201227092411.610">Array.prototype.issuperset = function (other) {
    this.sort ();
    for (let i = 0; i &lt; other.length; i++) {
        if (this.__bindexOf__ (other [i]) == -1) {
            return false;
        }
    }
    return true;
};
</t>
<t tx="ekr.20201227092411.611">Array.prototype.issubset = function (other) {
    return set (other.slice ()) .issuperset (this);
};
</t>
<t tx="ekr.20201227092411.612">Array.prototype.union = function (other) {
    let result = set (this.slice () .sort ());
    for (let i = 0; i &lt; other.length; i++) {
        if (result.__bindexOf__ (other [i]) == -1) {
            result.push (other [i]);
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092411.613">Array.prototype.intersection = function (other) {
    this.sort ();
    let result = set ();
    for (let i = 0; i &lt; other.length; i++) {
        if (this.__bindexOf__ (other [i]) != -1) {
            result.push (other [i]);
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092411.614">Array.prototype.difference = function (other) {
    let sother = set (other.slice () .sort ());
    let result = set ();
    for (let i = 0; i &lt; this.length; i++) {
        if (sother.__bindexOf__ (this [i]) == -1) {
            result.push (this [i]);
        }
    }
    return result;
};
</t>
<t tx="ekr.20201227092411.615">Array.prototype.symmetric_difference = function (other) {
    return this.union (other) .difference (this.intersection (other));
};
</t>
<t tx="ekr.20201227092411.616">Array.prototype.py_update = function () {
    let updated = [] .concat.apply (this.slice (), arguments) .sort ();
    this.py_clear ();
    for (let i = 0; i &lt; updated.length; i++) {
        if (updated [i] != updated [i - 1]) {
            this.push (updated [i]);
        }
    }
};
</t>
<t tx="ekr.20201227092411.617">Array.prototype.__eq__ = function (other) {
    if (this.length != other.length) {
        return false;
    }
    if (this.__class__ == set) {
        this.sort ();
        other.sort ();
    }
    for (let i = 0; i &lt; this.length; i++) {
        if (this [i] != other [i]) {
            return false;
        }
    }
    return true;
};
</t>
<t tx="ekr.20201227092411.618">Array.prototype.__ne__ = function (other) {
    return !this.__eq__ (other);
};
</t>
<t tx="ekr.20201227092411.619">Array.prototype.__le__ = function (other) {
    if (this.__class__ == set) {
        return this.issubset (other);
    }
    else {
        for (let i = 0; i &lt; this.length; i++) {
            if (this [i] &gt; other [i]) {
                return false;
            }
            else if (this [i] &lt; other [i]) {
                return true;
            }
        }
        return true;
    }
};
</t>
<t tx="ekr.20201227092411.62">    get runMainLoop () {return __get__ (this, function (self) {
        if (self.script) {
            var frame = self.lastFrame;
            g.app.log = frame.log;
            self.lastFrame.c.executeScript (__kwargtrans__ ({script: self.script}));
        }
        else {
            print ('**** NullGui.runMainLoop: terminating Leo.');
        }
    });}
});
export var NullScriptingControllerClass =  __class__ ('NullScriptingControllerClass', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.620">Array.prototype.__ge__ = function (other) {
    if (this.__class__ == set) {
        return this.issuperset (other);
    }
    else {
        for (let i = 0; i &lt; this.length; i++) {
            if (this [i] &lt; other [i]) {
                return false;
            }
            else if (this [i] &gt; other [i]) {
                return true;
            }
        }
        return true;
    }
};
</t>
<t tx="ekr.20201227092411.621">Array.prototype.__lt__ = function (other) {
    return (
        this.__class__ == set ?
        this.issubset (other) &amp;&amp; !this.issuperset (other) :
        !this.__ge__ (other)
    );
};
</t>
<t tx="ekr.20201227092411.622">Array.prototype.__gt__ = function (other) {
    return (
        this.__class__ == set ?
        this.issuperset (other) &amp;&amp; !this.issubset (other) :
        !this.__le__ (other)
    );
};
export function bytearray (bytable, encoding) {
    if (bytable == undefined) {
        return new Uint8Array (0);
    }
    else {
        let aType = py_typeof (bytable);
        if (aType == int) {
            return new Uint8Array (bytable);
        }
        else if (aType == str) {
            let aBytes = new Uint8Array (len (bytable));
            for (let i = 0; i &lt; len (bytable); i++) {
                aBytes [i] = bytable.charCodeAt (i);
            }
            return aBytes;
        }
        else if (aType == list || aType == tuple) {
            return new Uint8Array (bytable);
        }
        else {
            throw py_TypeError;
        }
    }
}
export var bytes = bytearray;
</t>
<t tx="ekr.20201227092411.623">Uint8Array.prototype.__add__ = function (aBytes) {
    let result = new Uint8Array (this.length + aBytes.length);
    result.set (this);
    result.set (aBytes, this.length);
    return result;
};
</t>
<t tx="ekr.20201227092411.624">Uint8Array.prototype.__mul__ = function (scalar) {
    let result = new Uint8Array (scalar * this.length);
    for (let i = 0; i &lt; scalar; i++) {
        result.set (this, i * this.length);
    }
    return result;
};
Uint8Array.prototype.__rmul__ = Uint8Array.prototype.__mul__;
export function str (stringable) {
    if (typeof stringable === 'number')
        return stringable.toString();
    else {
        try {
            return stringable.__str__ ();
        }
        catch (exception) {
            try {
                return repr (stringable);
            }
            catch (exception) {
                return String (stringable);
            }
        }
    }
};
String.prototype.__class__ = str;
str.__name__ = 'str';
str.__bases__ = [object];
String.prototype.__iter__ = function () {new __PyIterator__ (this);};
</t>
<t tx="ekr.20201227092411.625">String.prototype.__repr__ = function () {
    return (this.indexOf ('\'') == -1 ? '\'' + this + '\'' : '"' + this + '"') .py_replace ('\t', '\\t') .py_replace ('\n', '\\n');
};
</t>
<t tx="ekr.20201227092411.626">String.prototype.__str__ = function () {
    return this;
};
</t>
<t tx="ekr.20201227092411.627">String.prototype.capitalize = function () {
    return this.charAt (0).toUpperCase () + this.slice (1);
};
</t>
<t tx="ekr.20201227092411.628">String.prototype.endswith = function (suffix) {
    if (suffix instanceof Array) {
        for (var i=0;i&lt;suffix.length;i++) {
            if (this.slice (-suffix[i].length) == suffix[i])
                return true;
        }
    } else
        return suffix == '' || this.slice (-suffix.length) == suffix;
    return false;
};
</t>
<t tx="ekr.20201227092411.629">String.prototype.find = function (sub, start) {
    return this.indexOf (sub, start);
};
</t>
<t tx="ekr.20201227092411.63">get __init__ () {return __get__ (this, function (self, c, iconBar) {
    if (typeof iconBar == 'undefined' || (iconBar != null &amp;&amp; iconBar.hasOwnProperty ("__kwargtrans__"))) {;
        var iconBar = null;
    };
    self.c = c;
    self.iconBar = iconBar;
});},
</t>
<t tx="ekr.20201227092411.630">String.prototype.__getslice__ = function (start, stop, step) {
    if (start &lt; 0) {
        start = this.length + start;
    }
    if (stop == null) {
        stop = this.length;
    }
    else if (stop &lt; 0) {
        stop = this.length + stop;
    }
    var result = '';
    if (step == 1) {
        result = this.substring (start, stop);
    }
    else {
        for (var index = start; index &lt; stop; index += step) {
            result = result.concat (this.charAt(index));
        }
    }
    return result;
};
__setproperty__ (String.prototype, 'format', {
</t>
<t tx="ekr.20201227092411.631">    get: function () {return __get__ (this, function (self) {
        var args = tuple ([] .slice.apply (arguments).slice (1));
        var autoIndex = 0;
        return self.replace (/\{(\w*)\}/g, function (match, key) {
            if (key == '') {
                key = autoIndex++;
            }
            if (key == +key) {
                return args [key] === undefined ? match : str (args [key]);
            }
            else {
                for (var index = 0; index &lt; args.length; index++) {
                    if (typeof args [index] == 'object' &amp;&amp; args [index][key] !== undefined) {
                        return str (args [index][key]);
                    }
                }
                return match;
            }
        });
    });},
    enumerable: true
});
</t>
<t tx="ekr.20201227092411.633">String.prototype.isalnum = function () {
    return /^[0-9a-zA-Z]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.634">String.prototype.isalpha = function () {
    return /^[a-zA-Z]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.635">String.prototype.isdecimal = function () {
    return /^[0-9]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.636">String.prototype.isdigit = function () {
    return this.isdecimal()
}
</t>
<t tx="ekr.20201227092411.637">String.prototype.islower = function () {
    return /^[a-z]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.638">String.prototype.isupper = function () {
    return /^[A-Z]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.639">String.prototype.isspace = function () {
    return /^[\s]{1,}$/.test(this)
}
</t>
<t tx="ekr.20201227092411.64">    get createAllButtons () {return __get__ (this, function (self) {
        // pass;
    });}
});
export var StringCheckBox =  __class__ ('StringCheckBox', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.640">String.prototype.isnumeric = function () {
    return !isNaN (parseFloat (this)) &amp;&amp; isFinite (this);
};
</t>
<t tx="ekr.20201227092411.641">String.prototype.join = function (strings) {
    strings = Array.from (strings);
    return strings.join (this);
};
</t>
<t tx="ekr.20201227092411.642">String.prototype.lower = function () {
    return this.toLowerCase ();
};
</t>
<t tx="ekr.20201227092411.643">String.prototype.py_replace = function (old, aNew, maxreplace) {
    return this.split (old, maxreplace) .join (aNew);
};
</t>
<t tx="ekr.20201227092411.644">String.prototype.lstrip = function () {
    return this.replace (/^\s*/g, '');
};
</t>
<t tx="ekr.20201227092411.645">String.prototype.rfind = function (sub, start) {
    return this.lastIndexOf (sub, start);
};
</t>
<t tx="ekr.20201227092411.646">String.prototype.rsplit = function (sep, maxsplit) {
    if (sep == undefined || sep == null) {
        sep = /\s+/;
        var stripped = this.strip ();
    }
    else {
        var stripped = this;
    }
    if (maxsplit == undefined || maxsplit == -1) {
        return stripped.split (sep);
    }
    else {
        var result = stripped.split (sep);
        if (maxsplit &lt; result.length) {
            var maxrsplit = result.length - maxsplit;
            return [result.slice (0, maxrsplit) .join (sep)] .concat (result.slice (maxrsplit));
        }
        else {
            return result;
        }
    }
};
</t>
<t tx="ekr.20201227092411.647">String.prototype.rstrip = function () {
    return this.replace (/\s*$/g, '');
};
</t>
<t tx="ekr.20201227092411.648">String.prototype.py_split = function (sep, maxsplit) {
    if (sep == undefined || sep == null) {
        sep = /\s+/;
        var stripped = this.strip ();
    }
    else {
        var stripped = this;
    }
    if (maxsplit == undefined || maxsplit == -1) {
        return stripped.split (sep);
    }
    else {
        var result = stripped.split (sep);
        if (maxsplit &lt; result.length) {
            return result.slice (0, maxsplit).concat ([result.slice (maxsplit).join (sep)]);
        }
        else {
            return result;
        }
    }
};
</t>
<t tx="ekr.20201227092411.649">String.prototype.startswith = function (prefix) {
    if (prefix instanceof Array) {
        for (var i=0;i&lt;prefix.length;i++) {
            if (this.indexOf (prefix [i]) == 0)
                return true;
        }
    } else
        return this.indexOf (prefix) == 0;
    return false;
};
</t>
<t tx="ekr.20201227092411.65">get __init__ () {return __get__ (this, function (self, py_name, label) {
    self.label = label;
    self.py_name = py_name;
    self.value = true;
});},
</t>
<t tx="ekr.20201227092411.650">String.prototype.strip = function () {
    return this.trim ();
};
</t>
<t tx="ekr.20201227092411.651">String.prototype.upper = function () {
    return this.toUpperCase ();
};
</t>
<t tx="ekr.20201227092411.652">String.prototype.__mul__ = function (scalar) {
    var result = '';
    for (var i = 0; i &lt; scalar; i++) {
        result = result + this;
    }
    return result;
};
String.prototype.__rmul__ = String.prototype.__mul__;
</t>
<t tx="ekr.20201227092411.653">function __contains__ (element) {
    return this.hasOwnProperty (element);
}
</t>
<t tx="ekr.20201227092411.654">function __keys__ () {
    var keys = [];
    for (var attrib in this) {
        if (!__specialattrib__ (attrib)) {
            keys.push (attrib);
        }
    }
    return keys;
}
</t>
<t tx="ekr.20201227092411.655">function __items__ () {
    var items = [];
    for (var attrib in this) {
        if (!__specialattrib__ (attrib)) {
            items.push ([attrib, this [attrib]]);
        }
    }
    return items;
}
</t>
<t tx="ekr.20201227092411.656">function __del__ (key) {
    delete this [key];
}
</t>
<t tx="ekr.20201227092411.657">function __clear__ () {
    for (var attrib in this) {
        delete this [attrib];
    }
}
</t>
<t tx="ekr.20201227092411.658">function __getdefault__ (aKey, aDefault) {
    var result = this [aKey];
    if (result == undefined) {
        result = this ['py_' + aKey]
    }
    return result == undefined ? (aDefault == undefined ? null : aDefault) : result;
}
</t>
<t tx="ekr.20201227092411.659">function __setdefault__ (aKey, aDefault) {
    var result = this [aKey];
    if (result != undefined) {
        return result;
    }
    var val = aDefault == undefined ? null : aDefault;
    this [aKey] = val;
    return val;
}
</t>
<t tx="ekr.20201227092411.66">get checkState () {return __get__ (this, function (self) {
    return self.value;
});},
</t>
<t tx="ekr.20201227092411.660">function __pop__ (aKey, aDefault) {
    var result = this [aKey];
    if (result != undefined) {
        delete this [aKey];
        return result;
    } else {
        if ( aDefault === undefined ) {
            throw KeyError (aKey, new Error());
        }
    }
    return aDefault;
}
</t>
<t tx="ekr.20201227092411.661">function __popitem__ () {
    var aKey = Object.keys (this) [0];
    if (aKey == null) {
        throw KeyError ("popitem(): dictionary is empty", new Error ());
    }
    var result = tuple ([aKey, this [aKey]]);
    delete this [aKey];
    return result;
}
</t>
<t tx="ekr.20201227092411.662">function __update__ (aDict) {
    for (var aKey in aDict) {
        this [aKey] = aDict [aKey];
    }
}
</t>
<t tx="ekr.20201227092411.663">function __values__ () {
    var values = [];
    for (var attrib in this) {
        if (!__specialattrib__ (attrib)) {
            values.push (this [attrib]);
        }
    }
    return values;
}
</t>
<t tx="ekr.20201227092411.664">function __dgetitem__ (aKey) {
    return this [aKey];
}
</t>
<t tx="ekr.20201227092411.665">function __dsetitem__ (aKey, aValue) {
    this [aKey] = aValue;
}
export function dict (objectOrPairs) {
    var instance = {};
    if (!objectOrPairs || objectOrPairs instanceof Array) {
        if (objectOrPairs) {
            for (var index = 0; index &lt; objectOrPairs.length; index++) {
                var pair = objectOrPairs [index];
                if ( !(pair instanceof Array) || pair.length != 2) {
                    throw ValueError(
                        "dict update sequence element #" + index +
                        " has length " + pair.length +
                        "; 2 is required", new Error());
                }
                var key = pair [0];
                var val = pair [1];
                if (!(objectOrPairs instanceof Array) &amp;&amp; objectOrPairs instanceof Object) {
                     if (!isinstance (objectOrPairs, dict)) {
                         val = dict (val);
                     }
                }
                instance [key] = val;
            }
        }
    }
    else {
        if (isinstance (objectOrPairs, dict)) {
            var aKeys = objectOrPairs.py_keys ();
            for (var index = 0; index &lt; aKeys.length; index++ ) {
                var key = aKeys [index];
                instance [key] = objectOrPairs [key];
            }
        } else if (objectOrPairs instanceof Object) {
            instance = objectOrPairs;
        } else {
            throw ValueError ("Invalid type of object for dict creation", new Error ());
        }
    }
    __setproperty__ (instance, '__class__', {value: dict, enumerable: false, writable: true});
    __setproperty__ (instance, '__contains__', {value: __contains__, enumerable: false});
    __setproperty__ (instance, 'py_keys', {value: __keys__, enumerable: false});
    __setproperty__ (instance, '__iter__', {value: function () {new __PyIterator__ (this.py_keys ());}, enumerable: false});
    __setproperty__ (instance, Symbol.iterator, {value: function () {new __JsIterator__ (this.py_keys ());}, enumerable: false});
    __setproperty__ (instance, 'py_items', {value: __items__, enumerable: false});
    __setproperty__ (instance, 'py_del', {value: __del__, enumerable: false});
    __setproperty__ (instance, 'py_clear', {value: __clear__, enumerable: false});
    __setproperty__ (instance, 'py_get', {value: __getdefault__, enumerable: false});
    __setproperty__ (instance, 'py_setdefault', {value: __setdefault__, enumerable: false});
    __setproperty__ (instance, 'py_pop', {value: __pop__, enumerable: false});
    __setproperty__ (instance, 'py_popitem', {value: __popitem__, enumerable: false});
    __setproperty__ (instance, 'py_update', {value: __update__, enumerable: false});
    __setproperty__ (instance, 'py_values', {value: __values__, enumerable: false});
    __setproperty__ (instance, '__getitem__', {value: __dgetitem__, enumerable: false});
    __setproperty__ (instance, '__setitem__', {value: __dsetitem__, enumerable: false});
    return instance;
}
dict.__name__ = 'dict';
dict.__bases__ = [object];
</t>
<t tx="ekr.20201227092411.666">function __setdoc__ (docString) {
    this.__doc__ = docString;
    return this;
}
__setproperty__ (Function.prototype, '__setdoc__', {value: __setdoc__, enumerable: false});
export function __jsmod__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__mod__' in a) {
        return a.__mod__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rmod__' in b) {
        return b.__rmod__ (a);
    }
    else {
        return a % b;
    }
};
export function __mod__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__mod__' in a) {
        return a.__mod__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rmod__' in b) {
        return b.__rmod__ (a);
    }
    else {
        return ((a % b) + b) % b;
    }
};
export function __pow__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__pow__' in a) {
        return a.__pow__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rpow__' in b) {
        return b.__rpow__ (a);
    }
    else {
        return Math.pow (a, b);
    }
};
export var pow = __pow__;
export function __neg__ (a) {
    if (typeof a == 'object' &amp;&amp; '__neg__' in a) {
        return a.__neg__ ();
    }
    else {
        return -a;
    }
};
export function __matmul__ (a, b) {
    return a.__matmul__ (b);
};
export function __mul__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__mul__' in a) {
        return a.__mul__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rmul__' in b) {
        return b.__rmul__ (a);
    }
    else if (typeof a == 'string') {
        return a.__mul__ (b);
    }
    else if (typeof b == 'string') {
        return b.__rmul__ (a);
    }
    else {
        return a * b;
    }
};
export function __truediv__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__truediv__' in a) {
        return a.__truediv__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rtruediv__' in b) {
        return b.__rtruediv__ (a);
    }
    else if (typeof a == 'object' &amp;&amp; '__div__' in a) {
        return a.__div__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rdiv__' in b) {
        return b.__rdiv__ (a);
    }
    else {
        return a / b;
    }
};
export function __floordiv__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__floordiv__' in a) {
        return a.__floordiv__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rfloordiv__' in b) {
        return b.__rfloordiv__ (a);
    }
    else if (typeof a == 'object' &amp;&amp; '__div__' in a) {
        return a.__div__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rdiv__' in b) {
        return b.__rdiv__ (a);
    }
    else {
        return Math.floor (a / b);
    }
};
export function __add__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__add__' in a) {
        return a.__add__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__radd__' in b) {
        return b.__radd__ (a);
    }
    else {
        return a + b;
    }
};
export function __sub__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__sub__' in a) {
        return a.__sub__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rsub__' in b) {
        return b.__rsub__ (a);
    }
    else {
        return a - b;
    }
};
export function __lshift__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__lshift__' in a) {
        return a.__lshift__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rlshift__' in b) {
        return b.__rlshift__ (a);
    }
    else {
        return a &lt;&lt; b;
    }
};
export function __rshift__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__rshift__' in a) {
        return a.__rshift__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rrshift__' in b) {
        return b.__rrshift__ (a);
    }
    else {
        return a &gt;&gt; b;
    }
};
export function __or__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__or__' in a) {
        return a.__or__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__ror__' in b) {
        return b.__ror__ (a);
    }
    else {
        return a | b;
    }
};
export function __xor__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__xor__' in a) {
        return a.__xor__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rxor__' in b) {
        return b.__rxor__ (a);
    }
    else {
        return a ^ b;
    }
};
export function __and__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__and__' in a) {
        return a.__and__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rand__' in b) {
        return b.__rand__ (a);
    }
    else {
        return a &amp; b;
    }
};
export function __eq__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__eq__' in a) {
        return a.__eq__ (b);
    }
    else {
        return a == b;
    }
};
export function __ne__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__ne__' in a) {
        return a.__ne__ (b);
    }
    else {
        return a != b
    }
};
export function __lt__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__lt__' in a) {
        return a.__lt__ (b);
    }
    else {
        return a &lt; b;
    }
};
export function __le__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__le__' in a) {
        return a.__le__ (b);
    }
    else {
        return a &lt;= b;
    }
};
export function __gt__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__gt__' in a) {
        return a.__gt__ (b);
    }
    else {
        return a &gt; b;
    }
};
export function __ge__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__ge__' in a) {
        return a.__ge__ (b);
    }
    else {
        return a &gt;= b;
    }
};
export function __imatmul__ (a, b) {
    if ('__imatmul__' in a) {
        return a.__imatmul__ (b);
    }
    else {
        return a.__matmul__ (b);
    }
};
export function __ipow__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__pow__' in a) {
        return a.__ipow__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__ipow__' in a) {
        return a.__pow__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rpow__' in b) {
        return b.__rpow__ (a);
    }
    else {
        return Math.pow (a, b);
    }
};
export function __ijsmod__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__imod__' in a) {
        return a.__ismod__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__mod__' in a) {
        return a.__mod__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rpow__' in b) {
        return b.__rmod__ (a);
    }
    else {
        return a % b;
    }
};
export function __imod__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__imod__' in a) {
        return a.__imod__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__mod__' in a) {
        return a.__mod__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rmod__' in b) {
        return b.__rmod__ (a);
    }
    else {
        return ((a % b) + b) % b;
    }
};
export function __imul__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__imul__' in a) {
        return a.__imul__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__mul__' in a) {
        return a = a.__mul__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rmul__' in b) {
        return a = b.__rmul__ (a);
    }
    else if (typeof a == 'string') {
        return a = a.__mul__ (b);
    }
    else if (typeof b == 'string') {
        return a = b.__rmul__ (a);
    }
    else {
        return a *= b;
    }
};
export function __idiv__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__idiv__' in a) {
        return a.__idiv__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__div__' in a) {
        return a = a.__div__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rdiv__' in b) {
        return a = b.__rdiv__ (a);
    }
    else {
        return a /= b;
    }
};
export function __iadd__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__iadd__' in a) {
        return a.__iadd__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__add__' in a) {
        return a = a.__add__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__radd__' in b) {
        return a = b.__radd__ (a);
    }
    else {
        return a += b;
    }
};
export function __isub__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__isub__' in a) {
        return a.__isub__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__sub__' in a) {
        return a = a.__sub__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rsub__' in b) {
        return a = b.__rsub__ (a);
    }
    else {
        return a -= b;
    }
};
export function __ilshift__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__ilshift__' in a) {
        return a.__ilshift__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__lshift__' in a) {
        return a = a.__lshift__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rlshift__' in b) {
        return a = b.__rlshift__ (a);
    }
    else {
        return a &lt;&lt;= b;
    }
};
export function __irshift__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__irshift__' in a) {
        return a.__irshift__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__rshift__' in a) {
        return a = a.__rshift__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rrshift__' in b) {
        return a = b.__rrshift__ (a);
    }
    else {
        return a &gt;&gt;= b;
    }
};
export function __ior__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__ior__' in a) {
        return a.__ior__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__or__' in a) {
        return a = a.__or__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__ror__' in b) {
        return a = b.__ror__ (a);
    }
    else {
        return a |= b;
    }
};
export function __ixor__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__ixor__' in a) {
        return a.__ixor__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__xor__' in a) {
        return a = a.__xor__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rxor__' in b) {
        return a = b.__rxor__ (a);
    }
    else {
        return a ^= b;
    }
};
export function __iand__ (a, b) {
    if (typeof a == 'object' &amp;&amp; '__iand__' in a) {
        return a.__iand__ (b);
    }
    else if (typeof a == 'object' &amp;&amp; '__and__' in a) {
        return a = a.__and__ (b);
    }
    else if (typeof b == 'object' &amp;&amp; '__rand__' in b) {
        return a = b.__rand__ (a);
    }
    else {
        return a &amp;= b;
    }
};
export function __getitem__ (container, key) {
    if (typeof container == 'object' &amp;&amp; '__getitem__' in container) {
        return container.__getitem__ (key);
    }
    else if ((typeof container == 'string' || container instanceof Array) &amp;&amp; key &lt; 0) {
        return container [container.length + key];
    }
    else {
        return container [key];
    }
};
export function __setitem__ (container, key, value) {
    if (typeof container == 'object' &amp;&amp; '__setitem__' in container) {
        container.__setitem__ (key, value);
    }
    else if ((typeof container == 'string' || container instanceof Array) &amp;&amp; key &lt; 0) {
        container [container.length + key] = value;
    }
    else {
        container [key] = value;
    }
};
export function __getslice__ (container, lower, upper, step) {
    if (typeof container == 'object' &amp;&amp; '__getitem__' in container) {
        return container.__getitem__ ([lower, upper, step]);
    }
    else {
        return container.__getslice__ (lower, upper, step);
    }
};
export function __setslice__ (container, lower, upper, step, value) {
    if (typeof container == 'object' &amp;&amp; '__setitem__' in container) {
        container.__setitem__ ([lower, upper, step], value);
    }
    else {
        container.__setslice__ (lower, upper, step, value);
    }
};
export var BaseException =  __class__ ('BaseException', [object], {
    __module__: __name__,
});
export var Exception =  __class__ ('Exception', [BaseException], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.667">get __init__ () {return __get__ (this, function (self) {
    var kwargs = dict ();
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    default: kwargs [__attrib0__] = __allkwargs0__ [__attrib0__];
                }
            }
            delete kwargs.__kwargtrans__;
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    self.__args__ = args;
    try {
        self.stack = kwargs.error.stack;
    }
    catch (__except0__) {
        self.stack = 'No stack trace available';
    }
});},
</t>
<t tx="ekr.20201227092411.668">get __repr__ () {return __get__ (this, function (self) {
    if (len (self.__args__) &gt; 1) {
        return '{}{}'.format (self.__class__.__name__, repr (tuple (self.__args__)));
    }
    else if (len (self.__args__)) {
        return '{}({})'.format (self.__class__.__name__, repr (self.__args__ [0]));
    }
    else {
        return '{}()'.format (self.__class__.__name__);
    }
});},
</t>
<t tx="ekr.20201227092411.669">    get __str__ () {return __get__ (this, function (self) {
        if (len (self.__args__) &gt; 1) {
            return str (tuple (self.__args__));
        }
        else if (len (self.__args__)) {
            return str (self.__args__ [0]);
        }
        else {
            return '';
        }
    });}
});
export var IterableError =  __class__ ('IterableError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.67">get objectName () {return __get__ (this, function (self) {
    return self.py_name;
});},
</t>
<t tx="ekr.20201227092411.670">    get __init__ () {return __get__ (this, function (self, error) {
        Exception.__init__ (self, "Can't iterate over non-iterable", __kwargtrans__ ({error: error}));
    });}
});
export var StopIteration =  __class__ ('StopIteration', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.671">    get __init__ () {return __get__ (this, function (self, error) {
        Exception.__init__ (self, 'Iterator exhausted', __kwargtrans__ ({error: error}));
    });}
});
export var ValueError =  __class__ ('ValueError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.672">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var KeyError =  __class__ ('KeyError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.673">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var AssertionError =  __class__ ('AssertionError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.674">    get __init__ () {return __get__ (this, function (self, message, error) {
        if (message) {
            Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
        }
        else {
            Exception.__init__ (self, __kwargtrans__ ({error: error}));
        }
    });}
});
export var NotImplementedError =  __class__ ('NotImplementedError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.675">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var IndexError =  __class__ ('IndexError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.676">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var AttributeError =  __class__ ('AttributeError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.677">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var py_TypeError =  __class__ ('py_TypeError', [Exception], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.678">    get __init__ () {return __get__ (this, function (self, message, error) {
        Exception.__init__ (self, message, __kwargtrans__ ({error: error}));
    });}
});
export var Warning =  __class__ ('Warning', [Exception], {
    __module__: __name__,
});
export var UserWarning =  __class__ ('UserWarning', [Warning], {
    __module__: __name__,
});
export var DeprecationWarning =  __class__ ('DeprecationWarning', [Warning], {
    __module__: __name__,
});
export var RuntimeWarning =  __class__ ('RuntimeWarning', [Warning], {
    __module__: __name__,
});
</t>
<t tx="ekr.20201227092411.679">export var __sort__ = function (iterable, key, reverse) {
    if (typeof key == 'undefined' || (key != null &amp;&amp; key.hasOwnProperty ("__kwargtrans__"))) {;
        var key = null;
    };
    if (typeof reverse == 'undefined' || (reverse != null &amp;&amp; reverse.hasOwnProperty ("__kwargtrans__"))) {;
        var reverse = false;
    };
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'iterable': var iterable = __allkwargs0__ [__attrib0__]; break;
                    case 'key': var key = __allkwargs0__ [__attrib0__]; break;
                    case 'reverse': var reverse = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
    }
    else {
    }
    if (key) {
        iterable.sort ((function __lambda__ (a, b) {
            if (arguments.length) {
                var __ilastarg0__ = arguments.length - 1;
                if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
                    var __allkwargs0__ = arguments [__ilastarg0__--];
                    for (var __attrib0__ in __allkwargs0__) {
                        switch (__attrib0__) {
                            case 'a': var a = __allkwargs0__ [__attrib0__]; break;
                            case 'b': var b = __allkwargs0__ [__attrib0__]; break;
                        }
                    }
                }
            }
            else {
            }
            return (key (a) &gt; key (b) ? 1 : -(1));
        }));
    }
    else {
        iterable.sort ();
    }
    if (reverse) {
        iterable.reverse ();
    }
};
</t>
<t tx="ekr.20201227092411.68">get setCheckState () {return __get__ (this, function (self, value) {
    self.value = value;
});},
</t>
<t tx="ekr.20201227092411.69">    get toggle () {return __get__ (this, function (self) {
        self.value = !(self.value);
    });}
});
export var StringGui =  __class__ ('StringGui', [LeoGui], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.7">get attachLeoIcon () {return __get__ (this, function (self, window) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.70">get oops () {return __get__ (this, function (self) {
    g.trace ('StringGui', g.callers (4));
});},
</t>
<t tx="ekr.20201227092411.71">    get runMainLoop () {return __get__ (this, function (self) {
        self.oops ();
    });}
});
export var StringLineEdit =  __class__ ('StringLineEdit', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.72">get __init__ () {return __get__ (this, function (self, py_name, disabled) {
    self.disabled = disabled;
    self.py_name = py_name;
    self.pos = 0;
    self.s = '';
});},
</t>
<t tx="ekr.20201227092411.73">get py_clear () {return __get__ (this, function (self) {
    self.pos = 0;
    self.s = '';
});},
</t>
<t tx="ekr.20201227092411.74">get insert () {return __get__ (this, function (self, s) {
    if (s) {
        var i = self.pos;
        self.s = (self.s.__getslice__ (0, i, 1) + s) + self.s.__getslice__ (i, null, 1);
        self.pos += len (s);
    }
});},
</t>
<t tx="ekr.20201227092411.75">get objectName () {return __get__ (this, function (self) {
    return self.py_name;
});},
</t>
<t tx="ekr.20201227092411.76">    get text () {return __get__ (this, function (self) {
        return self.s;
    });}
});
export var StringRadioButton =  __class__ ('StringRadioButton', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.77">get __init__ () {return __get__ (this, function (self, py_name, label) {
    self.label = label;
    self.py_name = py_name;
    self.value = true;
});},
</t>
<t tx="ekr.20201227092411.78">get isChecked () {return __get__ (this, function (self) {
    return self.value;
});},
</t>
<t tx="ekr.20201227092411.79">get objectName () {return __get__ (this, function (self) {
    return self.py_name;
});},
</t>
<t tx="ekr.20201227092411.8">get center_dialog () {return __get__ (this, function (self, dialog) {
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.80">    get toggle () {return __get__ (this, function (self) {
        self.value = !(self.value);
    });}
});
export var UnitTestGui =  __class__ ('UnitTestGui', [NullGui], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092411.81">get __init__ () {return __get__ (this, function (self, theDict) {
    if (typeof theDict == 'undefined' || (theDict != null &amp;&amp; theDict.hasOwnProperty ("__kwargtrans__"))) {;
        var theDict = null;
    };
    self.oldGui = g.app.gui;
    __super__ (UnitTestGui, '__init__') (self, 'UnitTestGui');
    self.theDict = (theDict === null ? dict ({}) : theDict);
    g.app.gui = self;
});},
</t>
<t tx="ekr.20201227092411.82">get destroySelf () {return __get__ (this, function (self) {
    g.app.gui = self.oldGui;
});},
</t>
<t tx="ekr.20201227092411.83">    get createSpellTab () {return __get__ (this, function (self, c, spellHandler, tabName) {
        // pass;
    });}
});

//# sourceMappingURL=leo.core.leoGui.map
</t>
<t tx="ekr.20201227092411.84">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:09
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as g from './leo.core.leoGlobals.js';
var __name__ = 'leo.core.leoMenu';
export var LeoMenu =  __class__ ('LeoMenu', [object], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092411.85">get __init__ () {return __get__ (this, function (self, frame) {
    self.c = frame.c;
    self.enable_dict = dict ({});
    self.frame = frame;
    self.isNull = false;
    self.menus = dict ({});
    self.menuShortcuts = dict ({});
});},
</t>
<t tx="ekr.20201227092411.86">get finishCreate () {return __get__ (this, function (self) {
    self.define_enable_dict ();
});},
</t>
<t tx="ekr.20201227092411.87">get define_enable_dict () {return __get__ (this, function (self) {
    var c = self.c;
    if (!(c.commandsDict)) {
        return ;
    }
    @others
});},
</t>
<t tx="ekr.20201227092411.88">var __left0__ = dict ({'undo': c.undoer.canUndo, 'redo': c.undoer.canRedo, 'extract-names': c.canExtractSectionNames, 'extract': c.canExtract, 'match-brackets': c.canFindMatchingBracket, 'cut-node': c.canCutOutline, 'delete-node': c.canDeleteHeadline, 'paste-node': c.canPasteOutline, 'paste-retaining-clones': c.canPasteOutline, 'clone-node': c.canClone, 'sort-siblings': c.canSortSiblings, 'hoist': c.canHoist, 'de-hoist': c.canDehoist, 'contract-parent': c.canContractParent, 'contract-node': (function __lambda__ () {
    return c.p.hasChildren () &amp;&amp; c.p.isExpanded ();
}), 'contract-or-go-left': (function __lambda__ () {
    return c.p.hasChildren () &amp;&amp; c.p.isExpanded () || c.p.hasParent ();
}), 'expand-node': (function __lambda__ () {
    return c.p.hasChildren () &amp;&amp; !(c.p.isExpanded ());
}), 'expand-prev-level': (function __lambda__ () {
    return c.p.hasChildren () &amp;&amp; c.p.isExpanded ();
}), 'expand-next-level': (function __lambda__ () {
    return c.p.hasChildren ();
}), 'expand-to-level-1': (function __lambda__ () {
    return c.p.hasChildren () &amp;&amp; c.p.isExpanded ();
}), 'expand-or-go-right': (function __lambda__ () {
    return c.p.hasChildren ();
}), 'move-outline-down': (function __lambda__ () {
    return c.canMoveOutlineDown ();
}), 'move-outline-left': (function __lambda__ () {
    return c.canMoveOutlineLeft ();
}), 'move-outline-right': (function __lambda__ () {
    return c.canMoveOutlineRight ();
}), 'move-outline-up': (function __lambda__ () {
    return c.canMoveOutlineUp ();
}), 'promote': (function __lambda__ () {
    return c.canPromote ();
}), 'demote': (function __lambda__ () {
    return c.canDemote ();
}), 'goto-prev-history-node': (function __lambda__ () {
    return c.nodeHistory.canGoToPrevVisited ();
}), 'goto-next-history-node': (function __lambda__ () {
    return c.nodeHistory.canGoToNextVisited ();
}), 'goto-prev-visible': (function __lambda__ () {
    return c.canSelectVisBack ();
}), 'goto-next-visible': (function __lambda__ () {
    return c.canSelectVisNext ();
}), 'goto-next-clone': (function __lambda__ () {
    return c.p.isCloned ();
}), 'goto-prev-node': (function __lambda__ () {
    return c.canSelectThreadBack ();
}), 'goto-next-node': (function __lambda__ () {
    return c.canSelectThreadNext ();
}), 'goto-parent': (function __lambda__ () {
    return c.p.hasParent ();
}), 'goto-prev-sibling': (function __lambda__ () {
    return c.p.hasBack ();
}), 'goto-next-sibling': (function __lambda__ () {
    return c.p.hasNext ();
}), 'mark-subheads': (function __lambda__ () {
    return c.p.hasChildren ();
})});
self.enable_dict = __left0__;
var d = __left0__;
for (var i = 1; i &lt; 9; i++) {
</t>
<t tx="ekr.20201227092411.89">    d ['expand-to-level-{}'.format (i)] = (function __lambda__ () {
        return c.p.hasChildren ();
    });
}
if (0) {
    var commandKeys = list (c.commandsDict.py_keys ());
    for (var key of sorted (d.py_keys ())) {
        if (!__in__ (key, commandKeys)) {
            g.trace ('*** bad entry for {}'.format (key));
        }
    }
}
</t>
<t tx="ekr.20201227092411.9">get create_labeled_frame () {return __get__ (this, function (self, parent, caption, relief, bd, padx, pady) {
    if (typeof caption == 'undefined' || (caption != null &amp;&amp; caption.hasOwnProperty ("__kwargtrans__"))) {;
        var caption = null;
    };
    if (typeof relief == 'undefined' || (relief != null &amp;&amp; relief.hasOwnProperty ("__kwargtrans__"))) {;
        var relief = 'groove';
    };
    if (typeof bd == 'undefined' || (bd != null &amp;&amp; bd.hasOwnProperty ("__kwargtrans__"))) {;
        var bd = 2;
    };
    if (typeof padx == 'undefined' || (padx != null &amp;&amp; padx.hasOwnProperty ("__kwargtrans__"))) {;
        var padx = 0;
    };
    if (typeof pady == 'undefined' || (pady != null &amp;&amp; pady.hasOwnProperty ("__kwargtrans__"))) {;
        var pady = 0;
    };
    self.oops ();
});},
</t>
<t tx="ekr.20201227092411.90">get oops () {return __get__ (this, function (self) {
    g.pr ('LeoMenu oops:', g.callers (4), 'should be overridden in subclass');
});},
</t>
<t tx="ekr.20201227092411.91">get error () {return __get__ (this, function (self, s) {
    g.error ('', s);
});},
</t>
<t tx="ekr.20201227092411.92">get capitalizeMinibufferMenuName () {return __get__ (this, function (self, s, removeHyphens) {
    var result = [];
    for (var [i, ch] of enumerate (s)) {
        var prev = (i &gt; 0 ? s [i - 1] : '');
        var prevprev = (i &gt; 1 ? s [i - 2] : '');
        if (i == 0 || i == 1 &amp;&amp; prev == '&amp;' || prev == '-' || prev == '&amp;' &amp;&amp; prevprev == '-') {
            result.append (ch.capitalize ());
        }
        else if (removeHyphens &amp;&amp; ch == '-') {
            result.append (' ');
        }
        else {
            result.append (ch);
        }
    }
    return ''.join (result);
});},
</t>
<t tx="ekr.20201227092411.93">get createMenusFromTables () {return __get__ (this, function (self) {
    var c = self.c;
    var aList = c.config.getMenusList ();
    if (aList) {
        self.createMenusFromConfigList (aList);
    }
    else {
        g.es_print ('No @menu setting found');
    }
});},
</t>
<t tx="ekr.20201227092411.94">get createMenusFromConfigList () {return __get__ (this, function (self, aList) {
    var c = self.c;
    for (var z of aList) {
        var __left0__ = z;
        var kind = __left0__ [0];
        var val = __left0__ [1];
        var val2 = __left0__ [2];
        if (kind.startswith ('@menu')) {
            var py_name = kind.__getslice__ (len ('@menu'), null, 1).strip ();
            if (!(self.handleSpecialMenus (py_name, __kwargtrans__ ({parentName: null})))) {
                var menu = self.createNewMenu (py_name);
                if (menu) {
                    self.createMenuFromConfigList (py_name, val, __kwargtrans__ ({level: 0}));
                }
                else {
                    g.trace ('no menu', py_name);
                }
            }
        }
        else {
            self.error ('{} {} not valid outside @menu tree'.format (kind, val));
        }
    }
    var aList = c.config.getOpenWith ();
    if (aList) {
        self.createOpenWithMenuFromTable (aList);
    }
});},
</t>
<t tx="ekr.20201227092411.95">get createMenuFromConfigList () {return __get__ (this, function (self, parentName, aList, level) {
    if (typeof level == 'undefined' || (level != null &amp;&amp; level.hasOwnProperty ("__kwargtrans__"))) {;
        var level = 0;
    };
    var parentMenu = self.getMenu (parentName);
    if (!(parentMenu)) {
        g.trace ('NO PARENT', parentName, g.callers ());
    }
    var table = [];
    for (var z of aList) {
        var __left0__ = z;
        var kind = __left0__ [0];
        var val = __left0__ [1];
        var val2 = __left0__ [2];
        if (kind.startswith ('@menu')) {
            var py_name = kind.__getslice__ (5, null, 1).strip ();
            if (table) {
                self.createMenuEntries (parentMenu, table);
            }
            if (!(self.handleSpecialMenus (py_name, parentName, __kwargtrans__ ({alt_name: val2, table: table})))) {
                var menu = self.createNewMenu (py_name, parentName);
                if (menu) {
                    self.createMenuFromConfigList (py_name, val, level + 1);
                }
            }
            var table = [];
        }
        else if (kind == '@item') {
            var py_name = str (val);
            if (val2) {
                table.append (tuple ([val2, py_name]));
            }
            else {
                table.append (py_name);
            }
        }
        else {
            g.trace ('can not happen: bad kind:', kind);
        }
    }
    if (table) {
        self.createMenuEntries (parentMenu, table);
    }
});},
</t>
<t tx="ekr.20201227092411.96">get handleSpecialMenus () {return __get__ (this, function (self, py_name, parentName, alt_name, table) {
    if (typeof alt_name == 'undefined' || (alt_name != null &amp;&amp; alt_name.hasOwnProperty ("__kwargtrans__"))) {;
        var alt_name = null;
    };
    if (typeof table == 'undefined' || (table != null &amp;&amp; table.hasOwnProperty ("__kwargtrans__"))) {;
        var table = null;
    };
    var c = self.c;
    if (table === null) {
        var table = [];
    }
    var name2 = py_name.py_replace ('&amp;', '').py_replace (' ', '').lower ();
    if (name2 == 'plugins') {
        g.doHook ('create-optional-menus', __kwargtrans__ ({c: c, menu_name: py_name}));
        return true;
    }
    if (name2.startswith ('recentfiles')) {
        g.app.recentFilesManager.recentFilesMenuName = alt_name || py_name;
        self.createNewMenu (alt_name || py_name, parentName);
        return true;
    }
    if (name2 == 'help' &amp;&amp; g.isMac) {
        var helpMenu = self.getMacHelpMenu (table);
        return helpMenu !== null;
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.97">get hasSelection () {return __get__ (this, function (self) {
    var c = self.c;
    var w = c.frame.body.wrapper;
    if (c.frame.body) {
        var __left0__ = w.getSelectionRange ();
        var first = __left0__ [0];
        var last = __left0__ [1];
        return first != last;
    }
    return false;
});},
</t>
<t tx="ekr.20201227092411.98">get canonicalizeMenuName () {return __get__ (this, function (self, py_name) {
    if (g.isascii (py_name)) {
        return ''.join ((function () {
            var __accu0__ = [];
            for (var ch of py_name.lower ()) {
                if (ch.isalnum ()) {
                    __accu0__.append (ch);
                }
            }
            return __accu0__;
        }) ());
    }
    return py_name;
});},
</t>
<t tx="ekr.20201227092412.10">self.buffer = '{}{}{}'.format (self.buffer, sep.join ((function () {
    var __accu0__ = [];
    for (var arg of args) {
        __accu0__.append (str (arg));
    }
    return __accu0__;
}) ()), end).__getslice__ (-(4096), null, 1);
if (self.element) {
    self.element.innerHTML = self.buffer.py_replace ('\n', '&lt;br&gt;').py_replace (' ', '&amp;nbsp');
    self.element.scrollTop = self.element.scrollHeight;
}
else {
</t>
<t tx="ekr.20201227092412.100">export var _daylight_in_effect = function (t) {
    var jj = __jan_jun_tz (t);
    if (min (jj [0], jj [1]) == t.getTimezoneOffset ()) {
        return 1;
    }
    return 0;
};
</t>
<t tx="ekr.20201227092412.101">export var _timezone = function (t) {
    var jj = __jan_jun_tz (t);
    return max (jj [0], jj [1]);
};
</t>
<t tx="ekr.20201227092412.102">export var __tzn = function (t) {
    try {
        return str (t).py_split ('(') [1].py_split (')') [0];
    }
    catch (__except0__) {
        return 'n.a.';
    }
};
</t>
<t tx="ekr.20201227092412.103">export var _tzname = function (t) {
    var cn = __tzn (t);
    var ret = [cn, cn];
    var jj = __jan_jun_tz (t, __tzn);
    var ind = 0;
    if (!(_daylight_in_effect (t))) {
        var ind = 1;
    }
    for (var i of jj) {
        if (i != cn) {
            ret [ind] = i;
        }
    }
    return tuple (ret);
};
export var altzone = __now.getTimezoneOffset ();
if (!(_daylight_in_effect (__now))) {
    var _jj = __jan_jun_tz (__now);
    var altzone = (altzone == _jj [1] ? _jj [0] : _jj [1]);
}
var altzone = altzone * 60;
export var timezone = _timezone (__now) * 60;
export var daylight = _daylight (__now);
export var tzname = _tzname (__now);
</t>
<t tx="ekr.20201227092412.104">export var time = function () {
    return Date.now () / 1000;
};
</t>
<t tx="ekr.20201227092412.105">export var asctime = function (t) {
    return strftime ('%a %b %d %H:%M:%S %Y', t);
};
</t>
<t tx="ekr.20201227092412.106">export var mktime = function (t) {
    var d = new Date (t [0], t [1] - 1, t [2], t [3], t [4], t [5], 0);
    return (d - 0) / 1000;
};
</t>
<t tx="ekr.20201227092412.107">export var ctime = function (seconds) {
    if (!(seconds)) {
        var seconds = time ();
    }
    return asctime (localtime (seconds));
};
</t>
<t tx="ekr.20201227092412.108">export var localtime = function (seconds) {
    if (!(seconds)) {
        var seconds = time ();
    }
    return gmtime (seconds, true);
};
</t>
<t tx="ekr.20201227092412.109">export var gmtime = function (seconds, localtime) {
    if (!(seconds)) {
        var seconds = time ();
    }
    var millis = seconds * 1000;
    __date.setTime (millis);
    if (localtime) {
        var t = _local_time_tuple (__date);
    }
    else {
        var t = _utc_time_tuple (__date);
    }
    return t.__getslice__ (0, 9, 1);
};
</t>
<t tx="ekr.20201227092412.11">    console.log (sep.join ((function () {
        var __accu0__ = [];
        for (var arg of args) {
            __accu0__.append (str (arg));
        }
        return __accu0__;
    }) ()));
}
</t>
<t tx="ekr.20201227092412.110">export var strptime = function (string, format) {
    if (!(format)) {
        var format = '%a %b %d %H:%M:%S %Y';
    }
    var __left0__ = tuple ([string, format]);
    var ts = __left0__ [0];
    var fmt = __left0__ [1];
    var get_next = function (fmt) {
        @others
    };
    var dir_val = dict ({});
    while (ts) {
        var __left0__ = get_next (fmt);
        var d = __left0__ [0];
        var sep = __left0__ [1];
        var fmt = __left0__ [2];
        if (sep == '') {
            var lv = null;
            if (d) {
                var l = -(1);
                if (d == 'Y') {
                    var l = 4;
                }
                else if (d == 'a') {
                    var l = len (__weekdays [0]);
                }
                else if (d == 'A') {
                    var l = len (__weekdays_long [0]);
                }
                else if (d == 'b') {
                    var l = len (__months [0]);
                }
                else if (__in__ (d, tuple (['d', 'm', 'H', 'M', 'S']))) {
                    var l = 2;
                }
                if (l &gt; -(1)) {
                    var lv = [ts.__getslice__ (0, l, 1), ts.__getslice__ (l, null, 1)];
                }
            }
            if (!(lv)) {
                var lv = [ts, ''];
            }
        }
        else {
            var lv = _lsplit (ts, sep, 1);
        }
        if (d == null) {
            var ts = lv [1];
            continue;
        }
        var __left0__ = tuple ([lv [1], lv [0]]);
        var ts = __left0__ [0];
        dir_val [d] = __left0__ [1];
        if (fmt == '') {
            break;
        }
    }
    var t = [1900, 1, 1, 0, 0, 0, 0, 1, -(1)];
    var ignore_keys = [];
    var have_weekday = false;
    for (var [d, v] of dir_val.py_items ()) {
        if (__in__ (d, ignore_keys)) {
            continue;
        }
        if (d == 'p') {
            continue;
        }
        if (__in__ (d, __lu.py_keys ())) {
            t [__lu [d]] = int (v);
            continue;
        }
        if (__in__ (d, tuple (['a', 'A', 'b', 'B']))) {
            var v = v.lower ();
        }
        if (d == 'm') {
            ignore_keys.append ('b');
            ignore_keys.append ('B');
        }
        if (d == 'a') {
            if (!(__in__ (v, __weekdays))) {
                var __except0__ = ValueError ('Weekday unknown in your locale');
                __except0__.__cause__ = null;
                throw __except0__;
            }
            var have_weekday = true;
            t [6] = __weekdays.index (v);
        }
        else if (d == 'A') {
            if (!(__in__ (v, __weekdays_long))) {
                var __except0__ = ValueError ('Weekday unknown in your locale');
                __except0__.__cause__ = null;
                throw __except0__;
            }
            var have_weekday = true;
            t [6] = __weekdays_long.index (v);
        }
        else if (d == 'b') {
            if (!(__in__ (v, __months))) {
                var __except0__ = ValueError ('Month unknown in your locale');
                __except0__.__cause__ = null;
                throw __except0__;
            }
            t [1] = __months.index (v) + 1;
        }
        else if (d == 'B') {
            if (!(__in__ (v, __months_long))) {
                var __except0__ = ValueError ('Month unknown in your locale');
                __except0__.__cause__ = null;
                throw __except0__;
            }
            t [1] = __months_long.index (v) + 1;
        }
        else if (d == 'I') {
            var ampm = dir_val ['p'] || 'am';
            var ampm = ampm.lower ();
            var v = int (v);
            if (v == 12) {
                var v = 0;
            }
            else if (v &gt; 12) {
                var __except0__ = ValueError (((("time data '" + string) + "' does not match format '") + format) + "'");
                __except0__.__cause__ = null;
                throw __except0__;
            }
            if (ampm == 'pm') {
                v += 12;
            }
            t [__lu ['H']] = v;
        }
        else if (d == 'y') {
            t [0] = 2000 + int (v);
        }
        else if (d == 'Z') {
            if (__in__ (v.lower (), ['gmt', 'utc'])) {
                t [-(1)] = 0;
            }
        }
    }
    var __date = new Date (0);
    __date.setUTCFullYear (t [0]);
    __date.setUTCMonth (t [1] - 1);
    __date.setUTCDate (t [2]);
    __date.setUTCHours (t [3]);
    t [7] = _day_of_year (__date, true);
    if (!(have_weekday)) {
        t [6] = __date.getUTCDay () - 1;
    }
    return t;
};
</t>
<t tx="ekr.20201227092412.111"></t>
<t tx="ekr.20201227092412.112">var get_sep = function (fmt) {
    var res = [];
    if (!(fmt)) {
        return tuple (['', '']);
    }
    for (var i = 0; i &lt; len (fmt) - 1; i++) {
        var c = fmt [i];
        if (c == '%') {
            break;
        }
        res.append (c);
    }
    return tuple ([''.join (res), fmt.__getslice__ (i, null, 1)]);
};
var __left0__ = tuple ([null, null, null]);
var d = __left0__ [0];
var sep = __left0__ [1];
var f = __left0__ [2];
if (fmt) {
    if (fmt [0] == '%') {
        var d = fmt [1];
        var __left0__ = get_sep (fmt.__getslice__ (2, null, 1));
        var sep = __left0__ [0];
        var f = __left0__ [1];
    }
    else {
        var __left0__ = get_sep (fmt);
        var sep = __left0__ [0];
        var f = __left0__ [1];
    }
}
return tuple ([d, sep, f]);
</t>
<t tx="ekr.20201227092412.113">export var strftime = function (format, t) {
    var zf2 = function (v) {
        if (v &lt; 10) {
            return '0' + str (v);
        }
        return v;
    };
    if (!(t)) {
        var t = localtime ();
    }
    var f = format;
    for (var d of __lu.py_keys ()) {
        var k = '%' + d;
        if (!(__in__ (k, f))) {
            continue;
        }
        var v = zf2 (t [__lu [d]]);
        var f = f.py_replace (k, v);
    }
    for (var [d, l, pos] of tuple ([tuple (['b', __months, 1]), tuple (['B', __months_long, 1]), tuple (['a', __weekdays, 6]), tuple (['A', __weekdays_long, 6])])) {
        var p = t [pos];
        if (pos == 1) {
            var p = p - 1;
        }
        var v = l [p].capitalize ();
        var f = f.py_replace ('%' + d, v);
    }
    if (__in__ ('%p', f)) {
        if (t [3] &gt; 11) {
            var ap = 'PM';
        }
        else {
            var ap = 'AM';
        }
        var f = f.py_replace ('%p', ap);
    }
    if (__in__ ('%y', f)) {
        var f = f.py_replace ('%y', str (t [0]).__getslice__ (-(2), null, 1));
    }
    if (__in__ ('%I', f)) {
        var v = t [3];
        if (v == 0) {
            var v = 12;
        }
        else if (v &gt; 12) {
            var v = v - 12;
        }
        var f = f.py_replace ('%I', zf2 (v));
    }
    return f;
};

//# sourceMappingURL=time.map
</t>
<t tx="ekr.20201227092412.115">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:01
var re = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
var __name__ = 'warnings';
export var Actions =  __class__ ('Actions', [object], {
    __module__: __name__,
    error: 'error',
    ignore: 'ignore',
    always: 'always',
    defaultact: 'default',
    module: 'module',
    once: 'once'
});
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092412.116">export var ActionSet = set ((function () {
    var __accu0__ = [];
    for (var x of dir (Actions)) {
        if (!(x.startswith ('_'))) {
            __accu0__.append (x);
        }
    }
    return __accu0__;
}) ());
export var CategoryMap = dict ({'UserWarning': UserWarning, 'DeprecationWarning': DeprecationWarning, 'RuntimeWarning': RuntimeWarning});
export var _warnings_defaults = false;
export var filters = [];
export var defaultaction = Actions.defaultact;
export var onceregistry = dict ({});
export var _filters_version = 1;
</t>
<t tx="ekr.20201227092412.117">export var _filters_mutated = function () {
    _filters_version++;
};
</t>
<t tx="ekr.20201227092412.118">export var showwarning = function (message, category, filename, lineno, file, line) {
    if (typeof file == 'undefined' || (file != null &amp;&amp; file.hasOwnProperty ("__kwargtrans__"))) {;
        var file = null;
    };
    if (typeof line == 'undefined' || (line != null &amp;&amp; line.hasOwnProperty ("__kwargtrans__"))) {;
        var line = null;
    };
    var msg = WarningMessage (message, category, filename, lineno, file, line);
    _showwarnmsg_impl (msg);
};
</t>
<t tx="ekr.20201227092412.119">export var formatwarning = function (message, category, filename, lineno, line) {
    if (typeof line == 'undefined' || (line != null &amp;&amp; line.hasOwnProperty ("__kwargtrans__"))) {;
        var line = null;
    };
    var msg = WarningMessage (message, category, filename, lineno, null, line);
    return _formatwarnmsg_impl (msg);
};
</t>
<t tx="ekr.20201227092412.12">    get input () {return __get__ (this, function (self, question) {
        if (arguments.length) {
            var __ilastarg0__ = arguments.length - 1;
            if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
                var __allkwargs0__ = arguments [__ilastarg0__--];
                for (var __attrib0__ in __allkwargs0__) {
                    switch (__attrib0__) {
                        case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                        case 'question': var question = __allkwargs0__ [__attrib0__]; break;
                    }
                }
            }
        }
        else {
        }
        self.print ('{}'.format (question), __kwargtrans__ ({end: ''}));
        var answer = window.prompt ('\n'.join (self.buffer.py_split ('\n').__getslice__ (-(8), null, 1)));
        self.print (answer);
        return answer;
    });}
});
export var __terminal__ = __Terminal__ ();
export var print = __terminal__.print;
export var input = __terminal__.input;

//# sourceMappingURL=org.transcrypt.__runtime__.map
</t>
<t tx="ekr.20201227092412.120">export var _showwarnmsg_impl = function (msg) {
    var f = msg.file;
    var text = _formatwarnmsg (msg);
    if (f === null) {
        var text = text.rstrip ('\r\n');
        console.log (text);
    }
    else {
        try {
            f.write (text);
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                var exc = __except0__;
                // pass;
            }
            else {
                throw __except0__;
            }
        }
    }
};
</t>
<t tx="ekr.20201227092412.121">export var _formatwarnmsg_impl = function (msg) {
    var s = '{}:{}: {}: {}\n'.format (msg.filename, msg.lineno, msg.category, str (msg.message));
    if (msg.line) {
        var line = msg.line.strip ();
        s += '  {}\n'.format (line);
    }
    return s;
};
export var _showwarning = showwarning;
</t>
<t tx="ekr.20201227092412.122">export var setShowWarning = function (func) {
    if (!(callable (func))) {
        var __except0__ = py_TypeError ('showwarning method must be callable');
        __except0__.__cause__ = null;
        throw __except0__;
    }
    showwarning = func;
};
</t>
<t tx="ekr.20201227092412.123">export var _showwarnmsg = function (msg) {
    if (!(callable (showwarning))) {
        var __except0__ = py_TypeError ('warnings.showwarning() must be set to a function or method');
        __except0__.__cause__ = null;
        throw __except0__;
    }
    showwarning (msg.message, msg.category, msg.filename, msg.lineno, msg.file, msg.line);
};
export var _formatwarning = formatwarning;
</t>
<t tx="ekr.20201227092412.124">export var _formatwarnmsg = function (msg) {
    if (formatwarning !== _formatwarning) {
        return formatwarning (msg.message, msg.category, msg.filename, msg.lineno, __kwargtrans__ ({line: msg.line}));
    }
    return _formatwarnmsg_impl (msg);
};
</t>
<t tx="ekr.20201227092412.125">export var addWarningCategory = function (cat) {
    var py_name = cat.__name__;
    if (!__in__ (py_name, CategoryMap)) {
        CategoryMap [py_name] = cat;
    }
    else {
        var __except0__ = Exception ('Warning Category {} already exists'.format (py_name));
        __except0__.__cause__ = null;
        throw __except0__;
    }
};
</t>
<t tx="ekr.20201227092412.126">export var filterwarnings = function (action, message, category, module, lineno, append) {
    if (typeof message == 'undefined' || (message != null &amp;&amp; message.hasOwnProperty ("__kwargtrans__"))) {;
        var message = '';
    };
    if (typeof category == 'undefined' || (category != null &amp;&amp; category.hasOwnProperty ("__kwargtrans__"))) {;
        var category = Warning;
    };
    if (typeof module == 'undefined' || (module != null &amp;&amp; module.hasOwnProperty ("__kwargtrans__"))) {;
        var module = '';
    };
    if (typeof lineno == 'undefined' || (lineno != null &amp;&amp; lineno.hasOwnProperty ("__kwargtrans__"))) {;
        var lineno = 0;
    };
    if (typeof append == 'undefined' || (append != null &amp;&amp; append.hasOwnProperty ("__kwargtrans__"))) {;
        var append = false;
    };
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'action': var action = __allkwargs0__ [__attrib0__]; break;
                    case 'message': var message = __allkwargs0__ [__attrib0__]; break;
                    case 'category': var category = __allkwargs0__ [__attrib0__]; break;
                    case 'module': var module = __allkwargs0__ [__attrib0__]; break;
                    case 'lineno': var lineno = __allkwargs0__ [__attrib0__]; break;
                    case 'append': var append = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
    }
    else {
    }
    _add_filter (action, re.compile (message, re.I), category, re.compile (module), lineno, __kwargtrans__ ({append: append}));
};
</t>
<t tx="ekr.20201227092412.127">export var simplefilter = function (action, category, lineno, append) {
    if (typeof category == 'undefined' || (category != null &amp;&amp; category.hasOwnProperty ("__kwargtrans__"))) {;
        var category = Warning;
    };
    if (typeof lineno == 'undefined' || (lineno != null &amp;&amp; lineno.hasOwnProperty ("__kwargtrans__"))) {;
        var lineno = 0;
    };
    if (typeof append == 'undefined' || (append != null &amp;&amp; append.hasOwnProperty ("__kwargtrans__"))) {;
        var append = false;
    };
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'action': var action = __allkwargs0__ [__attrib0__]; break;
                    case 'category': var category = __allkwargs0__ [__attrib0__]; break;
                    case 'lineno': var lineno = __allkwargs0__ [__attrib0__]; break;
                    case 'append': var append = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
    }
    else {
    }
    _add_filter (action, null, category, null, lineno, __kwargtrans__ ({append: append}));
};
</t>
<t tx="ekr.20201227092412.128">export var _add_filter = function () {
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'append': var append = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
        var item = tuple ([].slice.apply (arguments).slice (0, __ilastarg0__ + 1));
    }
    else {
        var item = tuple ();
    }
    if (!(append)) {
        try {
            filters.remove (item);
        }
        catch (__except0__) {
            if (isinstance (__except0__, Exception)) {
                // pass;
            }
            else {
                throw __except0__;
            }
        }
        filters.insert (0, item);
    }
    else if (!__in__ (item, filters)) {
        filters.append (item);
    }
    _filters_mutated ();
};
</t>
<t tx="ekr.20201227092412.129">export var resetwarnings = function () {
    var filters = [];
    _filters_mutated ();
};
export var __warningregistry__ = dict ({});
</t>
<t tx="ekr.20201227092412.13">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:01
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import {translate} from './re.translate.js';
export {translate};
var __name__ = 're';
export var T = 1 &lt;&lt; 0;
export var TEMPLATE = T;
export var I = 1 &lt;&lt; 1;
export var IGNORECASE = I;
export var L = 1 &lt;&lt; 2;
export var LOCALE = L;
export var M = 1 &lt;&lt; 3;
export var MULTILINE = M;
export var S = 1 &lt;&lt; 4;
export var DOTALL = S;
export var U = 1 &lt;&lt; 5;
export var UNICODE = U;
export var X = 1 &lt;&lt; 6;
export var VERBOSE = X;
export var DEBUG = 1 &lt;&lt; 7;
export var A = 1 &lt;&lt; 8;
export var ASCII = A;
export var Y = 1 &lt;&lt; 16;
export var STICKY = Y;
export var G = 1 &lt;&lt; 17;
export var GLOBAL = G;
export var J = 1 &lt;&lt; 19;
export var JSSTRICT = J;
export var error =  __class__ ('error', [Exception], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092412.130">export var _checkCatMatch = function (msgCat, filtCat) {
    return msgCat.__name__ == filtCat.__name__;
};
</t>
<t tx="ekr.20201227092412.131">export var warn_explicit = function (message, category, filename, lineno, module, registry, module_globals) {
    if (typeof module == 'undefined' || (module != null &amp;&amp; module.hasOwnProperty ("__kwargtrans__"))) {;
        var module = null;
    };
    if (typeof registry == 'undefined' || (registry != null &amp;&amp; registry.hasOwnProperty ("__kwargtrans__"))) {;
        var registry = null;
    };
    if (typeof module_globals == 'undefined' || (module_globals != null &amp;&amp; module_globals.hasOwnProperty ("__kwargtrans__"))) {;
        var module_globals = null;
    };
    var lineno = int (lineno);
    if (module === null) {
        var module = filename || '&lt;unknown&gt;';
        if (module.__getslice__ (-(3), null, 1).lower () == '.py') {
            var module = module.__getslice__ (0, -(3), 1);
        }
    }
    if (registry === null) {
        var registry = __warningregistry__;
    }
    try {
        var currVersion = registry ['version'];
    }
    catch (__except0__) {
        if (isinstance (__except0__, KeyError)) {
            var currVersion = 0;
        }
        else {
            throw __except0__;
        }
    }
    if (currVersion != _filters_version) {
        registry.py_clear ();
        registry ['version'] = _filters_version;
    }
    if (isinstance (message, Warning)) {
        var text = str (message);
        var category = message.__class__;
    }
    else {
        var text = message;
        var message = category (message);
    }
    var key = tuple ([text, category, lineno]);
    if (__in__ (key, registry)) {
        return ;
    }
    var __break0__ = false;
    for (var item of filters) {
        var __left0__ = item;
        var action = __left0__ [0];
        var msg = __left0__ [1];
        var cat = __left0__ [2];
        var mod = __left0__ [3];
        var ln = __left0__ [4];
        if ((msg === null || msg.match (text)) &amp;&amp; _checkCatMatch (category, cat) &amp;&amp; (mod === null || mod.match (module)) &amp;&amp; (ln == 0 || lineno == ln)) {
            __break0__ = true;
            break;
        }
    }
    if (!__break0__) {
        var action = defaultaction;
    }
    if (action == Actions.ignore) {
        registry [key] = 1;
        return ;
    }
    if (action == Actions.error) {
        var __except0__ = message;
        __except0__.__cause__ = null;
        throw __except0__;
    }
    if (action == Actions.once) {
        registry [key] = 1;
        var oncekey = tuple ([text, category]);
        if (__in__ (oncekey, onceregistry)) {
            return ;
        }
        onceregistry [oncekey] = 1;
    }
    else if (action == Actions.always) {
        // pass;
    }
    else if (action == Actions.module) {
        registry [key] = 1;
        var altkey = tuple ([text, category, 0]);
        if (__in__ (altkey, registry)) {
            return ;
        }
        registry [altkey] = 1;
    }
    else if (action == Actions.defaultact) {
        registry [key] = 1;
    }
    else {
        var __except0__ = RuntimeError ('Unrecognized action ({}) in warnings.filters:\n {}'.format (action, item));
        __except0__.__cause__ = null;
        throw __except0__;
    }
    var msg = WarningMessage (message, category.__name__, filename, lineno);
    _showwarnmsg (msg);
};
export var WarningMessage =  __class__ ('WarningMessage', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.132">get __init__ () {return __get__ (this, function (self, message, category, filename, lineno, file, line) {
    if (typeof file == 'undefined' || (file != null &amp;&amp; file.hasOwnProperty ("__kwargtrans__"))) {;
        var file = null;
    };
    if (typeof line == 'undefined' || (line != null &amp;&amp; line.hasOwnProperty ("__kwargtrans__"))) {;
        var line = null;
    };
    self.message = message;
    self.category = category;
    self.filename = filename;
    self.lineno = lineno;
    self.file = file;
    self.line = line;
    self._category_name = (category ? category.__name__ : null);
});},
</t>
<t tx="ekr.20201227092412.133">    get __str__ () {return __get__ (this, function (self) {
        return '{{message : {}, category : {}, filename : {}, lineno : {}, line : {} }}'.format (self.message, self._category_name, self.filename, self.lineno, self.line);
    });}
});
export var catch_warnings =  __class__ ('catch_warnings', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.134">    get __init__ () {return __get__ (this, function (self) {
        var record = false;
        var module = null;
        self._record = record;
        self._entered = false;
        var __except0__ = NotImplementedError ('with/as not well supported in transcrypt');
        __except0__.__cause__ = null;
        throw __except0__;
    });}
});
</t>
<t tx="ekr.20201227092412.135">export var setWarningOptions = function (opts) {
    _processoptions (opts);
};
export var _OptionError =  __class__ ('_OptionError', [Exception], {
    __module__: __name__,
});
</t>
<t tx="ekr.20201227092412.136">export var _processoptions = function (args) {
    for (var arg of args) {
        try {
            _setoption (arg);
        }
        catch (__except0__) {
            if (isinstance (__except0__, _OptionError)) {
                var msg = __except0__;
                console.log ('WARNING: Invalid -W option ignored: {}'.format (msg));
            }
            else {
                throw __except0__;
            }
        }
    }
};
</t>
<t tx="ekr.20201227092412.137">export var _setoption = function (arg) {
    var parts = arg.py_split (':');
    if (len (parts) &gt; 5) {
        var __except0__ = _OptionError ('too many fields (max 5): {}'.format (arg));
        __except0__.__cause__ = null;
        throw __except0__;
    }
    while (len (parts) &lt; 5) {
        parts.append ('');
    }
    var __left0__ = (function () {
        var __accu0__ = [];
        for (var s of parts) {
            __accu0__.append (s.strip ());
        }
        return __accu0__;
    }) ();
    var action = __left0__ [0];
    var message = __left0__ [1];
    var category = __left0__ [2];
    var module = __left0__ [3];
    var lineno = __left0__ [4];
    var action = _getaction (action);
    var message = re.escape (message);
    var category = _getcategory (category);
    var module = re.escape (module);
    if (module) {
        var module = module + '$';
    }
    if (lineno) {
        try {
            var lineno = int (lineno);
            if (lineno &lt; 0) {
                var __except0__ = ValueError;
                __except0__.__cause__ = null;
                throw __except0__;
            }
        }
        catch (__except0__) {
            if (isinstance (__except0__, tuple ([ValueError, OverflowError]))) {
                var __except1__ = _OptionError ('invalid lineno {}'.format (lineno));
                __except1__.__cause__ = null;
                throw __except1__;
            }
            else {
                throw __except0__;
            }
        }
    }
    else {
        var lineno = 0;
    }
    filterwarnings (action, message, category, module, lineno);
};
</t>
<t tx="ekr.20201227092412.139">export var _getaction = function (action) {
    if (!(action)) {
        return Actions.defaultact;
    }
    if (action == 'all') {
        return Action.always;
    }
    for (var a of ActionSet) {
        if (a.startswith (action)) {
            return a;
        }
    }
    var __except0__ = _OptionError ('invalid action: {}'.format (action));
    __except0__.__cause__ = null;
    throw __except0__;
};
</t>
<t tx="ekr.20201227092412.14">    get __init__ () {return __get__ (this, function (self, msg, error, pattern, flags, pos) {
        if (typeof pattern == 'undefined' || (pattern != null &amp;&amp; pattern.hasOwnProperty ("__kwargtrans__"))) {;
            var pattern = null;
        };
        if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
            var flags = 0;
        };
        if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
            var pos = null;
        };
        Exception.__init__ (self, msg, __kwargtrans__ ({error: error}));
        self.pattern = pattern;
        self.flags = flags;
        self.pos = pos;
    });}
});
export var ReIndexError =  __class__ ('ReIndexError', [IndexError], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.140">export var _getcategory = function (category) {
    if (!(category)) {
        return Warning;
    }
    if (__in__ (category, CategoryMap.py_keys ())) {
        try {
            var cat = CategoryMap [category];
        }
        catch (__except0__) {
            if (isinstance (__except0__, NameError)) {
                var __except1__ = _OptionError ('unknown warning category: {}'.format (category));
                __except1__.__cause__ = null;
                throw __except1__;
            }
            else {
                throw __except0__;
            }
        }
    }
    else {
        var __except0__ = Exception ('Unable to import category: {}, use `addWarningCategory`'.format (category));
        __except0__.__cause__ = null;
        throw __except0__;
    }
    return cat;
};
if (!(_warnings_defaults)) {
    var silence = [DeprecationWarning];
    for (var cls of silence) {
        simplefilter (Actions.ignore, __kwargtrans__ ({category: cls}));
    }
}

//# sourceMappingURL=warnings.map
</t>
<t tx="ekr.20201227092412.15">    get __init__ () {return __get__ (this, function (self) {
        IndexError.__init__ (self, 'no such group');
    });}
});
export var Match =  __class__ ('Match', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.16">get __init__ () {return __get__ (this, function (self, mObj, string, pos, endpos, rObj, namedGroups) {
    if (typeof namedGroups == 'undefined' || (namedGroups != null &amp;&amp; namedGroups.hasOwnProperty ("__kwargtrans__"))) {;
        var namedGroups = null;
    };
    for (var [index, match] of enumerate (mObj)) {
        mObj [index] = (mObj [index] == undefined ? null : mObj [index]);
    }
    self._obj = mObj;
    self._pos = pos;
    self._endpos = endpos;
    self._re = rObj;
    self._string = string;
    self._namedGroups = namedGroups;
    self._lastindex = self._lastMatchGroup ();
    if (self._namedGroups !== null) {
        self._lastgroup = self._namedGroups [self._lastindex];
    }
    else {
        self._lastgroup = null;
    }
});},
</t>
<t tx="ekr.20201227092412.17">get _getPos () {return __get__ (this, function (self) {
    return self._pos;
});},
</t>
<t tx="ekr.20201227092412.18">get _setPos () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.19">get _getEndPos () {return __get__ (this, function (self) {
    return self._endpos;
});},
</t>
<t tx="ekr.20201227092412.2">export var sorted = function (iterable, key, reverse) {
    if (typeof key == 'undefined' || (key != null &amp;&amp; key.hasOwnProperty ("__kwargtrans__"))) {;
        var key = null;
    };
    if (typeof reverse == 'undefined' || (reverse != null &amp;&amp; reverse.hasOwnProperty ("__kwargtrans__"))) {;
        var reverse = false;
    };
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'iterable': var iterable = __allkwargs0__ [__attrib0__]; break;
                    case 'key': var key = __allkwargs0__ [__attrib0__]; break;
                    case 'reverse': var reverse = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
    }
    else {
    }
    if (py_typeof (iterable) == dict) {
        var result = copy (iterable.py_keys ());
    }
    else {
        var result = copy (iterable);
    }
    __sort__ (result, key, reverse);
    return result;
};
</t>
<t tx="ekr.20201227092412.20">get _setEndPos () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.21">get _getRe () {return __get__ (this, function (self) {
    return self._re;
});},
</t>
<t tx="ekr.20201227092412.22">get _setRe () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.23">get _getString () {return __get__ (this, function (self) {
    return self._string;
});},
</t>
<t tx="ekr.20201227092412.24">get _setString () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.25">get _getLastGroup () {return __get__ (this, function (self) {
    return self._lastgroup;
});},
</t>
<t tx="ekr.20201227092412.26">get _setLastGroup () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.27">get _getLastIndex () {return __get__ (this, function (self) {
    return self._lastindex;
});},
</t>
<t tx="ekr.20201227092412.28">get _setLastIndex () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.29">get _lastMatchGroup () {return __get__ (this, function (self) {
    if (len (self._obj) &gt; 1) {
        for (var i = len (self._obj) - 1; i &gt; 0; i--) {
            if (self._obj [i] !== null) {
                return i;
            }
        }
        return null;
    }
    else {
        return null;
    }
});},
</t>
<t tx="ekr.20201227092412.3">export var map = function (func, iterable) {
    return (function () {
        var __accu0__ = [];
        for (var item of iterable) {
            __accu0__.append (func (item));
        }
        return __accu0__;
    }) ();
};
</t>
<t tx="ekr.20201227092412.30">get expand () {return __get__ (this, function (self, template) {
    var __except0__ = NotImplementedError ();
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.31">get group () {return __get__ (this, function (self) {
    var args = tuple ([].slice.apply (arguments).slice (1));
    var ret = [];
    if (len (args) &gt; 0) {
        for (var index of args) {
            if (py_typeof (index) === str) {
                if (self._namedGroups !== null) {
                    if (!__in__ (index, self._namedGroups.py_keys ())) {
                        var __except0__ = ReIndexError ();
                        __except0__.__cause__ = null;
                        throw __except0__;
                    }
                    ret.append (self._obj [self._namedGroups [index]]);
                }
                else {
                    var __except0__ = NotImplementedError ('No NamedGroups Available');
                    __except0__.__cause__ = null;
                    throw __except0__;
                }
            }
            else {
                if (index &gt;= len (self._obj)) {
                    var __except0__ = ReIndexError ();
                    __except0__.__cause__ = null;
                    throw __except0__;
                }
                ret.append (self._obj [index]);
            }
        }
    }
    else {
        ret.append (self._obj [0]);
    }
    if (len (ret) == 1) {
        return ret [0];
    }
    else {
        return tuple (ret);
    }
});},
</t>
<t tx="ekr.20201227092412.32">get groups () {return __get__ (this, function (self, py_default) {
    if (typeof py_default == 'undefined' || (py_default != null &amp;&amp; py_default.hasOwnProperty ("__kwargtrans__"))) {;
        var py_default = null;
    };
    if (len (self._obj) &gt; 1) {
        var ret = self._obj.__getslice__ (1, null, 1);
        return tuple ((function () {
            var __accu0__ = [];
            for (var x of ret) {
                __accu0__.append ((x !== null ? x : py_default));
            }
            return __accu0__;
        }) ());
    }
    else {
        return tuple ();
    }
});},
</t>
<t tx="ekr.20201227092412.34">get groupdict () {return __get__ (this, function (self, py_default) {
    if (typeof py_default == 'undefined' || (py_default != null &amp;&amp; py_default.hasOwnProperty ("__kwargtrans__"))) {;
        var py_default = null;
    };
    if (self._namedGroups !== null) {
        var ret = dict ({});
        for (var [gName, gId] of self._namedGroups.py_items ()) {
            var value = self._obj [gId];
            ret [gName] = (value !== null ? value : py_default);
        }
        return ret;
    }
    else {
        var __except0__ = NotImplementedError ('No NamedGroups Available');
        __except0__.__cause__ = null;
        throw __except0__;
    }
});},
</t>
<t tx="ekr.20201227092412.35">get start () {return __get__ (this, function (self, group) {
    if (typeof group == 'undefined' || (group != null &amp;&amp; group.hasOwnProperty ("__kwargtrans__"))) {;
        var group = 0;
    };
    var gId = 0;
    if (py_typeof (group) === str) {
        if (self._namedGroups !== null) {
            if (!__in__ (group, self._namedGroups.py_keys ())) {
                var __except0__ = ReIndexError ();
                __except0__.__cause__ = null;
                throw __except0__;
            }
            var gId = self._namedGroups [group];
        }
        else {
            var __except0__ = NotImplementedError ('No NamedGroups Available');
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    else {
        var gId = group;
    }
    if (gId &gt;= len (self._obj)) {
        var __except0__ = ReIndexError ();
        __except0__.__cause__ = null;
        throw __except0__;
    }
    if (gId == 0) {
        return self._obj.index;
    }
    else if (self._obj [gId] !== null) {
        var r = compile (escape (self._obj [gId]), self._re.flags);
        var m = r.search (self._obj [0]);
        if (m) {
            return self._obj.index + m.start ();
        }
        else {
            var __except0__ = Exception ('Failed to find capture group');
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    else {
        return -(1);
    }
});},
</t>
<t tx="ekr.20201227092412.36">get end () {return __get__ (this, function (self, group) {
    if (typeof group == 'undefined' || (group != null &amp;&amp; group.hasOwnProperty ("__kwargtrans__"))) {;
        var group = 0;
    };
    var gId = 0;
    if (py_typeof (group) === str) {
        if (self._namedGroups !== null) {
            if (!__in__ (group, self._namedGroups.py_keys ())) {
                var __except0__ = ReIndexError ();
                __except0__.__cause__ = null;
                throw __except0__;
            }
            var gId = self._namedGroups [group];
        }
        else {
            var __except0__ = NotImplementedError ('No NamedGroups Available');
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    else {
        var gId = group;
    }
    if (gId &gt;= len (self._obj)) {
        var __except0__ = ReIndexError ();
        __except0__.__cause__ = null;
        throw __except0__;
    }
    if (gId == 0) {
        return self._obj.index + len (self._obj [0]);
    }
    else if (self._obj [gId] !== null) {
        var r = compile (escape (self._obj [gId]), self._re.flags);
        var m = r.search (self._obj [0]);
        if (m) {
            return self._obj.index + m.end ();
        }
        else {
            var __except0__ = Exception ('Failed to find capture group');
            __except0__.__cause__ = null;
            throw __except0__;
        }
    }
    else {
        return -(1);
    }
});},
</t>
<t tx="ekr.20201227092412.37">    get span () {return __get__ (this, function (self, group) {
        if (typeof group == 'undefined' || (group != null &amp;&amp; group.hasOwnProperty ("__kwargtrans__"))) {;
            var group = 0;
        };
        return tuple ([self.start (group), self.end (group)]);
    });}
});
Object.defineProperty (Match, 'pos', property.call (Match, Match._getPos, Match._setPos));
Object.defineProperty (Match, 'endpos', property.call (Match, Match._getEndPos, Match._setEndPos));
Object.defineProperty (Match, 're', property.call (Match, Match._getRe, Match._setRe));
Object.defineProperty (Match, 'string', property.call (Match, Match._getString, Match._setString));
Object.defineProperty (Match, 'lastgroup', property.call (Match, Match._getLastGroup, Match._setLastGroup));
Object.defineProperty (Match, 'lastindex', property.call (Match, Match._getLastIndex, Match._setLastIndex));
export var Regex =  __class__ ('Regex', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.38">get __init__ () {return __get__ (this, function (self, pattern, flags) {
    if (!((flags &amp; ASCII) &gt; 0)) {
        flags |= UNICODE;
    }
    self._flags = flags;
    var __left0__ = self._compileWrapper (pattern, flags);
    self._jsFlags = __left0__ [0];
    self._obj = __left0__ [1];
    self._jspattern = pattern;
    self._pypattern = pattern;
    var __left0__ = self._compileWrapper (pattern + '|', flags);
    var _ = __left0__ [0];
    var groupCounterRegex = __left0__ [1];
    self._groups = groupCounterRegex.exec ('').length - 1;
    self._groupindex = null;
});},
</t>
<t tx="ekr.20201227092412.39">get _getPattern () {return __get__ (this, function (self) {
    var ret = self._pypattern.py_replace ('\\', '\\\\');
    return ret;
});},
</t>
<t tx="ekr.20201227092412.40">get _setPattern () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.41">get _getFlags () {return __get__ (this, function (self) {
    return self._flags;
});},
</t>
<t tx="ekr.20201227092412.42">get _setFlags () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.43">get _getGroups () {return __get__ (this, function (self) {
    return self._groups;
});},
</t>
<t tx="ekr.20201227092412.44">get _setGroups () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.45">get _getGroupIndex () {return __get__ (this, function (self) {
    if (self._groupindex === null) {
        return dict ({});
    }
    else {
        return self._groupindex;
    }
});},
</t>
<t tx="ekr.20201227092412.46">get _setGroupIndex () {return __get__ (this, function (self, val) {
    var __except0__ = AttributeError ('readonly attribute');
    __except0__.__cause__ = null;
    throw __except0__;
});},
</t>
<t tx="ekr.20201227092412.47">get _compileWrapper () {return __get__ (this, function (self, pattern, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var jsFlags = self._convertFlags (flags);
    var rObj = null;
    var errObj = null;
    
                       try {
                         rObj = new RegExp(pattern, jsFlags)
                       } catch( err ) {
                         errObj = err
                       }
                       
    if (errObj !== null) {
        var __except0__ = error (errObj.message, errObj, pattern, flags);
        __except0__.__cause__ = null;
        throw __except0__;
    }
    return tuple ([jsFlags, rObj]);
});},
</t>
<t tx="ekr.20201227092412.48">get _convertFlags () {return __get__ (this, function (self, flags) {
    var bitmaps = [tuple ([DEBUG, '']), tuple ([IGNORECASE, 'i']), tuple ([MULTILINE, 'm']), tuple ([STICKY, 'y']), tuple ([GLOBAL, 'g']), tuple ([UNICODE, 'u'])];
    var ret = ''.join ((function () {
        var __accu0__ = [];
        for (var x of bitmaps) {
            if ((x [0] &amp; flags) &gt; 0) {
                __accu0__.append (x [1]);
            }
        }
        return __accu0__;
    }) ());
    return ret;
});},
</t>
<t tx="ekr.20201227092412.5">export var filter = function (func, iterable) {
    if (func == null) {
        var func = bool;
    }
    return (function () {
        var __accu0__ = [];
        for (var item of iterable) {
            if (func (item)) {
                __accu0__.append (item);
            }
        }
        return __accu0__;
    }) ();
};
</t>
<t tx="ekr.20201227092412.50">get _getTargetStr () {return __get__ (this, function (self, string, pos, endpos) {
    var endPtr = len (string);
    if (endpos !== null) {
        if (endpos &lt; endPtr) {
            var endPtr = endpos;
        }
    }
    if (endPtr &lt; 0) {
        var endPtr = 0;
    }
    var ret = string.__getslice__ (pos, endPtr, 1);
    return ret;
});},
</t>
<t tx="ekr.20201227092412.51">get _patternHasCaptures () {return __get__ (this, function (self) {
    return self._groups &gt; 0;
});},
</t>
<t tx="ekr.20201227092412.52">get search () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
        var pos = 0;
    };
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    if (endpos === null) {
        var endpos = len (string);
    }
    var rObj = self._obj;
    var m = rObj.exec (string);
    if (m) {
        if (m.index &lt; pos || m.index &gt; endpos) {
            return null;
        }
        else {
            return Match (m, string, pos, endpos, self, self._groupindex);
        }
    }
    else {
        return null;
    }
});},
</t>
<t tx="ekr.20201227092412.53">get match () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
        var pos = 0;
    };
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    var target = string;
    if (endpos !== null) {
        var target = target.__getslice__ (0, endpos, 1);
    }
    else {
        var endpos = len (string);
    }
    var rObj = self._obj;
    var m = rObj.exec (target);
    if (m) {
        if (m.index == pos) {
            return Match (m, string, pos, endpos, self, self._groupindex);
        }
        else {
            return null;
        }
    }
    else {
        return null;
    }
});},
</t>
<t tx="ekr.20201227092412.54">get fullmatch () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
        var pos = 0;
    };
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    var target = string;
    var strEndPos = len (string);
    if (endpos !== null) {
        var target = target.__getslice__ (0, endpos, 1);
        var strEndPos = endpos;
    }
    var rObj = self._obj;
    var m = rObj.exec (target);
    if (m) {
        var obsEndPos = m.index + len (m [0]);
        if (m.index == pos &amp;&amp; obsEndPos == strEndPos) {
            return Match (m, string, pos, strEndPos, self, self._groupindex);
        }
        else {
            return null;
        }
    }
    else {
        return null;
    }
});},
</t>
<t tx="ekr.20201227092412.55">get py_split () {return __get__ (this, function (self, string, maxsplit) {
    if (typeof maxsplit == 'undefined' || (maxsplit != null &amp;&amp; maxsplit.hasOwnProperty ("__kwargtrans__"))) {;
        var maxsplit = 0;
    };
    if (maxsplit &lt; 0) {
        return [string];
    }
    var mObj = null;
    var rObj = self._obj;
    if (maxsplit == 0) {
        var mObj = string.py_split (rObj);
        return mObj;
    }
    else {
        var flags = self._flags;
        flags |= GLOBAL;
        var __left0__ = self._compileWrapper (self._jspattern, flags);
        var _ = __left0__ [0];
        var rObj = __left0__ [1];
        var ret = [];
        var lastM = null;
        var cnt = 0;
        for (var i = 0; i &lt; maxsplit; i++) {
            var m = rObj.exec (string);
            if (m) {
                cnt++;
                if (lastM !== null) {
                    var start = lastM.index + len (lastM [0]);
                    var head = string.__getslice__ (start, m.index, 1);
                    ret.append (head);
                    if (len (m) &gt; 1) {
                        ret.extend (m.__getslice__ (1, null, 1));
                    }
                }
                else {
                    var head = string.__getslice__ (0, m.index, 1);
                    ret.append (head);
                    if (len (m) &gt; 1) {
                        ret.extend (m.__getslice__ (1, null, 1));
                    }
                }
                var lastM = m;
            }
            else {
                break;
            }
        }
        if (lastM !== null) {
            var endPos = lastM.index + len (lastM [0]);
            var end = string.__getslice__ (endPos, null, 1);
            ret.append (end);
        }
        return ret;
    }
});},
</t>
<t tx="ekr.20201227092412.56">get _findAllMatches () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
        var pos = 0;
    };
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    var target = self._getTargetStr (string, pos, endpos);
    var flags = self._flags;
    flags |= GLOBAL;
    var __left0__ = self._compileWrapper (self._jspattern, flags);
    var _ = __left0__ [0];
    var rObj = __left0__ [1];
    var ret = [];
    while (true) {
        var m = rObj.exec (target);
        if (m) {
            ret.append (m);
        }
        else {
            break;
        }
    }
    return ret;
});},
</t>
<t tx="ekr.20201227092412.57">get findall () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof pos == 'undefined' || (pos != null &amp;&amp; pos.hasOwnProperty ("__kwargtrans__"))) {;
        var pos = 0;
    };
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    var mlist = self._findAllMatches (string, pos, endpos);
    var mSelect = function (m) {
        if (len (m) &gt; 2) {
            return tuple (m.__getslice__ (1, null, 1));
        }
        else if (len (m) == 2) {
            return m [1];
        }
        else {
            return m [0];
        }
    };
    var ret = map (mSelect, mlist);
    return ret;
});},
</t>
<t tx="ekr.20201227092412.59">get finditer () {return __get__ (this, function (self, string, pos, endpos) {
    if (typeof endpos == 'undefined' || (endpos != null &amp;&amp; endpos.hasOwnProperty ("__kwargtrans__"))) {;
        var endpos = null;
    };
    var mlist = self._findAllMatches (string, pos, endpos);
    var ret = map ((function __lambda__ (m) {
        return Match (m, string, 0, len (string), self, self._groupindex);
    }), mlist);
    return py_iter (ret);
});},
</t>
<t tx="ekr.20201227092412.61">get sub () {return __get__ (this, function (self, repl, string, count) {
    if (typeof count == 'undefined' || (count != null &amp;&amp; count.hasOwnProperty ("__kwargtrans__"))) {;
        var count = 0;
    };
    var __left0__ = self.subn (repl, string, count);
    var ret = __left0__ [0];
    var _ = __left0__ [1];
    return ret;
});},
</t>
<t tx="ekr.20201227092412.62">    get subn () {return __get__ (this, function (self, repl, string, count) {
        if (typeof count == 'undefined' || (count != null &amp;&amp; count.hasOwnProperty ("__kwargtrans__"))) {;
            var count = 0;
        };
        var flags = self._flags;
        flags |= GLOBAL;
        var __left0__ = self._compileWrapper (self._jspattern, flags);
        var _ = __left0__ [0];
        var rObj = __left0__ [1];
        var ret = '';
        var totalMatch = 0;
        var lastEnd = -(1);
        while (true) {
            if (count &gt; 0) {
                if (totalMatch &gt;= count) {
                    if (lastEnd &lt; 0) {
                        return tuple ([ret, totalMatch]);
                    }
                    else {
                        ret += string.__getslice__ (lastEnd, m.index, 1);
                        return tuple ([ret, totalMatch]);
                    }
                }
            }
            var m = rObj.exec (string);
            if (m) {
                if (lastEnd &lt; 0) {
                    ret += string.__getslice__ (0, m.index, 1);
                }
                else {
                    ret += string.__getslice__ (lastEnd, m.index, 1);
                }
                if (callable (repl)) {
                    var content = repl (Match (m, string, 0, len (string), self, self._groupindex));
                    ret += content;
                }
                else {
                    ret += repl;
                }
                totalMatch++;
                var lastEnd = m.index + len (m [0]);
            }
            else if (lastEnd &lt; 0) {
                return tuple ([string, 0]);
            }
            else {
                ret += string.__getslice__ (lastEnd, null, 1);
                return tuple ([ret, totalMatch]);
            }
        }
    });}
});
Object.defineProperty (Regex, 'pattern', property.call (Regex, Regex._getPattern, Regex._setPattern));
Object.defineProperty (Regex, 'flags', property.call (Regex, Regex._getFlags, Regex._setFlags));
Object.defineProperty (Regex, 'groups', property.call (Regex, Regex._getGroups, Regex._setGroups));
Object.defineProperty (Regex, 'groupindex', property.call (Regex, Regex._getGroupIndex, Regex._setGroupIndex));
export var PyRegExp =  __class__ ('PyRegExp', [Regex], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.63">    get __init__ () {return __get__ (this, function (self, pyPattern, flags) {
        var __left0__ = translate (pyPattern);
        var jsTokens = __left0__ [0];
        var inlineFlags = __left0__ [1];
        var namedGroups = __left0__ [2];
        var nCapGroups = __left0__ [3];
        var n_splits = __left0__ [4];
        flags |= inlineFlags;
        var jsPattern = ''.join (jsTokens);
        Regex.__init__ (self, jsPattern, flags);
        self._pypattern = pyPattern;
        self._nsplits = n_splits;
        self._jsTokens = jsTokens;
        self._capgroups = nCapGroups;
        self._groupindex = namedGroups;
    });}
});
</t>
<t tx="ekr.20201227092412.64">export var compile = function (pattern, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    if (flags &amp; JSSTRICT) {
        var p = Regex (pattern, flags);
    }
    else {
        var p = PyRegExp (pattern, flags);
    }
    return p;
};
</t>
<t tx="ekr.20201227092412.65">export var search = function (pattern, string, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.search (string);
};
</t>
<t tx="ekr.20201227092412.66">export var match = function (pattern, string, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.match (string);
};
</t>
<t tx="ekr.20201227092412.67">export var fullmatch = function (pattern, string, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.fullmatch (string);
};
</t>
<t tx="ekr.20201227092412.68">export var py_split = function (pattern, string, maxsplit, flags) {
    if (typeof maxsplit == 'undefined' || (maxsplit != null &amp;&amp; maxsplit.hasOwnProperty ("__kwargtrans__"))) {;
        var maxsplit = 0;
    };
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.py_split (string, maxsplit);
};
</t>
<t tx="ekr.20201227092412.69">export var findall = function (pattern, string, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.findall (string);
};
</t>
<t tx="ekr.20201227092412.7">export var divmod = function (n, d) {
    return tuple ([Math.floor (n / d), __mod__ (n, d)]);
};
export var __Terminal__ =  __class__ ('__Terminal__', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.70">export var finditer = function (pattern, string, flags) {
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.finditer (string);
};
</t>
<t tx="ekr.20201227092412.71">export var sub = function (pattern, repl, string, count, flags) {
    if (typeof count == 'undefined' || (count != null &amp;&amp; count.hasOwnProperty ("__kwargtrans__"))) {;
        var count = 0;
    };
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.sub (repl, string, count);
};
</t>
<t tx="ekr.20201227092412.72">export var subn = function (pattern, repl, string, count, flags) {
    if (typeof count == 'undefined' || (count != null &amp;&amp; count.hasOwnProperty ("__kwargtrans__"))) {;
        var count = 0;
    };
    if (typeof flags == 'undefined' || (flags != null &amp;&amp; flags.hasOwnProperty ("__kwargtrans__"))) {;
        var flags = 0;
    };
    var p = compile (pattern, flags);
    return p.subn (repl, string, count);
};
</t>
<t tx="ekr.20201227092412.73">export var escape = function (string) {
    var ret = null;
    var replfunc = function (m) {
        if (m [0] == '\\') {
            return '\\\\\\\\';
        }
        else {
            return '\\\\' + m [0];
        }
    };
    
            var r = /[^A-Za-z:;\d]/g;
            ret = string.replace(r, replfunc);
            
    if (ret !== null) {
        return ret;
    }
    else {
        var __except0__ = Exception ('Failed to escape the passed string');
        __except0__.__cause__ = null;
        throw __except0__;
    }
};
</t>
<t tx="ekr.20201227092412.75">export var purge = function () {
    // pass;
};

//# sourceMappingURL=re.map
</t>
<t tx="ekr.20201227092412.76">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:02
var re = {};
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
import * as __module_re__ from './re.js';
__nest__ (re, '', __module_re__);
var __name__ = 're.translate';
export var VERBOSE = false;
export var MAX_SHIFTREDUCE_LOOPS = 1000;
export var stringFlags = 'aiLmsux';
export var Group =  __class__ ('Group', [object], {
    __module__: __name__,
    @others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092412.77">get __init__ () {return __get__ (this, function (self, start, end, klass) {
    self.start = start;
    self.end = end;
    self.klass = klass;
});},
</t>
<t tx="ekr.20201227092412.78">    get __repr__ () {return __get__ (this, function (self) {
        return str (tuple ([self.start, self.end, self.klass]));
    });}
});
</t>
<t tx="ekr.20201227092412.79">export var generateGroupSpans = function (tokens) {
    var groupInfo = [];
    var idx = 0;
    for (var token of tokens) {
        if (__t__ (token.py_name.startswith ('('))) {
            groupInfo.append (Group (idx, null, token.py_name));
        }
        else if (__t__ (token.py_name == ')')) {
            for (var group of py_reversed (groupInfo)) {
                if (__t__ (group.end === null)) {
                    group.end = idx;
                }
            }
        }
        idx++;
    }
    return groupInfo;
};
</t>
<t tx="ekr.20201227092412.8">get __init__ () {return __get__ (this, function (self) {
    self.buffer = '';
    try {
        self.element = document.getElementById ('__terminal__');
    }
    catch (__except0__) {
        self.element = null;
    }
    if (self.element) {
        self.element.style.overflowX = 'auto';
        self.element.style.boxSizing = 'border-box';
        self.element.style.padding = '5px';
        self.element.innerHTML = '_';
    }
});},
</t>
<t tx="ekr.20201227092412.80">export var countCaptureGroups = function (tokens) {
    var groupInfo = generateGroupSpans (tokens);
    var count = 0;
    for (var token of tokens) {
        if (__t__ (token.py_name == '(')) {
            count++;
        }
    }
    return count;
};
</t>
<t tx="ekr.20201227092412.81">export var getCaptureGroup = function (groupInfo, namedGroups, groupRef) {
    try {
        var id = int (groupRef);
    }
    catch (__except0__) {
        var id = namedGroups [groupRef];
    }
    var search = 0;
    for (var group of groupInfo) {
        if (__t__ (group.klass == '(')) {
            search++;
            if (__t__ (search == id)) {
                return group;
            }
        }
    }
};
</t>
<t tx="ekr.20201227092412.82">export var splitIfElse = function (tokens, namedGroups) {
    var variants = [];
    var groupInfo = generateGroupSpans (tokens);
    for (var group of groupInfo) {
        if (__t__ (group.klass == '(?&lt;')) {
            var iff = tokens.__getslice__ (0, null, 1);
            var els = tokens.__getslice__ (0, null, 1);
            var conStart = group.start;
            var conEnd = group.end;
            var ref = tokens [conStart + 1].py_name;
            var captureGroup = getCaptureGroup (groupInfo, namedGroups, ref);
            var captureGroupModifier = tokens [captureGroup.end + 1];
            if (__t__ (__t__ (__in__ (captureGroupModifier.py_name, ['?', '*'])) || captureGroupModifier.py_name.startswith ('{0,'))) {
                if (__t__ (captureGroupModifier.py_name == '?')) {
                    iff [captureGroup.end + 1] = null;
                }
                else if (__t__ (captureGroupModifier.py_name == '*')) {
                    iff [captureGroup.end + 1] = Token ('+');
                }
                else if (__t__ (captureGroupModifier.py_name.startswith ('{0,'))) {
                    iff [captureGroup.end + 1].py_name.__setslice__ (0, 3, null, '{1,');
                }
                els [captureGroup.end + 1] = null;
                var hasElse = false;
                for (var idx = conStart; idx &lt; conEnd; idx++) {
                    if (__t__ (tokens [idx].py_name == '|')) {
                        var hasElse = true;
                        els.py_pop (conEnd);
                        iff.__setslice__ (idx, conEnd + 1, null, []);
                        els.__setslice__ (conStart, idx + 1, null, []);
                        break;
                    }
                }
                if (__t__ (!__t__ ((hasElse)))) {
                    els.__setslice__ (conStart, conEnd + 1, null, []);
                    iff.py_pop (conEnd);
                }
                iff.__setslice__ (conStart, conStart + 3, null, []);
                els.__setslice__ (captureGroup.start, captureGroup.end + 1, null, [Token ('('), Token (')')]);
                iff.remove (null);
                els.remove (null);
                variants.append (iff);
                variants.append (els);
            }
            else {
                var pastIff = false;
                for (var idx = conStart; idx &lt; conEnd; idx++) {
                    if (__t__ (iff [idx].py_name == '|')) {
                        var iff = tokens.__getslice__ (0, idx, 1);
                        iff.extend (tokens.__getslice__ (conEnd + 1, null, 1));
                        break;
                    }
                }
                iff.__setslice__ (conStart, conStart + 3, null, []);
                variants.append (iff);
            }
            break;
        }
    }
    if (__t__ (!__t__ ((variants)))) {
        return [tokens];
    }
    var allVariants = [];
    for (var variant of variants) {
        allVariants.extend (splitIfElse (variant, namedGroups));
    }
    return allVariants;
};
export var Token =  __class__ ('Token', [object], {
    __module__: __name__,
</t>
<t tx="ekr.20201227092412.83">get __init__ () {return __get__ (this, function (self, py_name, paras, pure) {
    if (typeof paras == 'undefined' || (paras != null &amp;&amp; paras.hasOwnProperty ("__kwargtrans__"))) {;
        var paras = null;
    };
    if (typeof pure == 'undefined' || (pure != null &amp;&amp; pure.hasOwnProperty ("__kwargtrans__"))) {;
        var pure = false;
    };
    if (__t__ (paras === null)) {
        var paras = [];
    }
    self.py_name = py_name;
    self.paras = paras;
    self.pure = pure;
    self.isModeGroup = false;
});},
</t>
<t tx="ekr.20201227092412.84">get __repr__ () {return __get__ (this, function (self) {
    return self.py_name;
});},
</t>
<t tx="ekr.20201227092412.85">    get resolve () {return __get__ (this, function (self) {
        var paras = '';
        for (var para of self.paras) {
            paras += str (para);
        }
        return self.py_name + paras;
    });}
});
</t>
<t tx="ekr.20201227092412.86">export var shift = function (stack, queue) {
    var done = !__t__ ((bool (queue)));
    if (__t__ (!__t__ ((done)))) {
        stack.append (Token (queue [0], [], true));
        var queue = queue.__getslice__ (1, null, 1);
    }
    return tuple ([stack, queue, done]);
};
</t>
<t tx="ekr.20201227092412.87">export var shiftReduce = function (stack, queue, namedGroups, flags) {
    var done = false;
    var high = len (stack) - 1;
    if (__t__ (len (stack) &lt; 2)) {
        var __left0__ = shift (stack, queue);
        var stack = __left0__ [0];
        var queue = __left0__ [1];
        var done = __left0__ [2];
        return tuple ([stack, queue, flags, done]);
    }
    var s0 = (__t__ (len (stack) &gt; 0) ? stack [high] : Token (''));
    var s1 = (__t__ (len (stack) &gt; 1) ? stack [high - 1] : Token (''));
    if (__t__ (VERBOSE)) {
        for (var token of stack) {
            console.log (token.resolve (), '\t', __kwargtrans__ ({end: ''}));
        }
        console.log ('');
    }
    if (__t__ (s1.py_name == '\\')) {
        if (__t__ (s0.py_name == 'A')) {
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('^')]);
        }
        else if (__t__ (s0.py_name == 'a')) {
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('\\07')]);
        }
        else if (__t__ (s0.py_name == 'Z')) {
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('$')]);
        }
        else {
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('\\' + s0.py_name)]);
        }
    }
    else if (__t__ (__t__ (s0.py_name == '$') &amp;&amp; s0.pure)) {
        stack.py_pop ();
        stack.extend ([Token ('(?='), Token ('\\n'), Token ('?'), Token ('$'), Token (')')]);
    }
    else if (__t__ (s1.py_name == '{')) {
        if (__t__ (__t__ (s0.py_name == ',') &amp;&amp; len (s1.paras) == 0)) {
            s1.paras.append ('0');
            s1.paras.append (',');
        }
        else if (__t__ (s0.py_name == '}')) {
            s1.paras.append ('}');
            s1.py_name = s1.resolve ();
            s1.paras = [];
        }
        else {
            s1.paras.append (s0.py_name);
        }
        var stack = stack.__getslice__ (0, -__t__ ((1)), 1);
    }
    else if (__t__ (__t__ (s1.py_name == '[') &amp;&amp; s0.py_name == '^')) {
        stack.__setslice__ (-__t__ ((2)), null, null, [Token ('[^')]);
    }
    else if (__t__ (__t__ (s1.py_name == '(') &amp;&amp; s0.py_name == '?')) {
        stack.__setslice__ (-__t__ ((2)), null, null, [Token ('(?')]);
    }
    else if (__t__ (__t__ (__in__ (s1.py_name, ['*', '+', '?'])) &amp;&amp; s0.py_name == '?')) {
        stack.__setslice__ (-__t__ ((2)), null, null, [Token (s1.py_name + '?')]);
    }
    else if (__t__ (__t__ (s1.isModeGroup) &amp;&amp; s0.py_name == ')')) {
        var stack = stack.__getslice__ (0, -__t__ ((2)), 1);
    }
    else if (__t__ (s1.py_name == '(?')) {
        if (__t__ (__in__ (s0.py_name, stringFlags))) {
            if (__t__ (s0.py_name == 'i')) {
                flags |= re.IGNORECASE;
            }
            else if (__t__ (s0.py_name == 'L')) {
                flags |= re.LOCALE;
            }
            else if (__t__ (s0.py_name == 'm')) {
                flags |= re.MULTILINE;
            }
            else if (__t__ (s0.py_name == 's')) {
                flags |= re.DOTALL;
            }
            else if (__t__ (s0.py_name == 'u')) {
                flags |= re.UNICODE;
            }
            else if (__t__ (s0.py_name == 'x')) {
                flags |= re.VERBOSE;
            }
            else if (__t__ (s0.py_name == 'a')) {
                flags |= re.ASCII;
            }
            stack.py_pop ();
            s1.isModeGroup = true;
        }
        else {
            if (__t__ (s0.py_name == '(')) {
                s0.py_name = '&lt;';
            }
            var newToken = Token ('(?' + s0.py_name);
            stack.__setslice__ (-__t__ ((2)), null, null, [newToken]);
        }
    }
    else if (__t__ (s1.py_name == '(?&lt;')) {
        if (__t__ (s0.py_name == ')')) {
            stack.__setslice__ (-__t__ ((1)), null, null, [Token (''.join (s1.paras)), Token ('&gt;')]);
            s1.paras = [];
        }
        else {
            s1.paras.append (s0.py_name);
            stack.py_pop ();
        }
    }
    else if (__t__ (s1.py_name == '(?P')) {
        stack.__setslice__ (-__t__ ((2)), null, null, [Token ('(?P' + s0.py_name)]);
    }
    else if (__t__ (s1.py_name == '(?P&lt;')) {
        if (__t__ (s0.py_name == '&gt;')) {
            namedGroups [''.join (s1.paras)] = countCaptureGroups (stack) + 1;
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('(')]);
        }
        else {
            s1.paras.append (s0.py_name);
            stack.py_pop ();
        }
    }
    else if (__t__ (s1.py_name == '(?P=')) {
        if (__t__ (s0.py_name == ')')) {
            stack.__setslice__ (-__t__ ((2)), null, null, [Token ('\\' + str (namedGroups [s1.paras [0]]))]);
        }
        else if (__t__ (!__t__ ((s1.paras)))) {
            s1.paras.append (s0.py_name);
            stack.py_pop ();
        }
        else {
            s1.paras [0] += s0.py_name;
            stack.py_pop ();
        }
    }
    else if (__t__ (s1.py_name == '(?#')) {
        if (__t__ (s0.py_name == ')')) {
            var stack = stack.__getslice__ (0, -__t__ ((2)), 1);
        }
        else {
            var stack = stack.__getslice__ (0, -__t__ ((1)), 1);
        }
    }
    else {
        var __left0__ = shift (stack, queue);
        var stack = __left0__ [0];
        var queue = __left0__ [1];
        var done = __left0__ [2];
    }
    return tuple ([stack, queue, flags, done]);
};
</t>
<t tx="ekr.20201227092412.88">export var translate = function (rgx) {
    var stack = [];
    var queue = list (rgx);
    var flags = 0;
    var namedGroups = dict ();
    var nloop = 0;
    while (__t__ (true)) {
        nloop++;
        if (__t__ (nloop &gt; MAX_SHIFTREDUCE_LOOPS)) {
            var __except0__ = Exception ();
            __except0__.__cause__ = null;
            throw __except0__;
        }
        var __left0__ = shiftReduce (stack, queue, namedGroups, flags);
        var stack = __left0__ [0];
        var queue = __left0__ [1];
        var flags = __left0__ [2];
        var done = __left0__ [3];
        if (__t__ (done)) {
            break;
        }
    }
    var variants = splitIfElse (stack, namedGroups);
    var n_splits = len (variants);
    var final = [];
    for (var i = 0; i &lt; len (variants); i++) {
        final.extend (variants [i]);
        if (__t__ (i &lt; len (variants) - 1)) {
            final.append (Token ('|'));
        }
    }
    var stack = final;
    var groupInfo = generateGroupSpans (stack);
    var resolvedTokens = [];
    for (var token of stack) {
        var stringed = token.resolve ();
        if (__t__ (__t__ (flags &amp; re.DOTALL) &amp;&amp; stringed == '.')) {
            var stringed = '[\\s\\S]';
        }
        resolvedTokens.append (stringed);
    }
    return tuple ([resolvedTokens, flags, namedGroups, countCaptureGroups (stack), n_splits]);
};

//# sourceMappingURL=re.translate.map
</t>
<t tx="ekr.20201227092412.89">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:10:11
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'sys';

//# sourceMappingURL=sys.map
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092412.9">get print () {return __get__ (this, function (self) {
    var sep = ' ';
    var end = '\n';
    if (arguments.length) {
        var __ilastarg0__ = arguments.length - 1;
        if (arguments [__ilastarg0__] &amp;&amp; arguments [__ilastarg0__].hasOwnProperty ("__kwargtrans__")) {
            var __allkwargs0__ = arguments [__ilastarg0__--];
            for (var __attrib0__ in __allkwargs0__) {
                switch (__attrib0__) {
                    case 'self': var self = __allkwargs0__ [__attrib0__]; break;
                    case 'sep': var sep = __allkwargs0__ [__attrib0__]; break;
                    case 'end': var end = __allkwargs0__ [__attrib0__]; break;
                }
            }
        }
        var args = tuple ([].slice.apply (arguments).slice (1, __ilastarg0__ + 1));
    }
    else {
        var args = tuple ();
    }
    @others
});},
</t>
<t tx="ekr.20201227092412.90">@path c:/vs-code-devel/leojs4/src/
// Transcrypt'ed from Python, 2020-12-26 11:09:58
import {AssertionError, AttributeError, BaseException, DeprecationWarning, Exception, IndexError, IterableError, KeyError, NotImplementedError, RuntimeWarning, StopIteration, UserWarning, ValueError, Warning, __JsIterator__, __PyIterator__, __Terminal__, __add__, __and__, __call__, __class__, __envir__, __eq__, __floordiv__, __ge__, __get__, __getcm__, __getitem__, __getslice__, __getsm__, __gt__, __i__, __iadd__, __iand__, __idiv__, __ijsmod__, __ilshift__, __imatmul__, __imod__, __imul__, __in__, __init__, __ior__, __ipow__, __irshift__, __isub__, __ixor__, __jsUsePyNext__, __jsmod__, __k__, __kwargtrans__, __le__, __lshift__, __lt__, __matmul__, __mergefields__, __mergekwargtrans__, __mod__, __mul__, __ne__, __neg__, __nest__, __or__, __pow__, __pragma__, __proxy__, __pyUseJsNext__, __rshift__, __setitem__, __setproperty__, __setslice__, __sort__, __specialattrib__, __sub__, __super__, __t__, __terminal__, __truediv__, __withblock__, __xor__, abs, all, any, assert, bool, bytearray, bytes, callable, chr, copy, deepcopy, delattr, dict, dir, divmod, enumerate, filter, float, getattr, hasattr, input, int, isinstance, issubclass, len, list, map, max, min, object, ord, pow, print, property, py_TypeError, py_iter, py_metatype, py_next, py_reversed, py_typeof, range, repr, round, set, setattr, sorted, str, sum, tuple, zip} from './org.transcrypt.__runtime__.js';
var __name__ = 'time';
try {
    var __language = window.navigator.language;
}
catch (__except0__) {
    var __language = 'en-US';
}
@others
@language javascript
@tabwidth -4
</t>
<t tx="ekr.20201227092412.91">export var __debugGetLanguage = function () {
    return __language;
};
</t>
<t tx="ekr.20201227092412.92">export var __adapt__ = function (request) {
    __language = request.headers ['accept-language'].py_split (',') [0];
};
export var __date = new Date (0);
export var __now = new Date ();
export var __weekdays = [];
export var __weekdays_long = [];
export var __d = new Date (1467662339080);
for (var i = 0; i &lt; 7; i++) {
    for (var [l, s] of tuple ([tuple ([__weekdays, 'short']), tuple ([__weekdays_long, 'long'])])) {
        l.append (__d.toLocaleString (__language, dict ({'weekday': s})).lower ());
    }
    __d.setDate (__d.getDate () + 1);
}
export var __months = [];
export var __months_long = [];
var __d = new Date (946681200000.0);
for (var i = 0; i &lt; 12; i++) {
    for (var [l, s] of tuple ([tuple ([__months, 'short']), tuple ([__months_long, 'long'])])) {
        l.append (__d.toLocaleString (__language, dict ({'month': s})).lower ());
    }
    __d.setMonth (__d.getMonth () + 1);
}
export var __lu = dict ({'Y': 0, 'm': 1, 'd': 2, 'H': 3, 'M': 4, 'S': 5});
</t>
<t tx="ekr.20201227092412.93">export var _lsplit = function (s, sep, maxsplit) {
    if (maxsplit == 0) {
        return [s];
    }
    var py_split = s.py_split (sep);
    if (!(maxsplit)) {
        return py_split;
    }
    var ret = py_split.slice (0, maxsplit, 1);
    if (len (ret) == len (py_split)) {
        return ret;
    }
    ret.append (sep.join (py_split.__getslice__ (maxsplit, null, 1)));
    return ret;
};
</t>
<t tx="ekr.20201227092412.94">export var _local_time_tuple = function (jd) {
    var res = tuple ([jd.getFullYear (), jd.getMonth () + 1, jd.getDate (), jd.getHours (), jd.getMinutes (), jd.getSeconds (), (jd.getDay () &gt; 0 ? jd.getDay () - 1 : 6), _day_of_year (jd, true), _daylight_in_effect (jd), jd.getMilliseconds ()]);
    return res;
};
</t>
<t tx="ekr.20201227092412.95">export var _utc_time_tuple = function (jd) {
    var res = tuple ([jd.getUTCFullYear (), jd.getUTCMonth () + 1, jd.getUTCDate (), jd.getUTCHours (), jd.getUTCMinutes (), jd.getUTCSeconds (), jd.getUTCDay () - 1, _day_of_year (jd, false), 0, jd.getUTCMilliseconds ()]);
    return res;
};
</t>
<t tx="ekr.20201227092412.96">export var _day_of_year = function (jd, local) {
    var day_offs = 0;
    if (jd.getHours () + (jd.getTimezoneOffset () * 60) / 3600 &lt; 0) {
        var day_offs = -(1);
    }
    var was = jd.getTime ();
    var cur = jd.setHours (23);
    jd.setUTCDate (1);
    jd.setUTCMonth (0);
    jd.setUTCHours (0);
    jd.setUTCMinutes (0);
    jd.setUTCSeconds (0);
    var res = round ((cur - jd) / 86400000);
    if (!(local)) {
        res += day_offs;
    }
    if (res == 0) {
        var res = 365;
        jd.setTime (jd.getTime () - 86400);
        var last_year = jd.getUTCFullYear ();
        if (_is_leap (last_year)) {
            var res = 366;
        }
    }
    jd.setTime (was);
    return res;
};
</t>
<t tx="ekr.20201227092412.97">export var _is_leap = function (year) {
    return __mod__ (year, 4) == 0 &amp;&amp; (__mod__ (year, 100) != 0 || __mod__ (year, 400) == 0);
};
</t>
<t tx="ekr.20201227092412.98">export var __jan_jun_tz = function (t, func) {
    var was = t.getTime ();
    t.setDate (1);
    var res = [];
    for (var m of tuple ([0, 6])) {
        t.setMonth (m);
        if (!(func)) {
            res.append (t.getTimezoneOffset ());
        }
        else {
            res.append (func (t));
        }
    }
    t.setTime (was);
    return res;
};
</t>
<t tx="ekr.20201227092412.99">export var _daylight = function (t) {
    var jj = __jan_jun_tz (t);
    if (jj [0] != jj [1]) {
        return 1;
    }
    return 0;
};
</t>
</tnodes>
</leo_file>
